{"_id":"tape","_rev":"433-0471bb76a487eaa2ce7ca18e1e3eadb4","name":"tape","description":"tap-producing test harness for node and browsers","dist-tags":{"latest":"5.7.5","next":"5.3.0","v4.x-latest":"4.17.0"},"versions":{"0.0.0":{"name":"tape","version":"0.0.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.0.0","dist":{"shasum":"4905f75adf8585ad91fe98390f1b4150c5af956a","tarball":"https://registry.npmjs.org/tape/-/tape-0.0.0.tgz","integrity":"sha512-th+tL6e2Blhgj3BiTq6mAVSpa0QHNt8xX9jVh/YN+9V7xY0NLMqNUHYG7sbfDZu3QZsxqRwNycm6PzvE5Mp1bA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDxXsYlktPqus4OSwED1FusdKaEQshz47YLN0qBFxJbigIhAObIfm4rr8WxDr/nawex2RGo89OrGjyDHVyyOW69/uj/"}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.1":{"name":"tape","version":"0.0.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.0.1","dist":{"shasum":"97274682a90cb356f51397a24e782fe13eaf1e45","tarball":"https://registry.npmjs.org/tape/-/tape-0.0.1.tgz","integrity":"sha512-ketif66uZHVRU3AZa9n2ejkTu301MtHIayPWXnbkvVohn0ntWY8gnoZUIFkIkMsiSXkjQbe6TgSU1NM9OwtNBw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGUV7r8UHdRxqbXlzCquO4/5RNp9wLOLcQvaj7/SvTktAiEAjIi+VgAUz6t0sK4iLjqvSU4UW3mfucXZtLZW3sp4z0A="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.2":{"name":"tape","version":"0.0.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.0.2","dist":{"shasum":"129eb7b7cc617960ddd31fbe6b6926750ff86008","tarball":"https://registry.npmjs.org/tape/-/tape-0.0.2.tgz","integrity":"sha512-L6B0ST951/fKoktbR4YkdSVllEZ8rzsQdY5gapqqs1j7/lRN5M/jemobhqoaSpT+t7XupsLArtHf6x0MIyJ6lg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAhgvHuphb8qA7UfDW6kXkKwPy2U5LTvVGSkFZ8Mli1QAiEAiWYmR+qxn/H89ANaJO5s0/zC1DxoJl0W1+Tc+I9wuVs="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.3":{"name":"tape","version":"0.0.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.0.3","dist":{"shasum":"c0027ba48dfbd8758cddd7e4c66e26d3208076ec","tarball":"https://registry.npmjs.org/tape/-/tape-0.0.3.tgz","integrity":"sha512-/ThzW80boaWtD69IkZUNlQ1prYIQ2FrZhRZarb1uOFI3FA9/hbzKOGm6rs/PHr85X/B3d8eFZfcS4lQp/08vSw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGrW6T7XelMgVl+gO7cLd02wm7myjAclens65Q4Fi7YAAiEAhEzsDHAtXCXJ0K0ng48iHoqlW3CEBY+qnJzmK5WGljE="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.4":{"name":"tape","version":"0.0.4","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.0.4","dist":{"shasum":"155d370d1ce01cc2ed96eb7995b8189c3c4d5c31","tarball":"https://registry.npmjs.org/tape/-/tape-0.0.4.tgz","integrity":"sha512-RaDMjxE89j/KwQu9w8AP8hCmErQ+AJA56GpYfVFeAJssBuuFS+65itb29MtqCBT2CffnPhLVoeAsOMkvb6Biig==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGWjeFV0g6GHaa5H1byrhiMk5wGvQvp8V9QGf0crxQCwAiB5pT3TAYl+SdTB1RfJhMJ7sYR5do37myYqakEZAF1ELg=="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.0.5":{"name":"tape","version":"0.0.5","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.0.5","dist":{"shasum":"e8e6c692d9b18130f3993a268076e38cafefad12","tarball":"https://registry.npmjs.org/tape/-/tape-0.0.5.tgz","integrity":"sha512-Xn6/bTN8KxlSmluQLvrKVQKL5on4sqPORyFr/M6hGS6ys26+LIC4UuftrSNPbdxW1j+BFpBYfOt+OtOyiEj8TA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDzTxlllrzg4Foroq3e2FBT2U6Npg2CZ5KTFrIKMudsyAiEAqWBPxhCvc7JzPIlTONFYOe2ZLSVSGeKm6g2WOO6M0r0="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.0":{"name":"tape","version":"0.1.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.1.0","dist":{"shasum":"f5b1e9b376e20eb56345e21ab0cf82ec37369265","tarball":"https://registry.npmjs.org/tape/-/tape-0.1.0.tgz","integrity":"sha512-QjvWevLwlJgEmy4nv4MRmjRY11Jmw+cARF5m5C9w+zLwgWQAoMXBMUsgr0twxKcR4eu02yfh/vd32l9tte+B/g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFVhGrTfu20SBEKdGRFhlrLx/23XTOj2qtimMgGnFyUjAiEA5a5knaJ5pe87xzaEQcTj/+ow9lhG7yKgmewykU1Ub4E="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.1":{"name":"tape","version":"0.1.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.1.1","dist":{"shasum":"73edc41340d861621268c7e79da06c40c2339c28","tarball":"https://registry.npmjs.org/tape/-/tape-0.1.1.tgz","integrity":"sha512-Rljdmg6+R42r3Nk7od9OILcI1scudvjsTTshP+wk+Av3Nn/sAtwMeLQklwrofVUAeZpd6ThzYgl05ehqLu7HmA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDAdFFuec3Z+ttKF5frUXFMo1mZq6aqN1vodoHSgr3CWgIgLPnkktI/SNSJOPhxYfRsnbfs/V35B3PnXVcvPa1beRo="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.2":{"name":"tape","version":"0.1.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.1.2","dist":{"shasum":"c5d7133f881050bc6e86c5d8c3ad6eb9a41da169","tarball":"https://registry.npmjs.org/tape/-/tape-0.1.2.tgz","integrity":"sha512-KRUettZbNis/RiqDvjcGplB/QEUMn1BE4GLhrOLWhdwyROCPldzKVUhBn0lFag6se2l541GLNmUfDgZXj1Gtyw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCHydRxIZcdN10TXSxAUPRK+MbP6uKJCK4vohEsIjZrNUCIQDjEA5ba2A21uzd9F7h22UlUfGq7mziPIePdv7SHysscg=="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.3":{"name":"tape","version":"0.1.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.1.3","dist":{"shasum":"71e11e9f50ad4dd837aeac498b636ddf583f392a","tarball":"https://registry.npmjs.org/tape/-/tape-0.1.3.tgz","integrity":"sha512-BQiJQ9M65lnbWsn4oW9sBz0j90/ZqsNmFjGH1DAhNBSl36I3tEo3Lr4h4ap3Qef8G7YutMXykA6WG9hKSYokBQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBIMn9w72TUobV4LfFsZH8vchFzE+iph/6R5ONkZ+yV0AiEA6HB+FyYWzdHNaTXd/iMzLRI1/TwsLGBZfrVdAAWQJYo="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.4":{"name":"tape","version":"0.1.4","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.1.4","dist":{"shasum":"fb4f757a720c5519226d2c583e3e32dd091bb088","tarball":"https://registry.npmjs.org/tape/-/tape-0.1.4.tgz","integrity":"sha512-4V2y5j9Sz8zsheyXe3UAs0FdJKUAwDWJ8y9/HrUXeRddoZjL8ftD2Kl3L3IfF9ef2NxZ50z0E/fwuLD2bbdqew==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEl0x1IimWoOhHmcM888LMhQWgugeyGNgLSXaVATmH53AiEA5DDJa+t0QOUOlNGT3L3PCP/wFduxfIsvdyu9pqknZ1Q="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.1.5":{"name":"tape","version":"0.1.5","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.1.5","dist":{"shasum":"18fd9b16452ee5c8fe1be5f2b3ae24f55245eb6f","tarball":"https://registry.npmjs.org/tape/-/tape-0.1.5.tgz","integrity":"sha512-nq9pLhW2pScX3UH3t8MJL6p/dU43TxZebDCfuPliLyE0atR7syxvaZmzF9zHU0vprr6rcgIiPFUlYjSvTK4Wgw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCzIrUxJaQJpJsiM2ifBJKBLT1MfOWi8XtjbFS3dKqrDgIgckiybNmRKbq9eop+9fmNUVUsuIu/pwXZCkRUAmlJXDo="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.0":{"name":"tape","version":"0.2.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.2.0","dist":{"shasum":"3f4b0e7ad8a3914926aa38108590b48aea2fbadb","tarball":"https://registry.npmjs.org/tape/-/tape-0.2.0.tgz","integrity":"sha512-AaPYSCVMwuYUwWZPqIzV7unssrfDqQpMNKkGkHImHXixKsCZkDmDDbbr3kve/SaztFZdmIkCLV4wink3JNz4TQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICsdHJ6IarJj0PN3Wy9+B2FciWXzxCwZebTZki7zD4x7AiA51pyFF6q+KOFTLzsOVhjgCIergjOpQmqurmgaGdaLJw=="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.1":{"name":"tape","version":"0.2.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.2.1","dist":{"shasum":"fae90eefee190bd5dcd84fc21130ffdaaa322d14","tarball":"https://registry.npmjs.org/tape/-/tape-0.2.1.tgz","integrity":"sha512-mIvqwCH8KQJxsr4eC/HU62dCKF7vti9G6LH3KVOWp38cFjlQ7MD/3/RM+Uz3Ewto5rliue/OhTgZaQBAo8TbEA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGhBp3wa6KN62baPDA7WiKHAIHn4gzRbYww47EIkg1LUAiEAvQqir2fJmSHyG33QmxrpA3cQ+2iSOigppaOIeks9vO0="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.2.2":{"name":"tape","version":"0.2.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.2.2","dist":{"shasum":"64ccfa4b7ecf4a0060007e61716d424781671637","tarball":"https://registry.npmjs.org/tape/-/tape-0.2.2.tgz","integrity":"sha512-bfyf/0yv2FZVsf80b7oo50Lyi35sfjE7VM6206du7LtpbdQP8rbLhZy/stuS/Dcq4w6jE1Pz2zFrHtfeOKbaUA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBAK+NQ5rIcK+uDtoCg6/Gk9p8IfBkffICgcbbd3VJ/ZAiAJfQDEzYJ706FSI/XC+IfweZt0Bhof3SxLuG9SE57Syw=="}]},"_npmVersion":"1.1.59","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.3.0":{"name":"tape","version":"0.3.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.3.0","dist":{"shasum":"871276bc33ce2e38484204d57689099ec8210e05","tarball":"https://registry.npmjs.org/tape/-/tape-0.3.0.tgz","integrity":"sha512-9g2mYWdlQ/CgqQy+t5xBKDwKkQihJsNqr2M7UF4LqqYHh/Ly7+zVYSFpv+V5FFTErv5C9wEDflp8r8pVBBWnWg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCID36cli7o9jBmi5OGko7ZH170OniJNu8ZoroW3HW+3/NAiEA67WKQ5AAE8ddptQC1HKyOYNsbssAokQSMPDgt10A1o4="}]},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.3.1":{"name":"tape","version":"0.3.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.3.1","dist":{"shasum":"18d1fe175f891e57e3cbb2ff8d6668e84225ce8f","tarball":"https://registry.npmjs.org/tape/-/tape-0.3.1.tgz","integrity":"sha512-8VAMGPsR3WiA2gkYz+gGE58it8CFlEIW0Loj5NOBMmN0Ib0E2peGESLr1VN3Z4IIzBAFTmzTeKmPjwHU4i0WsQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC3tD2C3stz8YJLCj3UzjoBWVCblX4YzjhQ/+9STU41sQIhAK7ZQ17vjsRogcO9EzYkYCj8umwpxTN96GNWxOsOQK7Q"}]},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.3.2":{"name":"tape","version":"0.3.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.3.2","dist":{"shasum":"68b0af088a478a628bccc3c35eb9b54b534d6ebe","tarball":"https://registry.npmjs.org/tape/-/tape-0.3.2.tgz","integrity":"sha512-KOlHb7dKDvnkcfirK6nEsfBPIygM9wvHn0L37LAwp/IqCkMfBDV0kkwiKqA8CbGVtrwLZPpgvUgPAShSkU4Bhg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHbvgbqgLhVYx/qDb4htLtUpjV51tKxRed1cPdm+HpfvAiBVNIi/IJPaeL5nNAQ7LKFkCklLTT2kPsI2twGYTGQ1gQ=="}]},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"0.3.3":{"name":"tape","version":"0.3.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@0.3.3","dist":{"shasum":"3ad96abc80356135e78f12d78a24ab7882657bfb","tarball":"https://registry.npmjs.org/tape/-/tape-0.3.3.tgz","integrity":"sha512-vMGcYPF8W2kDkMSxkte0HDl0IJV3gVKNoDZ/wvzWH2r+qpJ7kwDQK6VfHcqGOgek5zMeZPOybabxR8ucGkKoZw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDyDduBuDaYPyhXq9Zphok5dNQE/9ipCIoGGIMfryef+gIgXvKbLY9JFJlbzYb9hqL1I2Dvg6bXU+1wTX3fzZxJCVg="}]},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"1.0.0":{"name":"tape","version":"1.0.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@1.0.0","dist":{"shasum":"46e8c59473729157050383d91861c6670934c364","tarball":"https://registry.npmjs.org/tape/-/tape-1.0.0.tgz","integrity":"sha512-O2ejJOwi+TMRgbhR8zRV5bPbcEfgejZxbqkTw9m3d3mKE5C4sk/n2AnqXM8pZvj8kGt60zlYV3zz07osY2FeQA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB64Xv7PxT24xvMtS4TRB83jVoVjqr4yIDpRu+ihnwWfAiEAlc5bOLBqL4hq4BvKQ1Fd4r9rsI80YobG10TX9SdnhQU="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"1.0.1":{"name":"tape","version":"1.0.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@1.0.1","dist":{"shasum":"d5a01d13e422946d8ce90d8e0a7c85029e49cc69","tarball":"https://registry.npmjs.org/tape/-/tape-1.0.1.tgz","integrity":"sha512-h9vQfpxM3ydG1c7MEUSxvmjb0Pq0QJ8FRjy24gUpDVX2n+txZuS23J6ucylIxHAx/XmgOeBKQ2QbEd2fBfaqmw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAucUIARf05ZI0toYUjAdrkJkFzlk8EBt6ABLqBaFgg3AiEAn2Bpw7oXgsMCV8kUEgRzAf8poWi7Z5ZKYKz/DerqweI="}]},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"1.0.2":{"name":"tape","version":"1.0.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@1.0.2","dist":{"shasum":"7f8eef990e23a3630bfbc35c7cfca7f6d172757b","tarball":"https://registry.npmjs.org/tape/-/tape-1.0.2.tgz","integrity":"sha512-qOX4n53E4NGqXJWVJr0hQUrV9iCxX3N3vUO80sKOb2S6jYManXeqI8H68PxTsdy/O/uWuo1ToI0r0CCkgQuACA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE2Oo7nXdxWhLVC2O3H1KvALKmUGz/EGDAHZwK4YDuxYAiEAntrmNgV2D8fCcejq91Qi8ZrKLqHd5d6yXYph1u8MP5s="}]},"_from":".","_npmVersion":"1.2.2","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"1.0.3":{"name":"tape","version":"1.0.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@1.0.3","dist":{"shasum":"ecf89fed5f5c5c3409cfe1579d37a1add40aae04","tarball":"https://registry.npmjs.org/tape/-/tape-1.0.3.tgz","integrity":"sha512-Mj6IUVqHvaiWKY1uEdzgHoZWuwuiwmM6fdbHij9F8IoMAoZ/PPTDRI0zIhCgfl6tyE4fMu+uPRYRJ5XCkmyv0A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCALpDEVi1LEoUr6heBIX3FfbsAXZIzXke/zcGD/7L6XwIgO7YyE9jvF8LEsqimUhWoHstxgsLrShLaloyMuWau/y8="}]},"_npmVersion":"1.1.71","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"1.0.4":{"name":"tape","version":"1.0.4","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","_id":"tape@1.0.4","dist":{"shasum":"e2e8e5c6dd3f00fdc2a5e4514f62fc221e59f9c4","tarball":"https://registry.npmjs.org/tape/-/tape-1.0.4.tgz","integrity":"sha512-ZJJxfxdPJWgq45Un77uYlI0/R9AkW7/sByPSb915VED2MgNm5r2UwXQwvECabIrpZKiF3sc4VaeDNljLRgMRhw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG3MZgxJHzWmQJcD1GO3W6wpCknqSMlri5SFbsCz6FDMAiAhOMrKYzlYjIEPoGG0CAPET5TO6LeNnY3+HMAh/f7Kpw=="}]},"_npmVersion":"1.1.71","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"1.1.0":{"name":"tape","version":"1.1.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@1.1.0","dist":{"shasum":"7f799fe330a2373ff909d72cb4a0625b6884e704","tarball":"https://registry.npmjs.org/tape/-/tape-1.1.0.tgz","integrity":"sha512-jbtxfRxVtzBjfJlJ2ff5A5OQNfuxnHlEpjlkbtBKls+ng1aUqhhUWPN7vinsIuZHs8LkqTZyO4SPk3ljzGZ62w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQClu4drgDN2FrbqUvDaqH69romRdIE/EGYUIx4z9CedRAIhAOM1+miPBfhrCOZR/HkexzoPF9pK2nCCdx5ZBNmXRbfE"}]},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"1.1.1":{"name":"tape","version":"1.1.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@1.1.1","dist":{"shasum":"1f2c8d1eeb99d33caa01ec554d6ca7822ebaa49b","tarball":"https://registry.npmjs.org/tape/-/tape-1.1.1.tgz","integrity":"sha512-bcO1aLvhmQrm4y0uDQ2Q8tQIlbWrfSbBzym1es9A4+GNJhWW3Lcegb0zriQ+kj9wZe9CeULWDvymy89OmTitUQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHOb+xXx1XIfihIIGJJz/eMGFQAUhiFRrsvS+WqsVqlyAiEAkgY5MMFLAtuqtAqBISqmEAn01gexsSoals+ei+rpLGI="}]},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.0.0":{"name":"tape","version":"2.0.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.0.0","dist":{"shasum":"7c4b178f115909d6fde9de15e33f34b9874cc6f6","tarball":"https://registry.npmjs.org/tape/-/tape-2.0.0.tgz","integrity":"sha512-D4d/aMsduJDkpZCFa38M0p5X7nyn75BJ3J90oKKkynHoJkoAymBega59Ja7z1a9Ypt6OE4G4qURp8fO/a9S61g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDk57DrFzZJMe98mC9n0y+r91H35qbp6ZiZhmCSMpZ0wQIgUdRp3LSL5AYf/1cQWtwe4jgAlUWZZ9wlfox9chIZDAQ="}]},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.0.1":{"name":"tape","version":"2.0.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.0.1","dist":{"shasum":"9bc66d268f9207adf39a8c43400238291df661eb","tarball":"https://registry.npmjs.org/tape/-/tape-2.0.1.tgz","integrity":"sha512-psQc2S4WMU92R7LoV+l1xNzj89uDZ7hPA3+MhkPktA8ZbHlt8bGcrThjodY6zTzTI93LD0mydoj+Trzc3fFDLQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIByVbXahKKFI1TTVubjwaCGLt00Mp+h+cCdE+/iURuvlAiAZyqnqnMJe1bIVoMB7YUW1cVVjTBmsNX11ZjNYvPy48A=="}]},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.1.0":{"name":"tape","version":"2.1.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.1.0","dist":{"shasum":"7c684abdf5c7789e489dde4716448bdd9d9ceff7","tarball":"https://registry.npmjs.org/tape/-/tape-2.1.0.tgz","integrity":"sha512-laSE34RQ+Wos0v8+630rXBb+BLh22ruBb4u+IJydnOx+q1KxtnBF85IajJ1IFU7X5RoWiMYq0HFTOmfBItKlpw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCg1Sp/X66iA4EXE8auBH5AxZFCHhkg1RvzS5Yua/8FSQIhAJelq4XUzk2LCV3ZtuNFA+rkaUY/fBSROdkVvwXbcHj4"}]},"_from":".","_npmVersion":"1.3.7","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.2.0":{"name":"tape","version":"2.2.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4","stream-combiner":"~0.0.2","split":"~0.2.10","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.2.0","dist":{"shasum":"5ebf1f22d46824638248fb215393ea2d2afde17f","tarball":"https://registry.npmjs.org/tape/-/tape-2.2.0.tgz","integrity":"sha512-125H9AImxS2rlNsNB2RfjxRXDXmj7WI1VwkHLMx/x7rJo9LUhNcPiQiQwhzM0/v+JH5EMZPQSuwV1k3bJgYgSA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDoGrcMZ61Xvhhi3kgAEgVn6+r5hByzCA7D+B7VdCUHywIgbYFRZldRc1o5WvaRTGbifRFcbOqXTF50Ar7D/C3uLN4="}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.2.1":{"name":"tape","version":"2.2.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","stream-combiner":"~0.0.2","split":"~0.2.10","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.2.1","dist":{"shasum":"e8e77fc6c9212a34e8f114c1af7ad151585b894f","tarball":"https://registry.npmjs.org/tape/-/tape-2.2.1.tgz","integrity":"sha512-pX+l+EqgxBTw8hqiDKLClLUJsbP65R44T3KuMCOJgR1eX3erNOIPkarlse4iwrAMefTc92mndrQ4mB4t+0n8xA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDuigvCrsN88rF6MbCjTy/VOZWGcI+Q4O4NZq3emZivUgIhAOz/X1yJqqeuqfHi/RQK0U0piCJDzXyfGQ/Yb6UQqSe+"}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.3.0":{"name":"tape","version":"2.3.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","stream-combiner":"~0.0.2","split":"~0.2.10","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.3.0","dist":{"shasum":"0dfeec709227fbcc9170abe7f046962b271431db","tarball":"https://registry.npmjs.org/tape/-/tape-2.3.0.tgz","integrity":"sha512-uct0y3TeBtIc/tMZ4xyeWHQItGpP378k1e9M/DhTcrJ74skHzDzg3baRYskts76EXaicoxLMZ+gaSIqtQYIjbw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIALS0AnHRnQHQ8Asa5nLtjT1KZOYHVXFic41QWSHSlfuAiEA92Qi+SNl2n16lSoF8Rv3bokZRra3uu0E1DVhXWpT0DU="}]},"_from":".","_npmVersion":"1.3.14","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.3.1":{"name":"tape","version":"2.3.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.3.1","dist":{"shasum":"1dd93ec80772424193f35a9eebe839a5ee38f4dd","tarball":"https://registry.npmjs.org/tape/-/tape-2.3.1.tgz","integrity":"sha512-1wb0gxEkmdaJPuSqDmwhHsXyHFbtleSvO3rJOYQdns8gPdvMsJBoZYRZz2S6v1RC5VXm2sqD4jADPcxehmR00A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCvbuFGaLqDR7izPwb4+KPZGBZ+sAoRWQQx5WJJqPUhvgIgC0hnEsMl2EdG52o58uV8rqpm9Qn+/MCy1Ffd7EtLhj4="}]},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.3.2":{"name":"tape","version":"2.3.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.3.2","dist":{"shasum":"df22cd6b8034f9fef026910c92b3c738fbc90e37","tarball":"https://registry.npmjs.org/tape/-/tape-2.3.2.tgz","integrity":"sha512-VVxeR2UfBweoTXA+uX98eNXpuovGm/3IjA1mAWwo5wQqdwP3LcXbTDTPHxM7KQJIp9gk/8QtRt6ncGLBmLnbaA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGx4fUnKLnuLP3Y1/o+3ll/TTuQmxWQh4APhuHmTZfqoAiEAyBjyPRvPhuE/gQgK4frdgKk7I/kL2J7WsCFX30CSGps="}]},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.4.0":{"name":"tape","version":"2.4.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.2.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.4.0","dist":{"shasum":"438bdb30aeeebdea6735f14130d09fb10074d646","tarball":"https://registry.npmjs.org/tape/-/tape-2.4.0.tgz","integrity":"sha512-GNMlSlxgjpDG7Nj/6GhC1fhdVqCvqTR7Jk5XDEm4OZDgmqR9ueM4wMG9VxnTTqKuPOpW3NrDe78oSN7sMX/gxQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHHV6n98Kl3262qGIyYEtYXpgNpqf4oh/ICj1qBcN+ALAiBFMDbHz3uBCfs9Cr3k8XT5pqAh47VC5KwGGS+q4hy9mQ=="}]},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.4.1":{"name":"tape","version":"2.4.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.2.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.4.1","dist":{"shasum":"46553f2aa7607885e565a1880b5e0284e163412b","tarball":"https://registry.npmjs.org/tape/-/tape-2.4.1.tgz","integrity":"sha512-zUBvsaZRrD2pr5q8TfQJ36Eq3QSROKVWJVWiauRJyKqNTTnmI8rSPp5yzLms5MPcr1RbncPVHhUJF1dz2b5c8w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD5pH05LmfKv/6pusKC5HxyVVlmi0FemtM99UFcZxHMRQIhAPp1UF6pK9js6r+mEU5ReCTecV4kg8zC7eK3EIJajGQR"}]},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.4.2":{"name":"tape","version":"2.4.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.2.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.4.2","dist":{"shasum":"ee89f047a15749e34a777de28ff561be93f08665","tarball":"https://registry.npmjs.org/tape/-/tape-2.4.2.tgz","integrity":"sha512-aRXj64WNIewksgdRbem+461KfDNOmBEENXYtlg9f5xyHRsnTMCejxUKGnH+CCDaGFcz6L4MMosTJfj8GOeyRKQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG1bqiogu78CGxUG0B+s03ZGOZ3IkrdkM2EuvlOLgnEeAiEA2xNAW+kp1K3QUv8Mo6LQMGDTgpe28ImyueJDsRL0TJ0="}]},"_from":".","_npmVersion":"1.3.21","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.5.0":{"name":"tape","version":"2.5.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.2.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.5.0","dist":{"shasum":"96123fa2b3515400e706714d29b4640a074980dd","tarball":"https://registry.npmjs.org/tape/-/tape-2.5.0.tgz","integrity":"sha512-YKzJeVAweU3KiZJtF8CObnXGee8VcmHTuPG1wO5FLXrHNU1hQkSiJ/ft4CrLmmwCIUdG9Wam6TpjYc1oCioxjw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICQ/8MM1Q7Y2HNeqiGzShxK1IWatoMXM0yGxOcvBRmk7AiBq85yif+KFHrmThuDm/QkcMgIUkndxzgQ08YqmL8IY3Q=="}]},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.6.0":{"name":"tape","version":"2.6.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.2.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.6.0","dist":{"shasum":"0747a3b078322f8ad070663890427953ccff9d2e","tarball":"https://registry.npmjs.org/tape/-/tape-2.6.0.tgz","integrity":"sha512-ov8QiT9iPXDuaqWCUyJYG/mS1XG40cAQMtJmnclztq62i407dyoxBAP3CD9om/0ZzIKAzpruU8BeIMYWbcmVng==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIH0OQrFIN/2deIiswZovZMfoGLPPq0IuJbJy+T/7K014AiEAjXq0iLvec2JOZ0gN5ZcAiIf6HN31Fv+hF0Qw9P9KqpM="}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.7.0":{"name":"tape","version":"2.7.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.7.0","dist":{"shasum":"f092a60c2eaf723092a132a480b2c447d9bb2196","tarball":"https://registry.npmjs.org/tape/-/tape-2.7.0.tgz","integrity":"sha512-y173g+LR4tquHD7jfcR2xZhJ0iTqj0tCfrnjQmMhuDSpZhypmKrXDyDqq6Jg3OgJLSAEC2JnXO1EYvbjLq7RXg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDL1tARsyeZwGGzei3bTo6oi2QcXDnIwxOflBt10JQo1gIhAPovXRFE7BhsR8xzLuYJ5H+TbD9mjoM6frJXNYlQef4H"}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.7.1":{"name":"tape","version":"2.7.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat-stream":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.7.1","dist":{"shasum":"238db55bb176956e98736a984242c1046b927b43","tarball":"https://registry.npmjs.org/tape/-/tape-2.7.1.tgz","integrity":"sha512-hCaK1kElmr25upjPcplIqgGrXYAp0UB3hx+QVDwX8NFvEvvwk/xpkaSp0kAnar9XFvC9JtI6XjIppdUTD1WzqQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGxiEPUpYrKJTAGqJn7XUsquBCxkMqvwlZEl3UMu+5+EAiEArvOYdtN9o9jXnHXI3E/rF7qhZNXv/Smi7eDtQZ2vDDU="}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.7.2":{"name":"tape","version":"2.7.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat-stream":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.7.2","dist":{"shasum":"6288c70e9ba51030065eb97ad0d2816c54e77d96","tarball":"https://registry.npmjs.org/tape/-/tape-2.7.2.tgz","integrity":"sha512-zwOazI/NOLhMiQpUjt0hZLHQlGGRHIO6PnuLheltUng+2OMoDJDO36p16ZrSzLBqvkNXYUl970QOeXWTj0GUig==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEimXgh+Bo6dbwCzUq1t6Qqur9bE/FgXOOlqZx4RcKmfAiEAle1sWXZLjWuuWIyIY/9NZynk01xW/rYnRUgaHUxzh3k="}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.8.0":{"name":"tape","version":"2.8.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat-stream":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.8.0","dist":{"shasum":"4b80451ecbbd4fc0372b3b65ecf20ca3a240716a","tarball":"https://registry.npmjs.org/tape/-/tape-2.8.0.tgz","integrity":"sha512-Mj/bCGmlrgMBqRdnndlZRQnkfNlVLOxoPMpFBuNrvi17NjbYJW5Ipj/VN/tUb6opKCVqBsoKg/JMLR0mxZ+u0w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDt6UEfmbuVJhrzvcxLy9UCrow2G+59iS2tDBk4lCxrAAIgGNWJHwnRrZ0t5C2IOTvdJwvZvW2NcE1mK3wh79OI1i0="}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.9.0":{"name":"tape","version":"2.9.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat-stream":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.9.0","dist":{"shasum":"6c9891d76da267b0019c6d9affae0c60b1567925","tarball":"https://registry.npmjs.org/tape/-/tape-2.9.0.tgz","integrity":"sha512-JMzHvZCxrS68hNLcxqGvtI8/ptNm3XIyA+E4g/cOtJ2tPw3z6CskHmkGsv1iJRkEI+m4nxMfoGkpyGmpdmz99w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBqbcbpiQFTzm4re84jBZHUIaL5XtSDsHEqHB03KfG9aAiAfJT0T2KusSRo3V5tbGq+cPaDkP8xWsv+TrJ+cS2I9nA=="}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.10.0":{"name":"tape","version":"2.10.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat-stream":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.10.0","dist":{"shasum":"735e7a9bd048681ebb97b2c5cc6ff955cee3a474","tarball":"https://registry.npmjs.org/tape/-/tape-2.10.0.tgz","integrity":"sha512-m99Sno+N823qT9atiD+t1ab0xp6hOvGVF9WZSMxE88kEb49iG4vo6vE7sJ4LksioQjjS/C/aNRPs8dGK6pryUQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCCdk7cxPWCjAIxgACsQhta4mGVDxsu9bMxbADspsBX4QIhAJ3LSv9GLNmlgF9H/l+7wvhLpASiE+e9icCVqkQBMrQM"}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.10.1":{"name":"tape","version":"2.10.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.10.1","dist":{"shasum":"f59fb88155b45848dee0546a3b924857d70e93de","tarball":"https://registry.npmjs.org/tape/-/tape-2.10.1.tgz","integrity":"sha512-xBwT32eoNfmbMSuDMmvuE2T4hvmTzdaS9OkQZAh8Ii6JA4v6K5/US+DZyp5LMtrPs4B1Yn/LGG7mvO5kA260HQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDM/xurYFPVv9BkTaH9erjcRQEmWeWTwNX9t6m4AVrNkAIgUzTAbHNV+pxCgrQZN1GRWvbzhjOrkvrdlTwCtNWIQ9Q="}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.10.2":{"name":"tape","version":"2.10.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.10.2","dist":{"shasum":"89503841e2fba97242a0aa33f3f4023223475a06","tarball":"https://registry.npmjs.org/tape/-/tape-2.10.2.tgz","integrity":"sha512-wbt5Id7hIrM67D5RlicZKpxDq/T+rDvBmUv9jgMkDDpBdYImx7+xXUD7hqViPl/20Gb+dwJcBQy8NHGx09bJcQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC7R4jlDIEHKZ+0g/snvYUaNmXCxYkySDUeiwrKmCBjmAIhAI6qEDEeTsHWufDve0srkrot6tGIshclZE3A1Dkw34hx"}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.11.0":{"name":"tape","version":"2.11.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.11.0","dist":{"shasum":"7bd70c3b7c8b46252956e11bb7e3f0c952839b71","tarball":"https://registry.npmjs.org/tape/-/tape-2.11.0.tgz","integrity":"sha512-UE+ZS7SBPHxPGflglfRSW6Ha2K8uyMBdOJPpZVHns/lm3vkvh78gMH+wlrFCatg0fEBc6EYzlkTVKDVZRVne7A==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDgK7c0ODMTVlC82tRmhQJGPnH0eqTXH2IiBHl2FJjoUAIhANyJL2cpzRnlz00kx5Rn7n/etz4+nugmGUtkcxbQB1tH"}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.12.0":{"name":"tape","version":"2.12.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.12.0","dist":{"shasum":"23bc39bedc026870c439f4c5ae7bd7a6c3dfd502","tarball":"https://registry.npmjs.org/tape/-/tape-2.12.0.tgz","integrity":"sha512-NexDqQLb2ntxvspy9bPgcPSncqk4ovoKJ+2I/g6YMGEjevrQ06gADQPcLBh5YIY0gqfjFzT7drXOfKEMInUHow==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDOQFw3Vl+RIJ8geGLNY87CFrdQKsTWklrYLY0XNMBYBQIhANxidfU2N80heHeJNg8BZADBojIXVk+OyKPciKcgD31B"}]},"_from":".","_npmVersion":"1.4.4","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.12.1":{"name":"tape","version":"2.12.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.12.1","dist":{"shasum":"cba4b45db05ff9dbd244e61bf404ea50b4a1f0ae","tarball":"https://registry.npmjs.org/tape/-/tape-2.12.1.tgz","integrity":"sha512-fm15MQ27dtudW+S1PYqz3I8gyCLvlAbQUYXqtSe/L4ZOfq4QF8pDqrPZsF2gIcadTrsIdIeHC7jr7QLHMDavpA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGPqAEpgqHOxIAdq5M6Y1X9vSM6dvEUZXfY0UiYAVB0GAiA6fDkGZVehcTzu+krqKn9EEZhlXk6X2Ui7VqTT04+neg=="}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.0.2":{"name":"tape","version":"2.0.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.0.2","dist":{"shasum":"13055fb26bf0e0d588925f5a87a41fa4f13ae3ca","tarball":"https://registry.npmjs.org/tape/-/tape-2.0.2.tgz","integrity":"sha512-Xm1AFRMFIRY5IiH4Q6lQTzOWHsoT0mfC0S9rO2pan+HQQj161o4QKTnoapNCXjeE+n9eeBt+GzArvIuvM45pEQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDcqI2oG44bYgCY/Yl59SkupGNoYFFaVzXLFOD7moHZ/AiApbGDSL2aHJtesP5jPJi6UR1QRUOkgmj++QqcqQMReJA=="}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.1.1":{"name":"tape","version":"2.1.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.1.1","dist":{"shasum":"bac446211e6c7a5a2338d2f48364a1d4173a7b31","tarball":"https://registry.npmjs.org/tape/-/tape-2.1.1.tgz","integrity":"sha512-0CpZzBCofsKFFZhwnZ8eRZP8bk22JiPNrM3ArbHWXmZgIbPsxjpEjzoQowAjfno1/bDNlQGOHooUXgzO8AaelQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvL+YxYuKfBR0LDnN8RRNEs1o3Oq9j+pxZjKYWjst2SwIhAIILeoOwhP+wEpkeLf4Z4+tccZG0Qzra3FFrj9758UgJ"}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.2.2":{"name":"tape","version":"2.2.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","stream-combiner":"~0.0.2","split":"~0.2.10","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.2.2","dist":{"shasum":"08206a192905c456280fb38786a03a9752bb3bf3","tarball":"https://registry.npmjs.org/tape/-/tape-2.2.2.tgz","integrity":"sha512-z84Dj/7fJkJxycSZAwYJ2THvcY8FiDtVqjh1dKz0gCcaXhAUAf3Z9VXK5OJGxyuj0wJv4Ik+Q9L+JLxOvU7LiQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDTR6zUTvFBQ+/pqkrb5sF+BBLI7LyvC5+OV390JMCoFAIhALxLJqNiXe1LV2E6SIFjOVx6vQNW17DxtBlexsHJ58Bm"}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.3.3":{"name":"tape","version":"2.3.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.1.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.3.3","dist":{"shasum":"2e7ce0a31df09f8d6851664a71842e0ca5057af7","tarball":"https://registry.npmjs.org/tape/-/tape-2.3.3.tgz","integrity":"sha512-V3tQqlti/JJm577hhDdoCOw1xl4aPcDjTY6PesnFjWDcUYzB6fz39ETXFQuPr9piaoHPfc65sjAehTgbfXOvxQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHqIO9lX3Zt3kS7cHaIjGe3/Z4qVxe4Opbye9GrZuGDdAiEAg5SqiqChZnmZpEhtwKmjajYeRgOwGB1ui4+NvsvCr6s="}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.4.3":{"name":"tape","version":"2.4.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.2.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.4.3","dist":{"shasum":"720c435360f174774e303aa52b4f9eec321366d8","tarball":"https://registry.npmjs.org/tape/-/tape-2.4.3.tgz","integrity":"sha512-LvwrLSuvxKODh0mXgOVNgfnH2g50C342xb6hynrCiYpAqItzB/Os4NPgQ8tF1UZXTxrwrjg0ehBxgwq7G10z4Q==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE0GO7YbVGr69XMKvs674GRZRG53BSsnO6DJpRQ33QvLAiEAwjLgAAiVInA+GKX6F1bE8F2INxYD02aFGiqLFH5pcmc="}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.5.1":{"name":"tape","version":"2.5.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.2.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.5.1","dist":{"shasum":"fa57df93af176866d5f09078b85cd3a898e3f687","tarball":"https://registry.npmjs.org/tape/-/tape-2.5.1.tgz","integrity":"sha512-HAuRzk6PBZHUsCUHm2z4JqeKeFVGVA8yG+IGDWDiRHX6aosJn+4juhopNikLpyqshUkwaIbMlPhwifaeIgKyaA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDo7AVnipmH+2OnSpQjYlemOYepxaYbmxaCfjEKtzxX1AIhAM/BTnyJGL9nvlloPBLhSvptDfg04jTryTG5B00JkVSN"}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.6.1":{"name":"tape","version":"2.6.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.2.0","defined":"~0.0.0","through":"~2.3.4","resumer":"~0.0.0","inherits":"~2.0.1"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.6.1","dist":{"shasum":"3fa98d92231c41401fdd290f1fb5663264c32af1","tarball":"https://registry.npmjs.org/tape/-/tape-2.6.1.tgz","integrity":"sha512-5OM+4sfw+3CFkjifFSmDG6l8mt948zmlOLsjbOPPiRD1LQMtC5LQ2lPCpEUzcVtnD6H4NY2tdRVKf9T0hneqIA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQChH9gLo4oDtqdIsCKVNXqQ0wbnqULrRJA9xT85tjay+gIhAJaTNwKpLlQpJ4jUM2GnuUqa79NpXxfQyBNhatmwnDUq"}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.7.3":{"name":"tape","version":"2.7.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat-stream":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.7.3","dist":{"shasum":"29d5127bef1b2bee2f4d66e7c438eb812f95d86a","tarball":"https://registry.npmjs.org/tape/-/tape-2.7.3.tgz","integrity":"sha512-jtzY4vGW2qqS3dZA0kLKRytB+I+QCq0Q5NEchkwmfOiSFMvn3V4N2in2KFtgoSOoM3SPpSxXDJLbxGtZM264Ow==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHH9UVlVE49Yn95fXFVePwv3qZYat7o0pKd7hgvIl5gLAiB/naN7dFgd4MBPewUMdUCWzh4VvQQxrACkzQLDkeiU2w=="}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.8.1":{"name":"tape","version":"2.8.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat-stream":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.8.1","dist":{"shasum":"a656b084b15412c803cb34c09ae05c7abb2ed40f","tarball":"https://registry.npmjs.org/tape/-/tape-2.8.1.tgz","integrity":"sha512-HvKDoQsgIkS2tDfstuQ1V35el8uwGbieNmK+oJSYlnRJE2YxImwtn17HWaD9xzUSb4+/DPsQLW26TMGBATNjDA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCRVVHt0F5axteIBhg+iDdyfjv0SZpPB/+bZRS3t4knTgIhAJZxvLAdtv/WQa9U5XOOHdKzdvdd0RPny9F+n0tMpiH9"}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.9.1":{"name":"tape","version":"2.9.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","concat-stream":"~1.4.1","falafel":"~0.1.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.9.1","dist":{"shasum":"076c66bf14a6f7160222fd69ece201397b291787","tarball":"https://registry.npmjs.org/tape/-/tape-2.9.1.tgz","integrity":"sha512-Ba8UcYZRXoS99ndnXJ9CcjKgQLezzoiOrLY+KT7zEu5CpDLNH9GdkVbbko2l8YYVIT3u5nAoAE3WKU2FcHlxBw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC/zwHky/YBpjVRLX+K1upplIpdnr/gS2WJcndqM26BJQIhAM6r2CJlQcw2PgxkDwq09HGQMU3/niM9vBgoEyB+Z03b"}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.10.3":{"name":"tape","version":"2.10.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.3.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.10.3","dist":{"shasum":"1d866f42d46f211baae28c290d30d4e9570c7938","tarball":"https://registry.npmjs.org/tape/-/tape-2.10.3.tgz","integrity":"sha512-enqN0esJZM2i6ybaUMecEJzuBVBzToyJAp/ZrmiCdMZIruMonBzlx1TylYJ6wBlZZzLprtud091uGAO28H32bQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCa3PSCx30nbxMPVRDSmf4UrvKOyAsqaAEYxMry56bI3AIgHi+6/38qoJd0EaZTF9AcXO9PexniF6EqVRjsNODd4wU="}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.11.1":{"name":"tape","version":"2.11.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.11.1","dist":{"shasum":"824b56a56d0e2b21768c8188f59bc2b67422ae6f","tarball":"https://registry.npmjs.org/tape/-/tape-2.11.1.tgz","integrity":"sha512-i1PJP24Sokm0tHi1cUi7Cavn7O6kN4onZcSuhD+Wer5X/0fsX49XJlW98XI4YatLuVdVC0cCnyFtigWUPwXQ0w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICCP24bwHjEulpHfVJ7G0bdGnS7ZQYjxNBxsxJjyNFQMAiEA/yeH7z+EfRxs/ndwekEaStiDzkGy04CusKiGmozjEuA="}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.12.2":{"name":"tape","version":"2.12.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.12.2","dist":{"shasum":"84a32e7237ac7728e275ddb48582f1a609f6816e","tarball":"https://registry.npmjs.org/tape/-/tape-2.12.2.tgz","integrity":"sha512-W/3GCEpgejTRNnVfuWVtVuFFszUpTMbrYMd8E4/i4U00L7XocIYVBkTJpvbOlF0+9sKeHS+JuIgj1AIQn9WIDg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDCPZtQt9zaWxGAiqOxudjyWob1nsw0LfoHEaKKWS3DiQIgQMwCSGfkT0zixyxLFNQ3WA6mBTiTQUvf5Y6lyo0bVxQ="}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.12.3":{"name":"tape","version":"2.12.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.12.3","dist":{"shasum":"5559d5454050292627537c012991ec6971f66156","tarball":"https://registry.npmjs.org/tape/-/tape-2.12.3.tgz","integrity":"sha512-3hyLmN9qK0oOmihU/hBtPJnlSfOCdHnTq7OBx/RbAL48CfvXGZF5vMPX+b2lats4SlIyLGrBqBAF9kEMHr8rOw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDrD7Jvc4Pu60waNdUEKBqtMmqU582xIEfDUSsdxORCLgIhAMd+cqZ0d+75B6/oNe6oR2Bu3jXzdi0SIZNGsbfRRo+e"}]},"_from":".","_npmVersion":"1.4.6","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.13.0":{"name":"tape","version":"2.13.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.13.0","dist":{"shasum":"7cbf82f795ffcc7aa972e8a5d12fed154c4902a8","tarball":"https://registry.npmjs.org/tape/-/tape-2.13.0.tgz","integrity":"sha512-MMz20ox+jI2hxDebzn4PwTBDGjEphjMp1Ge4wXiENOQn49hOyRUwiIt0EjM56KC4oaNUrPYH6Cx3g8DAqndfog==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDfgwZpaMvpGrO3dpyefpmxnS47Dc9h7uhD31Kf1xWsIgIgRw+ZLVV0AD5EtydF7nr9m9MhJVDwAXqqekSvJeukey8="}]},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.13.1":{"name":"tape","version":"2.13.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.13.1","dist":{"shasum":"8e5d199f44e90b20c56ec2a746a026b0ebb617e4","tarball":"https://registry.npmjs.org/tape/-/tape-2.13.1.tgz","integrity":"sha512-OpnLWhUANDLbeAWgfnNHEEFUCd9zgvVmmTfIC+qLKqmG3WZjfhKH9nLd2Bz7JghfsszzAz6OeODEo/lw0SxlDg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHW6Kq0mXBVVF9Z4V2AVj3s5OR4X2AzmC0TyqriKFvtiAiEApARgJF2N51WFA9kUm2qsxhQxWAL+EEzA6xdVkYxK0xk="}]},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.13.2":{"name":"tape","version":"2.13.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.13.2","dist":{"shasum":"fdcb5da9bbbd3047b056b33c7aadf6d39f43f6d0","tarball":"https://registry.npmjs.org/tape/-/tape-2.13.2.tgz","integrity":"sha512-bjIlN1WRexY4YW1DnOVzKVuSyphPa4k6tqvpcY45TB0yVRkuTJD39krqtm3hYdtjroY4I12ggHBi74756AVWEA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCkGZjm0V6iA2sLvQcsuw5JsbYHUTvfjL7ZHWK4RuPgKQIhAPRwMQb3WCB+bULx4NI1weELTH9u92czoBYoZ84gDcHM"}]},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.13.3":{"name":"tape","version":"2.13.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.13.3","dist":{"shasum":"2f861715e102b8bb427d22a5f079acd67a036028","tarball":"https://registry.npmjs.org/tape/-/tape-2.13.3.tgz","integrity":"sha512-QNx0HsYx6HsP829X4wmk4A6LNeTSrnVIyvqlTFjodiYJmp0j4EYpjOLWe/Jvg6gKlnlzdjSAESURiEbWQ7vHxQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGPR+ZtROXRxA4l44pIr4zz1LRo6hzIWoaWRKwM42KwrAiEA8Jufh8nclr9nMEEy1BlkAfE2vt6Itx+XeWgHiWjWnH4="}]},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}]},"2.13.4":{"name":"tape","version":"2.13.4","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"17894caf61fbaa908bfc625a1119c16ab316afb6","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.13.4","_shasum":"5a4d272a029eab4a9926bf4a6d606a77343ec490","_from":".","_npmVersion":"1.4.15","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"dist":{"shasum":"5a4d272a029eab4a9926bf4a6d606a77343ec490","tarball":"https://registry.npmjs.org/tape/-/tape-2.13.4.tgz","integrity":"sha512-7I+myVyVu5rqcAlzXcV7VBAh8rUJwGvplfDXjQKIiJEXM7jklQ28Haia3davTFxswtUz9XXpf92sq+yT0XJ3RQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFXdJUd8ljsoKMNDJmcKiA+00SrvW8i9wxWPHlwg/m6YAiEAloxEAvc48SiahJGfn4gEDr9USbwzayswKSQbeY+gyDs="}]}},"2.14.0":{"name":"tape","version":"2.14.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"^3.2.9","inherits":"^2.0.1","object-inspect":"^1.0.0","resumer":"~0.0.0","through":"^2.3.4","has":"~0.0.1"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"aa5bd84bd656f270fc59e343b797ea63b4b08390","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.14.0","_shasum":"c460a6f53674cbc17c73480203b0d8f357696b6a","_from":".","_npmVersion":"1.4.21","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"dist":{"shasum":"c460a6f53674cbc17c73480203b0d8f357696b6a","tarball":"https://registry.npmjs.org/tape/-/tape-2.14.0.tgz","integrity":"sha512-LDmOWbmTbNfbQXXkvRPAUit/BGdTPpDRnyOoW8tKwkmD1/HJqLRA41bbwQRhfLDr8h4hFm4KZwkQsOsMnxRJmw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA6GHOMfW2BHi6vEBwd61rUUXRienanaELZ7LhaKL+nCAiEAsjRMlRSeMAS5Bj/MsuS8QnqnxwZbbUEMSkoQEXLizNc="}]}},"3.0.0":{"name":"tape","version":"3.0.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"82e8b74de899354eb626e99392cfdb895d2db9ea","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.0.0","_shasum":"4264bb8c78385ebc73a910ea04d79f38deaae7e4","_from":".","_npmVersion":"1.4.25","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"dist":{"shasum":"4264bb8c78385ebc73a910ea04d79f38deaae7e4","tarball":"https://registry.npmjs.org/tape/-/tape-3.0.0.tgz","integrity":"sha512-YvZxHFRaA34xpiz9Hbm5kr56iiOP3OfnfYndDr7xUXX64b/qdvbXp7vWdn009wxjdp3xMx72estwl3ePznQibg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIA6rT7JacU9TtYdMCDnwDiNzaDQsKEcG+iSn758EBTh/AiB2N/7aL7tPFHB97cZ/Mx8eSj8JZTbeW6Ai9fii1potCQ=="}]}},"3.0.1":{"name":"tape","version":"3.0.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"51afa0b0ea5135c76c6fa9f6bbde36b7a9872e77","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.0.1","_shasum":"436813f6861f355907ad6c0ae5ce6799bbf29a9c","_from":".","_npmVersion":"2.1.3","_nodeVersion":"0.10.31","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"dist":{"shasum":"436813f6861f355907ad6c0ae5ce6799bbf29a9c","tarball":"https://registry.npmjs.org/tape/-/tape-3.0.1.tgz","integrity":"sha512-LG49yuMR3k8COEfWFPuWfTjCQb4/lkNoyWtbSv2L7d80FgLQOpZvKjtfQhoh9rJJEtxL+bGuXWCmZs3NvKGCIQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDV3jZGobChCIgdolRZBOkV0+T2saVNw98gQIPcNytC7AIhAI5nM5gyYzpUKTiVsxmrQzexYSepy5w05twmfCBX3EXH"}]}},"3.0.2":{"name":"tape","version":"3.0.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"249f96135aee110cdba93a8596543d5c12551d96","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.0.2","_shasum":"2bd96f22d7baf4b32295db39c097ac2391bf158f","_from":".","_npmVersion":"2.1.3","_nodeVersion":"0.10.31","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"dist":{"shasum":"2bd96f22d7baf4b32295db39c097ac2391bf158f","tarball":"https://registry.npmjs.org/tape/-/tape-3.0.2.tgz","integrity":"sha512-QBR6EW5ryVqLN/ruKZs+qxQllT+2BXst/+f7CbbV/RoXMfzZKP/n7BJjoIfgXxigCH28h+rrZaXrYeXvD4KI/g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDDbi2IRJ5E/pt+snZANkxNVpf7ZB4wrQuoWPSCghtceAiEA60eluav/pomgJlAVe/VXwXbSenwo5VElnPsjSae6p8Y="}]}},"3.0.3":{"name":"tape","version":"3.0.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"fbb5966f9f3a3478429b4c2d33dabb51c84ce16f","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.0.3","_shasum":"dc4d28a8f3c11e546b019880ce03e78d5093b554","_from":".","_npmVersion":"2.1.3","_nodeVersion":"0.10.31","_npmUser":{"name":"substack","email":"mail@substack.net"},"maintainers":[{"name":"substack","email":"mail@substack.net"}],"dist":{"shasum":"dc4d28a8f3c11e546b019880ce03e78d5093b554","tarball":"https://registry.npmjs.org/tape/-/tape-3.0.3.tgz","integrity":"sha512-VW7PJUdIYmVRLjCgAT6LqzETXPnHGUPUkdag6jyLd51rlS4lMxIF4QjIHojqp7mqNAkDAi3V389aYlexdSigRQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCqsVnvxeI/LSqQRyPXOax+A8xk+ZAc1XAgNlYEgHNG+wIhAK+Ty3VUWcyS3dgfKs2Gt9AiNqbG/pbALfrFVQuUsTNS"}]}},"3.1.0":{"name":"tape","version":"3.1.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"c6d6e1b42d938e7c1a9deb43fd994c09e9210026","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.1.0","_shasum":"5734731187eabd21e9ae1bbb599bc1dcfa9dcb1c","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"substack","email":"mail@substack.net"},{"name":"raynos","email":"raynos2@gmail.com"}],"dist":{"shasum":"5734731187eabd21e9ae1bbb599bc1dcfa9dcb1c","tarball":"https://registry.npmjs.org/tape/-/tape-3.1.0.tgz","integrity":"sha512-GJkSGPmRth8pRde5tkBV5ej8eyUSLrolz22Aop/lPwcnoLqxQGrddPFl6O2YeWiy89vrzmdnw4ETOvD7KVw24g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFIXl1iyLdGebA1H7aLJghz8k+OQgnj0gfEmNMi0bayyAiEA4voEq6t3BneWq5gnPvB8ryFnLJZOSQTB9i8eh7VfOOg="}]}},"3.2.0":{"name":"tape","version":"3.2.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"811cf0abc32b5bf5fef1a5c14f91fa14b3b0b7cd","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.2.0","_shasum":"5d9d6c7332062af72e242733dda40eaba3d2ef8e","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"substack","email":"mail@substack.net"},{"name":"raynos","email":"raynos2@gmail.com"}],"dist":{"shasum":"5d9d6c7332062af72e242733dda40eaba3d2ef8e","tarball":"https://registry.npmjs.org/tape/-/tape-3.2.0.tgz","integrity":"sha512-FyPaFgVJsNfbqv5lDXZeeURjxdw83OycWqu5KisG8Ea/KrBod72G0CBxMyl8ahi6Es+VjGOGlxGXdhbtZSFPzw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGyrNSh79QGSnNcrVLZh0SUUDPGvxYOy6n3pQZdNkQnpAiBCsD4wzINCDPRuiAOnkYu9rDDNgCa4G2JGnPNqivwv4g=="}]}},"3.3.0":{"name":"tape","version":"3.3.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"d2afc96ac95a6cf62c94a58739a859aa691fbaa1","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.3.0","_shasum":"c65fda202350e09eea416fc5c85ab95be8292363","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"substack","email":"mail@substack.net"},{"name":"raynos","email":"raynos2@gmail.com"}],"dist":{"shasum":"c65fda202350e09eea416fc5c85ab95be8292363","tarball":"https://registry.npmjs.org/tape/-/tape-3.3.0.tgz","integrity":"sha512-oGPjEb1qMl49VvqWD/Cl+1ProQxWjM14bp3W3dbCOSrdSy0CPjzwVe51WiPzMgTpDBDXO4cSoMnA5I3Zn0/c0g==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICmgV84psy6FaOc6II3ntj3qJPFMiZwqyAXGcisrNOUuAiEAmm8v1sKB4ldqdMnfqs8vV55CyJV/f0rMBRnpNvKYP54="}]}},"3.4.0":{"name":"tape","version":"3.4.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"d1e043a9a0cc069a97ee46ed9929934bc4c9a823","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.4.0","_shasum":"764bb2c54cab364fdc97d38064929fdd7edc8c12","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"substack","email":"mail@substack.net"},{"name":"raynos","email":"raynos2@gmail.com"}],"dist":{"shasum":"764bb2c54cab364fdc97d38064929fdd7edc8c12","tarball":"https://registry.npmjs.org/tape/-/tape-3.4.0.tgz","integrity":"sha512-9VgbEjwipanx9yOV4Gusx82Pz38qsN1rucAZ7Dp7NfH6bYixzwflPhrDBKEo9ZWuExMVcp56qEaJSVOOysgqQw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBBLM7k3xDXsaFsLVocfC+Bc6gswDq8Tlm5OjlTtQjTQAiEAg2iKHVRR3REvPMnwYIiethce2x9lblBxFQYJdFSJNao="}]}},"3.5.0":{"name":"tape","version":"3.5.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"51f2f97d7eade23b1e23b7cfea37f449ade5b9c3","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.5.0","_shasum":"aebb061388104ad0cb407be842782049d64624f8","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"substack","email":"mail@substack.net"},{"name":"raynos","email":"raynos2@gmail.com"}],"dist":{"shasum":"aebb061388104ad0cb407be842782049d64624f8","tarball":"https://registry.npmjs.org/tape/-/tape-3.5.0.tgz","integrity":"sha512-bOarPFtIIJk4dlw4WqDBk1U7pQJwfG+qiN3Q4MHqHbatkXM60DafHxsWsSqvMb1UoeBbH+uGsUFNfr14Zksogw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEOcZF/6WJdsZERACzDQHEAv9Yg6dikH2mjbrTMM2IaUAiEA0j81ikIqrxSbMtDfX+Aj5CynXRHXjFAQOV0JZyLOdDI="}]}},"4.0.0":{"name":"tape","version":"4.0.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~0.0.0","glob":"~5.0.3","inherits":"~2.0.1","object-inspect":"~1.0.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.7.1","falafel":"~1.0.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"99f32f5e382f50ae2d9f9a5ddf469f23cc00dd93","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.0.0","_shasum":"e7a5de356baa65691ab1abacd803f7370204e553","_from":".","_npmVersion":"2.6.1","_nodeVersion":"1.4.3","_npmUser":{"name":"domenic","email":"domenic@domenicdenicola.com"},"maintainers":[{"name":"substack","email":"mail@substack.net"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"}],"dist":{"shasum":"e7a5de356baa65691ab1abacd803f7370204e553","tarball":"https://registry.npmjs.org/tape/-/tape-4.0.0.tgz","integrity":"sha512-kWXHhd2CuxTzwR5h4xpKGSqSiG+0hk1eVoUkxRjWVIw+ygxw38Ox9k0KDOkGmY2ZSNn1aVMqDTGqHGOgHxYuxg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCgCLRU+Jh3d+pSP/KfxOEryHLrW6SGRBiwIzV1P42JEQIhAPy5rxLtOqug/ScLWSrcEodcNnRlPNQsvVDDqpbQxDUb"}]}},"4.0.1":{"name":"tape","version":"4.0.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~0.0.0","glob":"~5.0.3","inherits":"~2.0.1","object-inspect":"~1.0.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.7.1","falafel":"~1.0.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"74635e759f43f3976f0e469ae28be82a3f7fb111","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.0.1","_shasum":"b7c8e48c496348ebe66b5f5c3ba3e62601bdb5a9","_from":".","_npmVersion":"3.1.2","_nodeVersion":"2.0.0","_npmUser":{"name":"substack","email":"substack@gmail.com"},"dist":{"shasum":"b7c8e48c496348ebe66b5f5c3ba3e62601bdb5a9","tarball":"https://registry.npmjs.org/tape/-/tape-4.0.1.tgz","integrity":"sha512-P7lj3DcEHeI+R1DZz+a6Ge9pNUDLq1xYPIUG06xM5N7ITt0yDdWhFkXjBQZpgMuPzwMktEoJ9UwCGE+9DqdWgw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDfyTF5iPYhiKJD1CpRr2VQLlPGM+O5MOUpv9clL8h0/AiEAl4hnacDbPD+GWth4YXBEROwzDqw89pX+Y20GH36FrI4="}]},"maintainers":[{"name":"substack","email":"mail@substack.net"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"}]},"4.0.2":{"name":"tape","version":"4.0.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~0.0.0","glob":"~5.0.3","inherits":"~2.0.1","object-inspect":"~1.0.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.7.1","falafel":"~1.0.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"670e5f7837f005d3be2d8997798e768da27ce3d8","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.0.2","_shasum":"7e484577d7fb2ec97365b934ad57601cc623c3f1","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.10.32","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"dist":{"shasum":"7e484577d7fb2ec97365b934ad57601cc623c3f1","tarball":"https://registry.npmjs.org/tape/-/tape-4.0.2.tgz","integrity":"sha512-Kn4ZNzdWeBZ+pXr6jCobuZr6AYyjio5Um0b2GuDmq81T6LC5KxwqBYK2V8fr904SreaKlMgt73YgIEOhqv3WEw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCu0AtFjyIk0RNECNtV2pK51CB5IVsTDtdpKLIBJO9SPQIgH+zEtrbLCohsEFRbYB3wqVzkFYfm66kgfIqKtntAQmA="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}]},"4.0.3":{"name":"tape","version":"4.0.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~0.0.0","glob":"~5.0.3","inherits":"~2.0.1","object-inspect":"~1.0.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.7.1","falafel":"~1.0.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"38a8a9de02c5bad422ed518d36c340e25c44f489","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.0.3","_shasum":"c7f2905d51c54702324252ae6c8302443a3cb2b1","_from":".","_npmVersion":"2.13.3","_nodeVersion":"3.0.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"c7f2905d51c54702324252ae6c8302443a3cb2b1","tarball":"https://registry.npmjs.org/tape/-/tape-4.0.3.tgz","integrity":"sha512-Aet+h8l4d3j/Ff9HNNUKPFXD0XAUsKyezumN64iBRPtZF1uh2NxKZYNXag8DXwt8UhdQN1AJ24+Cdqb0QL4zrQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDkwIEM2sNFLEiV91V3FOGAUBcnc+ZlFHcNe8lI8ahN6AiAFnXYLyHeQr7M6vM84vNBcOvKeaEVnGiAd32s06sj0Fg=="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}]},"4.1.0":{"name":"tape","version":"4.1.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~0.0.0","glob":"~5.0.3","inherits":"~2.0.1","object-inspect":"~1.0.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"concat-stream":"~1.4.1","falafel":"~1.0.1","js-yaml":"^3.3.1","tap":"~0.7.1","tap-parser":"^1.1.6"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"e416a8e2ca479c973e43f4186dddb8817fcc88d9","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.1.0","_shasum":"d4c8dee36180b2680a2da3cc09236fae71249126","_from":".","_npmVersion":"2.11.3","_nodeVersion":"0.10.32","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"dist":{"shasum":"d4c8dee36180b2680a2da3cc09236fae71249126","tarball":"https://registry.npmjs.org/tape/-/tape-4.1.0.tgz","integrity":"sha512-74YErIyj1KwRSjLAJtKOeDIcqETJ0RsaGLn5juFK5imfnar8BYAVMX+QEkBu7E2usu2PXklg6uD8n1LuBe06KQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDXdpJcbilblG3mT7l1UtTQG6cmo0I7SvTTjqLbZV5xSQIhAJpYUxE0aBYoITvCeD7yj46eteRuoGwKN4q77ZaHLd/g"}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}]},"4.2.0":{"name":"tape","version":"4.2.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~0.0.0","function-bind":"~1.0.2","glob":"~5.0.3","has":"~1.0.1","inherits":"~2.0.1","object-inspect":"~1.0.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"concat-stream":"~1.4.1","falafel":"~1.0.1","js-yaml":"^3.3.1","tap":"~0.7.1","tap-parser":"^1.1.6"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"aadcf4a95ed6810fa404dbe01f3b745252d4f12e","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.2.0","_shasum":"ae504489d53a9f9d12d93540649df371ea5f878d","_from":".","_npmVersion":"3.2.2","_nodeVersion":"2.4.0","_npmUser":{"name":"substack","email":"substack@gmail.com"},"dist":{"shasum":"ae504489d53a9f9d12d93540649df371ea5f878d","tarball":"https://registry.npmjs.org/tape/-/tape-4.2.0.tgz","integrity":"sha512-MXPF8lBheARBepgJeaHNP3AVuuk7Zc1nwjNuRKHFLIjRbpp1OHZn6VOvjIkl/+HUCOcwZIc3USL/2GKxa7iaBw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGGOgNLG0qUoNDochbA5Zrz6MQ64qLS/gy1C9j9SANv8AiEAwrL6v3/sauMoI7s88GlUAHz/O76m1sVOJR1uNa6e7tg="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}]},"4.2.1":{"name":"tape","version":"4.2.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~1.0.0","function-bind":"~1.0.2","glob":"~5.0.3","has":"~1.0.1","inherits":"~2.0.1","object-inspect":"~1.0.0","resumer":"~0.0.0","string.prototype.trim":"^1.1.1","through":"~2.3.4"},"devDependencies":{"concat-stream":"~1.4.1","falafel":"~1.0.1","js-yaml":"^3.3.1","tap":"~0.7.1","tap-parser":"^1.1.6"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"0dc93136f0e6e1ae83a9cb5e1117b72028fd9d47","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.2.1","_shasum":"1a0ed63cc86bfaa84ebb3bb311f09d8520416216","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"1a0ed63cc86bfaa84ebb3bb311f09d8520416216","tarball":"https://registry.npmjs.org/tape/-/tape-4.2.1.tgz","integrity":"sha512-G0fMUpjGt1TtRXXhkJNBuGRbjxLjAbK7u4nRr/vvjWsNoeHjM2jaK6VIhia4EuyfDDGzJETzYO/YKI3rBpu9Ug==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDw7V5e13KcuPSCx0IA0862FIL5lcaQN7723xm/SAY+UwIgYgXkr7kT3ZSn5ppJslZKwFiwb75kgQ+0leYepiH15lc="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}]},"4.2.2":{"name":"tape","version":"4.2.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~1.0.0","function-bind":"~1.0.2","glob":"~5.0.3","has":"~1.0.1","inherits":"~2.0.1","object-inspect":"~1.0.0","resumer":"~0.0.0","string.prototype.trim":"^1.1.1","through":"~2.3.4"},"devDependencies":{"concat-stream":"~1.4.1","falafel":"~1.0.1","js-yaml":"^3.3.1","tap":"~0.7.1","tap-parser":"^1.1.6"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"7aac086eaf0c85ad14d91c4e6e28b9c9bb6f4d3c","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.2.2","_shasum":"22289ead4e27a60e4d5d22517f1c78341a190737","_from":".","_npmVersion":"2.14.1","_nodeVersion":"0.10.32","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"dist":{"shasum":"22289ead4e27a60e4d5d22517f1c78341a190737","tarball":"https://registry.npmjs.org/tape/-/tape-4.2.2.tgz","integrity":"sha512-0TqPA1cIQ2z6nSyqjgIdAuw6l9fEPXxA/z4xygtiQzTlWd+fupEKhtUYqKZoTewDo+ai3zNHXkTiQaMR5T6KNw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEOyjhhZi7js4OWqCp82IW91ZmwIBGXtVqFjqJgqNKOmAiEA0Zb4BoU4uWdQJQs60IZxFZPUsaYzMwYJG/UEmms5QoE="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}]},"4.3.0":{"name":"tape","version":"4.3.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~1.0.0","function-bind":"~1.0.2","glob":"~5.0.3","has":"~1.0.1","inherits":"~2.0.1","minimist":"~1.2.0","object-inspect":"~1.0.0","resolve":"~1.1.6","resumer":"~0.0.0","string.prototype.trim":"^1.1.1","through":"~2.3.4"},"devDependencies":{"concat-stream":"~1.4.1","falafel":"~1.0.1","js-yaml":"^3.3.1","tap":"~0.7.1","tap-parser":"^1.1.6"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"e00e9463b54ecc8ef25460af3c36f436a6a85cbc","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.3.0","_shasum":"f1efed49e7f885f3cf9d8ba5206ab039d2da0434","_from":".","_npmVersion":"2.14.6","_nodeVersion":"0.10.32","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"dist":{"shasum":"f1efed49e7f885f3cf9d8ba5206ab039d2da0434","tarball":"https://registry.npmjs.org/tape/-/tape-4.3.0.tgz","integrity":"sha512-W69Qw72Na+bfBN+ZNbfKdPfz3sLe0ETDbVjjeoeWOHCSlLRxeMlmil7Kp80U9J9WQBAmfDBeDdGJMIdAsqb+lQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICzcfZEOcPh6gBSu/7Qj65fq1s7Uj7gyi5gzRFAWxCLiAiEA57NRLXgmSfkkq/Vi3JaFq6pLfvUiwRIfDr58CCDJyME="}]}},"4.4.0":{"name":"tape","version":"4.4.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.0","defined":"~1.0.0","function-bind":"~1.0.2","glob":"~5.0.3","has":"~1.0.1","inherits":"~2.0.1","minimist":"~1.2.0","object-inspect":"~1.0.0","resolve":"~1.1.6","resumer":"~0.0.0","string.prototype.trim":"^1.1.1","through":"~2.3.4"},"devDependencies":{"concat-stream":"~1.4.1","falafel":"~1.0.1","js-yaml":"^3.3.1","tap":"~0.7.1","tap-parser":"^1.1.6"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"1b61c0bc0d5bdb8cea32b0064e3d8b701bbfab22","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.4.0","_shasum":"d561b351454963140625283933e12e60a177f73f","_from":".","_npmVersion":"2.14.6","_nodeVersion":"0.10.32","_npmUser":{"name":"raynos","email":"raynos2@gmail.com"},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"dist":{"shasum":"d561b351454963140625283933e12e60a177f73f","tarball":"https://registry.npmjs.org/tape/-/tape-4.4.0.tgz","integrity":"sha512-s1RRV/8mIkS59BtGsYs4lgcpGhrzHwQCbGjVd22Czf4pT6LlBzmYKxf3Vs4rtQpRng5eKfcVzp7bV7cObMkVPg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICsOzxVlO/nBlu85oAzk1hqc6v93v4nPggDS94NZuIAJAiA4umBwzt6QUEl6Vg3SngqgTOZ9mdW+LWUmofcp3pP1Dg=="}]}},"4.5.0":{"name":"tape","version":"4.5.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","function-bind":"~1.1.0","glob":"~7.0.0","has":"~1.0.1","inherits":"~2.0.1","minimist":"~1.2.0","object-inspect":"~1.1.0","resolve":"~1.1.7","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.5.1","falafel":"~1.2.0","js-yaml":"~3.5.3","tap":"~0.7.1","tap-parser":"~1.2.2"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"3227068bdf49a7d4a42e3e151e009d17c83d90aa","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.5.0","_shasum":"e750f7e016168f81995f11c040ca8ab10741f823","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.7.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"e750f7e016168f81995f11c040ca8ab10741f823","tarball":"https://registry.npmjs.org/tape/-/tape-4.5.0.tgz","integrity":"sha512-k384wAo2pfPHvnm4ue04nhBRobjsLbzIfnEIC4hQ52rfPUlknMyv4wlzewUIfB7IxmND06hhB1Ihxy05tO/7AQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDk5mnhBGHJJMueWB+eymlJytFkaz09Me4W+SQLMLxUKAIgJGp5HWAU3Fq8shUtj54roMU3WRSN31p0XQxrV9xnf+0="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/tape-4.5.0.tgz_1456964433286_0.6801530448719859"}},"1.1.2":{"name":"tape","version":"1.1.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"jsonify":"~0.0.0","deep-equal":"~0.0.0","defined":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.3.0","falafel":"~0.1.4","concat-stream":"~1.5.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"fd807f521487c2c9312629de4f5874363d4cf00b","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@1.1.2","_shasum":"2e645c5f0b98abfc3d61d91128152bad488b163d","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.7.1","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"2e645c5f0b98abfc3d61d91128152bad488b163d","tarball":"https://registry.npmjs.org/tape/-/tape-1.1.2.tgz","integrity":"sha512-EwM9Tn/Q5nmiyGcwPPIJPJafYhmUdb0unHk7O5YmA9SSoYTWeTQYp4WjWlA0f7o3d28jJGUDQtnSBTFeP9pgvw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCLx6bCkMeD+HwN83V339uTtJoTwBa8cXTon9ccV1tfNgIhALXqinXPJxdlCXl2aPglo7PIh8n7oE66UjoxAAx7pfSz"}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-13-west.internal.npmjs.com","tmp":"tmp/tape-1.1.2.tgz_1457304363479_0.6420324619393796"}},"2.14.1":{"name":"tape","version":"2.14.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"^3.2.9","inherits":"^2.0.1","object-inspect":"^1.0.0","resumer":"~0.0.0","through":"^2.3.4","has":"~0.0.1"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"eddbff5a45b15ccea43cb221e32dbf52ce0cdbf1","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@2.14.1","_shasum":"8f6eb2dd03b750aa056a8de01a5445e59f7c9cce","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.7.1","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"8f6eb2dd03b750aa056a8de01a5445e59f7c9cce","tarball":"https://registry.npmjs.org/tape/-/tape-2.14.1.tgz","integrity":"sha512-kh37Wjs0ZkZY3Pd73v67GDjOhPFvnu7lHiqAgFfkblD96M4HqrI8ldk4/Q+3h+eKKNvLhZ3kk7ppO+AmYJNthQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCGyiw1fKl5WMep6XInzulOx0mgBWdgFgNmzQB43Gu8AQIgEdreQ6rRW3JKF4fhoSKRdEHM41flgkq43CEtQW9jLDc="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/tape-2.14.1.tgz_1457304379733_0.19303119485266507"}},"3.6.1":{"name":"tape","version":"3.6.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"d0a675ff4970179745e5d528b354f846e67c63ab","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.6.1","_shasum":"4893dd53e280a5f58c0ceb30c2c0ebb3bcd51e1f","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.7.1","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"4893dd53e280a5f58c0ceb30c2c0ebb3bcd51e1f","tarball":"https://registry.npmjs.org/tape/-/tape-3.6.1.tgz","integrity":"sha512-Qy+shSMwr+bg5NwJhrdCKNOS7BEoo/SEjE+dF4a2OYR73f6ocH5ioLIHE6TuttjONmR3HYlOXwSqFTxUDFJtGg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB8wKfp5Zoolr3PYtgL7zUSuO7jyWj13Q8z/AySGlAbXAiBDyH9uloUZUuUgNSGzuSRWq934z5Hq6YwfwjJw9Ixp2w=="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/tape-3.6.1.tgz_1457304393118_0.5343996067531407"}},"3.6.0":{"name":"tape","version":"3.6.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~0.2.0","defined":"~0.0.0","glob":"~3.2.9","inherits":"~2.0.1","object-inspect":"~0.4.0","resumer":"~0.0.0","through":"~2.3.4"},"devDependencies":{"tap":"~0.4.8","falafel":"~0.3.1","concat-stream":"~1.4.1"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"91cb127a13979c849142b62494c6395b53ea0641","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@3.6.0","_shasum":"b1fca294ef0d863d4d086dc5b572f34a1a2e0e56","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.7.1","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"b1fca294ef0d863d4d086dc5b572f34a1a2e0e56","tarball":"https://registry.npmjs.org/tape/-/tape-3.6.0.tgz","integrity":"sha512-fH/Ew4bsi4wdcfBk3k0Hd8nJFZ8HZo5NLrKGpKSfxIBb1qHtCBNFdPRDkjuiysu0soBE31RdGu5NcR88C29FKA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB5O1ZUYZEUJjodBjXfKBqhSpWxnBlXbsr12MxPX4V+1AiBg32hv4YOjDsygYQecfqJ/hTrQI/3wmXYqHUSscrJPjA=="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/tape-3.6.0.tgz_1457304463588_0.4138913000933826"}},"4.5.1":{"name":"tape","version":"4.5.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","function-bind":"~1.1.0","glob":"~7.0.0","has":"~1.0.1","inherits":"~2.0.1","minimist":"~1.2.0","object-inspect":"~1.1.0","resolve":"~1.1.7","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.5.1","falafel":"~1.2.0","js-yaml":"~3.5.3","tap":"~0.7.1","tap-parser":"~1.2.2"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"ed40dc8d890ada1a529370d706a03e1e87cc1f19","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.5.1","_shasum":"2bb3ea19bdc9f5225217b3f97cbf7986cc4c6e8c","_from":".","_npmVersion":"3.6.0","_nodeVersion":"5.7.1","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"2bb3ea19bdc9f5225217b3f97cbf7986cc4c6e8c","tarball":"https://registry.npmjs.org/tape/-/tape-4.5.1.tgz","integrity":"sha512-ZVqA9h11OKhW149tzvG8Hox7E+j0nARTgO+pBTM2eqBb8CrTST5lkRjMd3xFmHa7YGGuDpK97+5Y0y8ggjFHoA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD0flYZ8QSPUJchILdVvSLnfeFEAEoAbvcfpA282VX7BQIgCGQRweKwShJ+FrFHhWQJWzrFackUbIQjyrJ3idZ6qVI="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/tape-4.5.1.tgz_1457304483974_0.9612459517084062"}},"4.6.0":{"name":"tape","version":"4.6.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","function-bind":"~1.1.0","glob":"~7.0.4","has":"~1.0.1","inherits":"~2.0.1","minimist":"~1.2.0","object-inspect":"~1.2.1","resolve":"~1.1.7","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.5.1","falafel":"~1.2.0","js-yaml":"~3.6.1","tap":"~0.7.1","tap-parser":"~1.2.2"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"3c41af57070f9a6cedfb62e2a6d543b0b15e69ba","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.6.0","_shasum":"0188641150e4fa28ba791114190733f47e3743bf","_from":".","_npmVersion":"3.9.3","_nodeVersion":"6.2.1","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"0188641150e4fa28ba791114190733f47e3743bf","tarball":"https://registry.npmjs.org/tape/-/tape-4.6.0.tgz","integrity":"sha512-d50tkN2Z3Gc7k61wJCzxH0xoMkpiBQFIVGWU0KmCljmoGvtbhJ2+GWw8HPZyTyX1Tm17aZYDQKdtAiNG5t6UxQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD0f5Ca4jTmbpAGXYKB6qfa9wQqxotKYGXODswCDwI4YAIhAPNiAxvJNZLhNoJ9uILI55u8BVTLiRrx+30ZWhG0naLX"}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/tape-4.6.0.tgz_1466402260747_0.020768067566677928"}},"4.6.1":{"name":"tape","version":"4.6.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","function-bind":"~1.1.0","glob":"~7.1.0","has":"~1.0.1","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.2.1","resolve":"~1.1.7","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.5.2","falafel":"~2.0.0","js-yaml":"~3.6.1","tap":"~7.1.1","tap-parser":"~3.0.3"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"407a0f682a559c676323a01969083f9354768948","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.6.1","_shasum":"757cf9e4bc376b6f26067ae6ccc25529c4cb302f","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.6.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"757cf9e4bc376b6f26067ae6ccc25529c4cb302f","tarball":"https://registry.npmjs.org/tape/-/tape-4.6.1.tgz","integrity":"sha512-ahw5fcUzRXJKOHxMM8okBg71vQrwC9hLEuzxOHkbdt5/2JJ+SN8ryzYQBEzghh9dZ8Ur3wTsDvA2auGSTQOzIw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCl6VWzKWsGwZKs5ZucHW4rdSHW7/+LN4MicmVu0wlxnwIhAOfS8hGSzHbo19orYep305vhvYEvnZpcEd2PF9xKEM/B"}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/tape-4.6.1.tgz_1475215243636_0.6535790215712041"},"deprecated":"has a bug with throwing null/undefined in .throws; use ^4.6.2"},"4.6.2":{"name":"tape","version":"4.6.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","function-bind":"~1.1.0","glob":"~7.1.0","has":"~1.0.1","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.2.1","resolve":"~1.1.7","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.5.2","falafel":"~2.0.0","js-yaml":"~3.6.1","tap":"~7.1.1","tap-parser":"~3.0.3"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"c9b8ce83e875f556acdb0cc46d6cec9a3c057bd3","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.6.2","_shasum":"19b3d874508485a1dc30fb30fe2a7d9be2c28b78","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.6.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"19b3d874508485a1dc30fb30fe2a7d9be2c28b78","tarball":"https://registry.npmjs.org/tape/-/tape-4.6.2.tgz","integrity":"sha512-cTwUY7Qh2I4KccbHusR8MS5sj3d6pF8uugunL0VkDQNSqYxmluDzRGYPHuvPqfPNYBzpVwgGgF84tDsRqgmCyw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGsKASaD12FU0L6igIzeJIAwKyyoE/hJSRq/uKSY2eClAiEA0ia7MzRuHgGHnQbdKbS+RMG258oTNjkWKmEooYTNRWs="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/tape-4.6.2.tgz_1475259151192_0.3350706466007978"}},"4.6.3":{"name":"tape","version":"4.6.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.2","function-bind":"~1.1.0","glob":"~7.1.1","has":"~1.0.1","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.2.1","resolve":"~1.1.7","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.5.2","falafel":"~2.0.0","js-yaml":"~3.7.0","tap":"~7.1.1","tap-parser":"~3.0.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"72213e119fb9c52e7620fdc58908b1227dd1c9f8","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.6.3","_shasum":"637e77581e9ab2ce17577e9bd4ce4f575806d8b6","_from":".","_npmVersion":"3.10.9","_nodeVersion":"7.1.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"shasum":"637e77581e9ab2ce17577e9bd4ce4f575806d8b6","tarball":"https://registry.npmjs.org/tape/-/tape-4.6.3.tgz","integrity":"sha512-BGtx3i+1hFtw4n4J9TqVnh5CC3IHh0N2ydh95g25hNPbdLCz9RV+ouIdaw711aN1DuyBAq/ZrFrbyrFLV4vdUg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCQVHWryDiW18dLDEN4LhTV78BURWwj88MvttEHvE35kAIhAK7lY8v3PgeDhwZHyXZfLJ9mHQLI6RQsro+SxJzYlCci"}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/tape-4.6.3.tgz_1479791836421_0.9047840470448136"}},"4.7.0":{"name":"tape","version":"4.7.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.2","function-bind":"~1.1.0","glob":"~7.1.2","has":"~1.0.1","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.2.2","resolve":"~1.3.3","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.6.0","falafel":"~2.1.0","js-yaml":"~3.8.4","tap":"~8.0.1","tap-parser":"~3.0.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"1d0df26328d89b9ed1671260836ff8fb4079c265","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.7.0","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"integrity":"sha512-ePzu2KfZYVtq0v+KKGxBJ9HJWYZ4MaQWeGabD+KpVdMKRen3NJPf6EiwA5BxfMkhQPGtCwnOFWelcB39bhOUng==","shasum":"f3ebb214fef3d6907e5a57dbaafe3bd8a7cbed88","tarball":"https://registry.npmjs.org/tape/-/tape-4.7.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDbfwKyJa8MniIk02HpOgimkG62OKDzooBeRZqmkuTLhgIgRWnyhVzTzg34xiggxIY2hOnKy7XA4PvoiIQWq2sHkcI="}]},"maintainers":[{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"domenic","email":"d@domenic.me"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape-4.7.0.tgz_1498521030436_0.600126574980095"}},"4.8.0":{"name":"tape","version":"4.8.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.2","function-bind":"~1.1.0","glob":"~7.1.2","has":"~1.0.1","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.3.0","resolve":"~1.4.0","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.6.0","falafel":"~2.1.0","js-yaml":"~3.9.1","tap":"~8.0.1","tap-parser":"~3.0.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"342c89ac8cc5a922eea40681908c69b37c10c39a","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.8.0","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"integrity":"sha512-TWILfEnvO7I8mFe35d98F6T5fbLaEtbFTG/lxWvid8qDfFTxt19EBijWmB4j3+Hoh5TfHE2faWs73ua+EphuBA==","shasum":"f6a9fec41cc50a1de50fa33603ab580991f6068e","tarball":"https://registry.npmjs.org/tape/-/tape-4.8.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAZ9cta5U6W/4vdLvb6CKWF5zcyBPHo8ZgIAzPRz50J0AiEA2CPlk+u891GaKqPiWgp66guPdq6WqbN8GwiQB71ZKsQ="}]},"maintainers":[{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"substack@gmail.com","name":"substack"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"d@domenic.me","name":"domenic"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape-4.8.0.tgz_1501543856011_0.13132305000908673"}},"4.9.0":{"name":"tape","version":"4.9.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.2","function-bind":"~1.1.1","glob":"~7.1.2","has":"~1.0.1","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.5.0","resolve":"~1.5.0","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"~1.6.0","falafel":"~2.1.0","js-yaml":"~3.10.0","tap":"~8.0.1","tap-parser":"~3.0.4"},"scripts":{"test":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"ea6d91e9ec4a751a885d68664bb948a285562d5d","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.9.0","_npmVersion":"5.6.0","_nodeVersion":"9.5.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"integrity":"sha512-j0jO9BiScfqtPBb9QmPLL0qvxXMz98xjkMb7x8lKipFlJZwNJkqkWPou+NU4V6T9RnVh1kuSthLE8gLrN8bBfw==","shasum":"855c08360395133709d34d3fbf9ef341eb73ca6a","tarball":"https://registry.npmjs.org/tape/-/tape-4.9.0.tgz","fileCount":87,"unpackedSize":121715,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC58Ezez/pTftpH/vgokJL9eoewnp0DwskH+yB8ggeGfAiByahlL6uevqV7HBm63sbpLaGLdYRBn/J2yA1Hf+mvXOA=="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.9.0_1519023682577_0.26976798171691874"},"_hasShrinkwrap":false},"4.9.1":{"name":"tape","version":"4.9.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.2","has":"~1.0.3","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.6.0","resolve":"~1.7.1","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.7.0","eslint":"^4.19.1","falafel":"^2.1.0","js-yaml":"^3.12.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"050b318651f9a5858564e9818482851b35df1c47","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.9.1","_npmVersion":"6.1.0","_nodeVersion":"10.4.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"integrity":"sha512-6fKIXknLpoe/Jp4rzHKFPpJUHDHDqn8jus99IfPnHIjyz78HYlefTGD3b5EkbQzuLfaEvmfPK3IolLgq2xT3kw==","shasum":"1173d7337e040c76fbf42ec86fcabedc9b3805c9","tarball":"https://registry.npmjs.org/tape/-/tape-4.9.1.tgz","fileCount":85,"unpackedSize":121803,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbGbnjCRA9TVsSAnZWagAAAfwP/AnGIjqRYIOlfEPKjfRE\nGhfIonhkMasvJB/UtTM7mAolhlIPapXxji/UYiz62MKOgDrhdoLb1hqwSda+\n7sOqe/rmmzMSQcJGaqJgM9mN6SganB+AY7t2LDd+ss/R4ljzxKmU50qdHTQw\n9dE1kopB++554OIh4hBmPYEG2RQMSvvicX3NfTP0HTYnEAh4AhAhsVZVCevG\nWvV7H8heit8ALMrPl+SV5y6K9RL1ZPMaWJGiko69z/D+MUJjeWq7LqBfIn3b\nC+HeprhYQmpxoWXGfB1Q+O8dqgsxHE+qIfy45RY4obh9i0BQeOF6GEvxZrpg\nMCup7+oOvXY3ZwtcNMW2r7zNtRKKq65BuyKDT6ubaxosBSAHwQo5QmdHLXOW\nBWyF8d7+iwxlhawMJ5sepdFnGzP5uz3XLDGGH+xQw8uE9KND1cvq/eMSwmEN\nmI3IgupWZdVwyMiMTxJf4wSGr5K1URGyr3frNPm/f9mokx+iRNQpJ21lSFd9\nsJifPdhOL0RNsXbfNy2sT7+w8kOGirmCxBBdpjnwNXtgQ0hHoc92x1Fm/UdF\nRO4L1R1zVLOi8zj8d3o/Y+1s2eCd8Ff2Cw6STeLr4e+w5ssAbCwZ/NlmtqTW\nS5wbvqs3lN5SvGgDMIidlMJqhyJAX6PEtlyiBLxlMsqXho2pcG4ritYArI/E\nj+PY\r\n=MCty\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCzF7L4yCAeu/D8G/GmZoULC0bwAmAanjYQoOQBruOsmQIgYhxQCJi7J7qIMxCGI0TlBB4GobuSmCpfG0Wm8qGdDDY="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.9.1_1528412641308_0.43790016590353886"},"_hasShrinkwrap":false},"4.9.2":{"name":"tape","version":"4.9.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.2","has":"~1.0.3","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.6.0","resolve":"~1.7.1","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^5.11.1","falafel":"^2.1.0","js-yaml":"^3.12.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"a1e8f7e21cc7831cf5a857b00627b5dbcdd68aea","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.9.2","_npmVersion":"6.5.0-next.0","_nodeVersion":"11.6.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"integrity":"sha512-lPXKRKILZ1kZaUy5ynWKs8ATGSUO7HAFHCFnBam6FaGSqPdOwMWbxXHq4EXFLE8WRTleo/YOMXkaUTRmTB1Fiw==","shasum":"f233e40f09dc7e00fcf9b26755453c3822ad28c0","tarball":"https://registry.npmjs.org/tape/-/tape-4.9.2.tgz","fileCount":87,"unpackedSize":130926,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcJ/IVCRA9TVsSAnZWagAAQUAP/07q6iTRt0gwVAZAemYw\nk3tw7T7ZXNFwiSr04uvghYpQ3SzgUp0grmCZN4OlpkD9mtSWAL3dvHNPV8d+\nBg7qXzLqw2bDLUEhwsYjsxr/cgf308QJeFsxSCHYoG0ngSkdNFIivgh222/G\n53fMXZClyoDB1/LqVq1OuoKgbYSoATJpsmXVWNmxnjxK+CFWQ7olgyyb4AR0\nC8a0IGqYEEP8+3udSEyfq47Imr5ViofOpxVpel1xye1q/sM3sAWd2HcmS93Y\nQawig+pzQlU51CQXmA/0qB3JK3sCYWqbEOlpQheKDSkL33hBwyn/2lCRDBso\n4sy0R/Oi9PVwYuxjH5jNzePtf3UpR4vO7cKLu0DBdkvueSUhvurPHjJESsic\n1gE/4z+My9QTc4SJ82Uy+HMgYz7KPOWlvbYyGQlKvfrBo3eRomFVjslGiU/o\ng1TJur/76TuAp3o3Uc5PLSIapLqp12U7il2QvAN7FkRXenpewHDzPrOQY1y0\nL54vVabqpVHGExpwtpGiYjudMI5oYDxNtKq4hK7LyGCLnQY9dso1bD45ESI0\nf5o0ibBQCiAAIti2KJvUhNFyf1XOhE89/0YsKP6xwUg1/CJg7cC4wOK2ZvWo\nz0Q4Z14tc9ren6gsA5KXI/FoHC6VIEtU/VIyJoYr6jCpgE4IaHU+6AVK+5Q4\nHLe7\r\n=b/nk\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGX1Yeb9CX+EPOVhisfQNLCYs3T5+VEyauA31phL4M80AiAgHEROTcFkVVj5ZdvjW4UUp+bLRIugDliUAD4AjB/gnw=="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.9.2_1546121748864_0.7975355924867262"},"_hasShrinkwrap":false},"4.10.0":{"name":"tape","version":"4.10.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.3","has":"~1.0.3","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.6.0","resolve":"~1.7.1","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^5.13.0","falafel":"^2.1.0","js-yaml":"^3.12.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"34b1832ae17290e691411feecf802c982b0267b2","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.10.0","_npmVersion":"6.5.0","_nodeVersion":"11.8.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"integrity":"sha512-3PgdF0vcZ1t7HEYbpTXdo58KXi19QCGcZfj07A53M2DH14P2Fw3cB3f9pF7e/Br2z+PQm7xlvhjzHH3D8ti99g==","shasum":"c915fcd7595e53f089bc4f99d12c10eda9f6e4f6","tarball":"https://registry.npmjs.org/tape/-/tape-4.10.0.tgz","fileCount":91,"unpackedSize":136675,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcX0mmCRA9TVsSAnZWagAA4TcQAIWakLVQ9tb3XJvM5uNV\n7eKSOBpz5NFE7JSJ0Fc5rZXOifJF1w5UygdY88nyNNUj1lvMGCckiBpfvSrk\nsMs4VW9jL8+DdQXf86H1hzIbL/XjCN6r7u4AGiSNGPcniZn4rC0vLDN4+ian\n7tNY/jSo+UEQjVsgE0de/1UySgN/mJ5d9rLK+1NBDhsRcLFc6epjfJblvrUS\nydx7/Urr2BZ6T/74gZRW3bcMiZIcwTR3QktNAbEQ9SLkksNxJXDBKqgPKjne\n098ic8CRhr0XK9vJngChlytUALnuxVA64RR6p79vcfJ9mBEUiymxFGaTCIXI\ne01Hg5AHZZ4UaHu6bQkzwtYj6DYTQJSs/roOqCJz5RLimCbEIPJnrgkmxBpD\nM08uvPLffSZZ75cxCjGuPy1ZfwA3+20mh5pv2bgySTlTicBTLd2cDR3IZITC\n9nL3bAv6UCV2+0q4Gmtf7RsWJvFbQmkGFhk2dzbDjl1RutCoZNRLVrM18aPh\nP8hSAx9t3XOiafl5iQDrri0M3swnEGQ4wk4Q/qks7jT2tON1sKvhGnKxDfaS\nIQ0hlm1pw4kCrGf8OfOAmBkutQ/tIR9yyLBAgFtk5i+xnHLNNMV9NZyRQws1\nMPg9r1zEh1jNLscv/Yj7YGNV77CQXmJ7w5+GGe+cDiLKANfTzJwF6UmFOpbu\nifAR\r\n=jRJo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDNQeoVe9uje1ARfNNCMd8HJV7dhuVKRXyGmqb3Bu8c9wIgL2hyl5WIguQTUFGkqun4RZANACz5kgVjWtvmmWPqlmA="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.10.0_1549748645342_0.899163796540466"},"_hasShrinkwrap":false},"4.10.1":{"name":"tape","version":"4.10.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.3","has":"~1.0.3","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.6.0","resolve":"~1.10.0","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^5.13.0","falafel":"^2.1.0","js-yaml":"^3.12.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"4708a3de895026f16d46c5156c0ffe89db3838d3","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.10.1","_npmVersion":"6.5.0","_nodeVersion":"11.8.0","_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"dist":{"integrity":"sha512-G0DywYV1jQeY3axeYnXUOt6ktnxS9OPJh97FGR3nrua8lhWi1zPflLxcAHavZ7Jf3qUfY7cxcVIVFa4mY2IY1w==","shasum":"f73be60888dcb120f08b57f947af65a829506a5f","tarball":"https://registry.npmjs.org/tape/-/tape-4.10.1.tgz","fileCount":90,"unpackedSize":135185,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcZLb0CRA9TVsSAnZWagAADIoP/jXeItDw0+LLpMW9+TOg\nfnQcGxSut/CO7LA7sZxA3KonWd3+yvm+pt5qaQ/vcIZb8Uq3MRqRdhPxiQHC\nWI7IV/DuJlDkR1M8FHLI11vwSrHtCNcv4oRPPEtnsRUHqwaZ+/SYcbVp76Gg\nrkZ1LDcvNll42RMTRk8pvzKwYnH1m7/QmDJIc175XDzPYi5d4TNvrvO98CX5\nIIA7nMTvN6oNgnO28U36vSWMDT/RtZ4SDve5rBbj5dLFGoQlpEkC+mBGoee9\njM15pC/C0CPEWXuX4wdV/gMnm0q3VOcDJba0P1YsU/J2K/oqWEycqKCx2OQg\nbbZq5FRyKA99WiLj0amqcTL4S7kXThYoOUoR6wTNpwyRRFqGdpDUlTbOl0nu\nUeu15G73226KyFmJsnH23PrnsWIS55P7F8oyRfobWO/ingbeAHkRk2w+BczD\nunP/MVws68l4aDHhj5aChUFF97QxBCo98ex6whHcY83L8jGLAizVRYJ1makj\ncSt7hwskjIv++wCBtxkONxpDpRpCL/TAExfKhSms3mgETCaqRrNFF+VXv1Oa\n5S7QqaDf4s5LNdB422uPvOPsJEiIEfinugSOsqKKp4eCOBeHStjolVASbLie\n97qp5tspwFYcAmhnK9ojKzwf9rfxiuc5o4UkFfLo81DXpk+NqkatF5FEpbV7\nQDLT\r\n=/X3L\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD6jzK6v8kP0KKsXMFxqnhHxNDEhpeEER1ZoT3n5wZs1wIgIpoTfvchv/Hes2YTGWuww05VqXWHbk+PyC/wn6kVFHQ="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.10.1_1550104307713_0.7953474314068598"},"_hasShrinkwrap":false},"4.10.2":{"name":"tape","version":"4.10.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.4","has":"~1.0.3","inherits":"~2.0.3","minimist":"~1.2.0","object-inspect":"~1.6.0","resolve":"~1.10.1","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^5.16.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"2c6818a55d86f39abe1c3c2a5ee89119f514f19a","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.10.2","_nodeVersion":"12.3.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-mgl23h7W2yuk3N85FOYrin2OvThTYWdwbk6XQ1pr2PMJieyW2FM/4Bu/+kD/wecb3aZ0Enm+Syinyq467OPq2w==","shasum":"129fcf62f86df92687036a52cce7b8ddcaffd7a6","tarball":"https://registry.npmjs.org/tape/-/tape-4.10.2.tgz","fileCount":90,"unpackedSize":134765,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc6a4+CRA9TVsSAnZWagAACPAQAIuPQKQADzdXehDO05Zs\n+NhgpcN3CCvZSh0HK7M1EfGdDaSJ1TFyg9MOGkaiBl7RnF+WGwZNQWXDT93F\nrKuxXpXqoGAA3VkwfsN6fUYfY5YHzNqz9iKsHQPLJUWZgV5v2DU3qHhRGvfC\nMKg7GbHw3ZmxOTk0AE9lGjzsVVbYRf9q/M/XAgnO+GbNPQyQn/eCtoTkfFQb\ncLU3i1VMMfqI65JF8WQ4u7vF3hpLMvmVQlyyoPvGljQFIWCjjE0ilFnkzktu\n0jnxNhKdg63LRBQuKb5f8PAXY0u+yDx5UkvU9Q/KRbQwuWbpSdfhIB2XU7+Q\nbuCfRPNg0wihyhV/XjNvvRxcWsXMvVA8ZVrAEu3oJMxqQJcNyGOytRkCalal\n2bbCQHXDMnIt+YIVXF5f+doFmGd12bzIFKM+B1YiheHnFdGISuMRthpBYLMc\nwYuQTP2ylEaWRnUmukvKFWxQp/YGuLZ7gANKLG/mqwLDEiWyQM4HTDeozLmR\nF6cYL+vxMYLaHDGTSXH4bGk+rpvCN1uUGD05g2Vv23UOKqozp4dlcu/iBUhr\nBYT6IUALcPd5/da4G4Gx8tkqblV5AK05KjEk5Pa0wOJ1xbCXfBvU2qFjb4sg\nx/BH/0Psv8qgW6F8kcPUVZ1H5NqwNxZob0wIyHEtbOCRA5zOVDtJwlPwkiF6\nQgg1\r\n=/cJ5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBQBFIMBKjE7Op9OLfnVeBD9c6jQ+2Saj2PTekd9Y/qJAiB8MkbWRjlvxjJRy6zxn6VK8wg0n/LV/1YMJ+ZviJC1Vg=="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.10.2_1558818366040_0.780589673399249"},"_hasShrinkwrap":false},"4.11.0":{"name":"tape","version":"4.11.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.0.1","defined":"~1.0.0","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.4","has":"~1.0.3","inherits":"~2.0.4","minimist":"~1.2.0","object-inspect":"~1.6.0","resolve":"~1.11.1","resumer":"~0.0.0","string.prototype.trim":"~1.1.2","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^5.16.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"2b5046e3c2135b0bc532988ce0422b5db30a9359","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.11.0","_nodeVersion":"12.4.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-yixvDMX7q7JIs/omJSzSZrqulOV51EC9dK8dM0TzImTIkHWfe2/kFyL5v+d9C+SrCMaICk59ujsqFAVidDqDaA==","shasum":"63d41accd95e45a23a874473051c57fdbc58edc1","tarball":"https://registry.npmjs.org/tape/-/tape-4.11.0.tgz","fileCount":95,"unpackedSize":143933,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFv+wCRA9TVsSAnZWagAA0d8QAIVFzDz4J003qkjjoHd3\nJamDQT03wzQpsaYMZxYuBWAB7pRyO/jJE7fZv8VTo5axiLp9OMKRCw4o0OX6\nKyUr2CjclYWtRmWs3TV8xRCT35hxVp8yrsrjrf1abxCcMqchUDmEF6E2bylq\nmdr6CsERdhMhhxnYiSKwGrEXP2Te+dwR987ajIiTqVBDNUmLZQ5w+nO7iiYO\nnSzYCcZ9WAcpNrVTCdVTR7EFa5IF1RzMr1i+NSaMqoLasAtG5e411QYkeVKX\ntbM1aW4kMx74JZwxjyTZKE5mfzBedNCmjFRfbc2Jt22agOU+u1ka+HCzMqW7\njLK7bF9v32nzlbz0fMu9hTJY7/il0hfcyEhIy2DxlzjpCu8jedaFf/niZeRK\nKH/2TQUDhA54NIu9q/CjMJExLXaAdrjPIjk27CCUV7gAYrEnXxTw1KZ4EZVx\nJerCmsmD6XzbiZPxd8YdxAYNjquP0GoSx3tZU1KMrzu5SppkKLderATH8nyj\nrUxT0kCgUafsvqvUW9OafsnhAqV/CcVXqTTPc3H8+/zrZ/ryut4+Fi7X7Nzz\nAnSJQabvmL93IC26VGMHA3BRYoHN5XmvMQu+M172zuqiNYMwtS1St/nYqBlp\nWLflz0XUY00D1ODd+w8DD7+nBDiUDmg6e45QEHEguV8Wdtl8kuBkrzBu2ObL\nlgQG\r\n=dVxc\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGjO64NyvmfoxiSgZw1C4bh9HsIs51EB9sS08zCRYAGWAiEA01V9CjW5pLku2o1MY8uLRLl/esZZ+fJichBH4YMAB94="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.11.0_1561788335871_0.05616318374967011"},"_hasShrinkwrap":false},"4.12.0":{"name":"tape","version":"4.12.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"./bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.1.1","defined":"~1.0.0","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.6","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.0.5","minimist":"~1.2.0","object-inspect":"~1.7.0","resolve":"~1.13.1","resumer":"~0.0.0","string.prototype.trim":"~1.2.1","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.7.2","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"42c84d6c70643615d22faeb67c8d5f87dedc2cb8","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.12.0","_nodeVersion":"12.13.1","_npmVersion":"6.12.1","dist":{"integrity":"sha512-PWs/TopmfVeYyLNZnfKsoV160xjNq1LvX2SWzZTyhVYsDldR93p5Zp0lfmsY3BCpZdVMXBOkfYZFeScEfsFvKQ==","shasum":"eb5382ac5d450f9c858819b2233458e69aeda4a8","tarball":"https://registry.npmjs.org/tape/-/tape-4.12.0.tgz","fileCount":95,"unpackedSize":144033,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd+AbZCRA9TVsSAnZWagAAJNEP/1+nn7GAA8gjb0k4/yAN\nLlnFG2Che0sKzQVXfVyM1vm5WdSrOaNUPL37xJT9cxI22ragV2nYFNDun6TS\n54CTWZxgfsldN9sknVUXfu0DdD6giVOy/rfBRhOp+LkZh1GEe0VpBg0DHpF3\nLLdq6Hcaabcy+3r75W+9KZktsTUw6qyXU1JwHsVD5DW3xb7hjclERdvz6UZ3\nAAnX8R0vLz++RvmzPuSxLlfJLE/tpZ9tx/h/4qLY5ADVPRqRO4Q6heC+X4zM\nZWQZLkilTGUTiP7F8urq4INH52Hzd9rnba4xltksrLEbRnaQiL/SuXM+9pzW\nt7tdgi1NZuCpcKRAD5zOITbGWdr/4JwJOVUkzdBGqY9PO3fXHTYtycJ9CQfT\n3bH09CC21HI9xJVd0S8Ofbq3TEdMKxW5ULYYrU8OuDG8gdBrlUtGM5cMCdLN\n0zLwxOjON18fwpNXU7IDMPcJiEL9Puqr19j7bAGB5NP73ZXRxvu3clpdkgaX\nRX6ZxTdM4IQKccRrAeu/TY6T4tEeAJ8ovQ/kLKFp+vg4ZBum71vQFr8prOdS\nTWeBwbnTK2+XN23dFdDgN8vW8jy5FWf7sjwc6coUVt+6/rcBNewMzl3Pu7B4\n2qbwDTKp+JrOQfMpK5f6JSySCqR3HkdW4Ix5OvxmPQVie1jWyiSxbzr0E8hu\nhQti\r\n=Jw4d\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFecZEov254owaJpI2MC2m8UKyQWWBMFZeVOboaEgP+BAiEA68mNIW/gXpYOHauQrqEPLijprlVf3ky+egguLRntoC0="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.12.0_1576535769405_0.05675535826487188"},"_hasShrinkwrap":false},"5.0.0-next.0":{"name":"tape","version":"5.0.0-next.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.1","defined":"^1.0.0","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.0.5","minimist":"^1.2.0","object-inspect":"^1.7.0","resolve":"^1.14.0","resumer":"^0.0.0","string.prototype.trim":"^1.2.1","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.7.2","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape\n\ntap-producing test harness for node and browsers\n\n[![browser support](https://ci.testling.com/substack/tape.png)](http://ci.testling.com/substack/tape)\n\n[![build status](https://secure.travis-ci.org/substack/tape.svg?branch=master)](http://travis-ci.org/substack/tape)\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files. You can run the tests by\nusual node means (`require('test-file.js')` or `node test-file.js`). You can\nalso run tests using the `tape` binary to utilize globbing, on Windows for\nexample:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the\n[`glob`](https://www.npmjs.com/package/glob) module. If you want `glob` to\nperform the expansion on a system where the shell performs such expansion, quote\nthe arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm\nthat will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one\nof the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods\nin [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have\nfinished. Tests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you\ndon't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished\nright before `tape` is about to print the test summary.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called\nautomatically after the `n`th assertion. If there are any more assertions after\nthe `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert\nthat it is falsey.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the\ndescription message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. The `Function` is the exception thrown (e.g. `Error`). `msg` is an optional description of the assertion.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown. For example, set `expected` to `/user/` to fail the test only if the string representation of the exception contains the word `user`. Any other exception would pass the test. If `expected` is omitted, any exception will fail the test. `msg` is an optional description of the assertion.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current\ntest `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up\nafter `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with\na new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to\nsomeplace else if you `htest.createStream().pipe()` to a destination stream on\nthe first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case\nthat will run for the entire process, all other test cases using `tape` will\nbe ignored.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes\nmessages to `console.log()`. By default `stream` will be a text stream of TAP\noutput, but you can get an object stream instead by setting `opts.objectMode` to\n`true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want,\nlike a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# license\n\nMIT\n","readmeFilename":"readme.markdown","gitHead":"f05b9deabbe0fc169dd6d1cf307c88c61cd688e9","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.0.0-next.0","_nodeVersion":"13.5.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-wAVR0TAYOTOr1v/juhO90mRmkVvzyc9C6pMP7UflEwl9fRqRPFiBk+pQaNDq7Prfp4rotbgthhLD2UHO56GJew==","shasum":"f98c97b87d6784d1702d1cc8b88b1036ac430373","tarball":"https://registry.npmjs.org/tape/-/tape-5.0.0-next.0.tgz","fileCount":104,"unpackedSize":156075,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd/cNfCRA9TVsSAnZWagAA3eQP/0AG1MO4LrLDQonIH92T\n4bVWiZGdITHUoeB6K8mDpw95gZf0YslJLn9WpBsDXfmD7yHW94lZrDW32Nk8\ni2fcL2/lXx1B0sOO4mFeNhZwLko5k6vj40Af+06w8qN2r16CsNWK6EyKhWAw\nINDE14ZpLcqczAJTYrQznnhtkR5HaVA9yIvDCIn9PSj6oteC1ShU9gM8jIhw\nwuyxALjO4NdI+4IYFO+m31UcYFfKqrUcj4II04Ex4y3OCghvDjcVM/pVnjV2\nPbTT1Eh4164DB2KKcTAIcAgQzgDVLKvunHTiJ4mTECiYDX6kIPTnxMcebrv5\n550YyBzeHTsKGnYYerr1IEPBHJ5JuTGWkBqUNdKTOQy+7BZO/UYht72yR+3X\nfW3NkA2r47qg/wkWDrDWV2E7kXzuEv1Zm9XoFO/N28ZUbbqGV3pu3UsA2K8I\n6ZkZpQ/0wZLUUkTGxCsYoQH7fBynDgsp0Z+zWuhdiWECjYc2Aj7yvV5YQ+vw\nGhsFqvj4hg3CkfMms8iD5l+vC43OBfQxTjGt1ml76he7Q8uGA9EH0Co64c2h\n++R63lozTK0kYRw8zawkoyr32KFx8hlIzGUIY7x7GI/86haKfSqNdBhV0+IV\nk4iXtGp/2ZjXASsZeRnBd7QyrfGVVzVuTekT7R/YUgo3/zJtChCTT5XLvRL9\nTY1Z\r\n=A7gn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFo2oQQubzcLbROc/SH6n3/nC7gmGvdl+6dWMQ8hiRLYAiEA8zP4ni6NBjTvrzRAJCstFwk6SL40chcF+zcuYHDeVbc="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.0.0-next.0_1576911711318_0.7285543628796882"},"_hasShrinkwrap":false},"4.12.1":{"name":"tape","version":"4.12.1","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.1.1","defined":"~1.0.0","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.6","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.0.5","minimist":"~1.2.0","object-inspect":"~1.7.0","resolve":"~1.14.1","resumer":"~0.0.0","string.prototype.trim":"~1.2.1","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.8.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"25bcbc6b6e3f51650f30492e27fa65c7d61e6cab","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.12.1","_nodeVersion":"13.5.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-xoK2ariLmdGxqyXhhxfIZlr0czNB8hNJeVQmHN4D7ZyBn30GUoa4q2oM4cX8jNhnj1mtILXn1ugbfxc0tTDKtA==","shasum":"5fe2f0e2ef09ff0ec6f6d37f38300a6016082d91","tarball":"https://registry.npmjs.org/tape/-/tape-4.12.1.tgz","fileCount":95,"unpackedSize":144097,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeAmNbCRA9TVsSAnZWagAA+aQQAKJ6Moj3r+mgpjSRZy7k\nM+xLoyHDx6mnapM05a7IN8Zq0L9PU5CIeedA9jU4F7n6E2TSgp7eJygMGbaT\nOjt0ipLlyjjfSE4/RVNC6N8VKUNORIVC73B/3IFjQ3mNB1RlLSHFHHghyPKR\nQV/QQ/mc41cIPoPRM4vDoMJmJf+DIrL5M/s2kVz1E6KyvoCib96U0Dqfv8A8\nV79834v7bQs590/W407FwUIOnY2D7Ua40l6aEpWLBsn2A0SFiloi4SOL+anI\nvL+98z5BPNHljQoOH+OAgV69zKy5KpQLhsJncgNL9Y9NtjdrbMPdBuvN14f9\n0fLV4Nq+jiWhmW+vFpEzyGqEm7DCsD6BwaZKl/kHobcwIcdoS220v4jzRw6F\nrAVnQcm6J1Q5zn9J1BRaDbfP9D8LcUXoKim4tFBv8upRREE80WizhyiSqYXC\n8YjcMdX9CuvWnde1UZmcvp5ZiAB3FY5Y7UHzLig9wbttSiB6WLSxQJecPTMu\nv4Cvnsrj9/UzP1kWuEt4MX2d5NGS/FRRAP6fe1V5SEiRdoC4U3vjTwwV8DN1\n/V+V9Ri8K0l1/57ZSBbyfFK8KMoMLLnOHUAiBitA2F3gOBu2UQX9j0ytj5Og\nslyaHcGvd5PxyE1urm3ajdpasDvw/yp/MWJo77SIVvNlyaFMflaAgMxuK3gF\npyPg\r\n=P+mq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD26vKwe7+jbNeSBlQy62BsXkiBErXDYrkikM9GFskpDAIhAIiPUEP3bAOzlTmWQYR5a6Z2NLV7PVhSAhzEtfifKKf4"}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.12.1_1577214810577_0.8707925124195861"},"_hasShrinkwrap":false},"5.0.0-next.1":{"name":"tape","version":"5.0.0-next.1","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/":"./lib/","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.1","defined":"^1.0.0","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.0.5","minimist":"^1.2.0","object-inspect":"^1.7.0","object.assign":"^4.1.0","resolve":"^1.14.1","resumer":"^0.0.0","string.prototype.trim":"^1.2.1","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.8.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape\n\ntap-producing test harness for node and browsers\n\n[![browser support](https://ci.testling.com/substack/tape.png)](http://ci.testling.com/substack/tape)\n\n[![build status](https://secure.travis-ci.org/substack/tape.svg?branch=master)](http://travis-ci.org/substack/tape)\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files. You can run the tests by\nusual node means (`require('test-file.js')` or `node test-file.js`). You can\nalso run tests using the `tape` binary to utilize globbing, on Windows for\nexample:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the\n[`glob`](https://www.npmjs.com/package/glob) module. If you want `glob` to\nperform the expansion on a system where the shell performs such expansion, quote\nthe arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm\nthat will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one\nof the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods\nin [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have\nfinished. Tests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you\ndon't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished\nright before `tape` is about to print the test summary.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called\nautomatically after the `n`th assertion. If there are any more assertions after\nthe `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert\nthat it is falsey.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the\ndescription message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. The `Function` is the exception thrown (e.g. `Error`). `msg` is an optional description of the assertion.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown. For example, set `expected` to `/user/` to fail the test only if the string representation of the exception contains the word `user`. Any other exception would pass the test. If `expected` is omitted, any exception will fail the test. `msg` is an optional description of the assertion.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current\ntest `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up\nafter `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with\na new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to\nsomeplace else if you `htest.createStream().pipe()` to a destination stream on\nthe first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case\nthat will run for the entire process, all other test cases using `tape` will\nbe ignored.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes\nmessages to `console.log()`. By default `stream` will be a text stream of TAP\noutput, but you can get an object stream instead by setting `opts.objectMode` to\n`true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want,\nlike a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# license\n\nMIT\n","readmeFilename":"readme.markdown","gitHead":"ae7f7aab71763bc7be9d8a6708f9f568a074e3bd","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.0.0-next.1","_nodeVersion":"13.5.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-6Xq7rA50kca07qgSSTl+UYsjOghiO1iBocbeI6gEDB3zVmIpWCKp16ScP998kvdV6zl4Llm+sffcZjf9hm50ZA==","shasum":"675ef9705d2ece36846c3cfa1153d495d2543bc2","tarball":"https://registry.npmjs.org/tape/-/tape-5.0.0-next.1.tgz","fileCount":108,"unpackedSize":169892,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeDRBHCRA9TVsSAnZWagAASHEQAIpGac9FUH87/zyL5AHu\nR3f1XRNA5IqQedEmmyTGOTOZcROAqYbjzmFADob88YGZp9cMkCmytZBf9O4n\nuB3Amoxj+BaFKukJ3B3AGCsEqYsX2fEKInRQzfzwfl3dmVTFgOIVgC2RFI1w\n0JrjNgI7GLoq6nADEoFe8uNc1NCKmhAg4QRcj/7YfhJB5ZN/fDbOMsjbY+c0\noyanqQxdsyOlhU9Q1XLbqo1e1oVqnEXCQ9kxIGwcawGr6D0g3fZI+wzxzldX\nOYWkTeVktoZ8RwSulMNrXsmxyfRp+S0bIHAM5f+B0ONv2jA5nhMNClbdIbz7\nj9ThdxtUKf5GYOxFZ3Cb01aXzF2fGT3mQB3/E+BRmD4HnZrx4ssxArnFZJoR\nqDZxMFHpw6ePu/Ime0VTNgtfshQVtnV83fUIeQQMRaidw1ozPG75DUMYbFvr\nnuc1deZScdul+s0k6ZJo6+rsVwCr5xAGBt+msb+TBBvulU9XYwnOxMpmUeQ/\nqHtAkiQywjueh/1a3KW69lyF+jus6ZVQ2yGQjEttLbwPhQcLtzxWqn6oUHxL\ndE/eFnktXgwP3yMWB7hQ2Ob7N4wzfkCPZD5EXRraT3P+YqVC7gDQ9RPqbkjE\n6ewRStshZTUo/tkoA5j9iamIiASJBOBCVljbXGTXcNc9K+7a4lsRwF4co5MJ\nRt0G\r\n=qVlM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC0xg7yVHta1ygEx29+1NH7FN9SF5CYaoIoWK6FZR4vsAIgODH0I7bVjXHUM5Xrw2/NOVbN7xPVBF9RGwyelGLKNCA="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.0.0-next.1_1577914438929_0.11081748549308079"},"_hasShrinkwrap":false},"4.13.0":{"name":"tape","version":"4.13.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.1.1","defined":"~1.0.0","dotignore":"~0.1.2","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.6","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.0.5","minimist":"~1.2.0","object-inspect":"~1.7.0","resolve":"~1.14.2","resumer":"~0.0.0","string.prototype.trim":"~1.2.1","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.8.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"1fba54a4a15ec5a8c894e1a4df7e6ef584f6531e","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.13.0","_nodeVersion":"13.6.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-J/hvA+GJnuWJ0Sj8Z0dmu3JgMNU+MmusvkCT7+SN4/2TklW18FNCp/UuHIEhPZwHfy4sXfKYgC7kypKg4umbOw==","shasum":"e2f581ff5f12a7cbd787e9f83c76c2851782fce2","tarball":"https://registry.npmjs.org/tape/-/tape-4.13.0.tgz","fileCount":106,"unpackedSize":157646,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeFYbeCRA9TVsSAnZWagAAH+kP/3ylYeNo2HIaSP51sPNz\nyCGXlh4bnIvFdd3Chf3JS0v1XKNPmqoPGLKLOsIgibQn4+SPU61FdYBjs61s\n1IUE3Rr5CbHuxS8XVFU93p8aHUFqDySXu2lF7ZPCbv4GDjC4NG5jbVguFnDe\nD6wRTdLRRyVIjmjobBjY0ELl9OoyYRPqP0QxIMNzKe1FUwO5rIEmGkMsnQef\nq39ljzMReZ2bTOIvAonF1AfVBDkr9zY8R3yDW58GxUm0U/Byrhy5ZRmIZASo\nj/95qrwUH0st435ib7X17uLGKL6OTnogXFXqnbHiPhPJGToe1PohLY8Xx5JA\n2WaC4zwo5sILaJYanyBhLXKnuPx9Kg1UZgYN4x3mOW2GZ3ffdXDOIhMHXtF2\noO9GSJfdUizotiNPsUqxdHRWZvE7cJE5s6DRdhcmiLqJDrQgM8JvccyfwChX\nE+/7LsovTgGJQepZmgehBz5f6szbrvkAao2AlP/cOeXNUlTEOZuL+1PdH4ZF\nd9fVQJfs934aK5oKzhXMnFAmoBm1Ek4rnFHraKD7S6jV2OvVAupM0raryInw\nvubfSnkDEzgsQ1heBjfZhncw6kIKxzBy1nJoul4p1TGyeeIG4q+5ers+IVVw\nzeAlEz4XeCoCwR26cTtlAaoQeGm34C5uAOMPLf0PS/Ii66NRz1W5Byiwjy/k\nvTbt\r\n=/ev+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGjj8RtXgbaKt72DLbhyrRQ9eHIHjlVvoll4UzTjomn7AiEAkVi4oniZarDNK93FS4glRuxa3yQun1ntm7s1683aRMY="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.13.0_1578469086210_0.9196354498350046"},"_hasShrinkwrap":false},"5.0.0-next.2":{"name":"tape","version":"5.0.0-next.2","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/":"./lib/","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.1","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.0.5","minimist":"^1.2.0","object-inspect":"^1.7.0","object.assign":"^4.1.0","resolve":"^1.14.1","resumer":"^0.0.0","string.prototype.trim":"^1.2.1","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.8.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape\n\ntap-producing test harness for node and browsers\n\n[![build status](https://secure.travis-ci.org/substack/tape.svg?branch=master)](http://travis-ci.org/substack/tape)\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files. You can run the tests by\nusual node means (`require('test-file.js')` or `node test-file.js`). You can\nalso run tests using the `tape` binary to utilize globbing, on Windows for\nexample:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the\n[`glob`](https://www.npmjs.com/package/glob) module. If you want `glob` to\nperform the expansion on a system where the shell performs such expansion, quote\nthe arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm\nthat will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one\nof the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods\nin [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have\nfinished. Tests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you\ndon't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished\nright before `tape` is about to print the test summary.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called\nautomatically after the `n`th assertion. If there are any more assertions after\nthe `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert\nthat it is falsey.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the\ndescription message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. The `Function` is the exception thrown (e.g. `Error`). `msg` is an optional description of the assertion.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown. For example, set `expected` to `/user/` to fail the test only if the string representation of the exception contains the word `user`. Any other exception would pass the test. If `expected` is omitted, any exception will fail the test. `msg` is an optional description of the assertion.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current\ntest `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up\nafter `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with\na new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to\nsomeplace else if you `htest.createStream().pipe()` to a destination stream on\nthe first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case\nthat will run for the entire process, all other test cases using `tape` will\nbe ignored.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes\nmessages to `console.log()`. By default `stream` will be a text stream of TAP\noutput, but you can get an object stream instead by setting `opts.objectMode` to\n`true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want,\nlike a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# license\n\nMIT\n","readmeFilename":"readme.markdown","gitHead":"fe17984baa243318ed70dd00d62aef51f88cb59c","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.0.0-next.2","_nodeVersion":"13.6.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-8SHhVtdyGAPfZGEc0u+vWddBFTdkpvinDQ3uHz+LRV9fpMvUuKlhU9NjKOAitbZOhirCCtNzQ6+w4H1Qp+S+Zw==","shasum":"0ae713f9060d92cf0cdb26650b69f50d99e84e07","tarball":"https://registry.npmjs.org/tape/-/tape-5.0.0-next.2.tgz","fileCount":119,"unpackedSize":183373,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeFh0ICRA9TVsSAnZWagAAqFAQAIGCCvw1Qv+beZraVpD2\nngqA+R+uiDVnfezvAmDNMo6AQ3pgAH5jlZ5j+H038Y9OjrtqvmHmwv8vJB+F\ndx39qj7zc6Pl0qtVWQ4jXUsTJbyltDQv8CgNYYmAue2xk7W7iz8Xj+R3L4Fo\nFshQkHREgzsIryzxkBJOLTCPTed7wYWOA16CuScpPb1ID70zDN4ctX+Q9ziD\nWR8Bwp/592/mKtCPFhGvgM7kCKZnOGuiCSvKOdGiMVKvC+tRZMK2Ex7cIhNY\nS10n5T2vWPTSamUTXW7s1/bC02khlqnhvWc6USa8BSkZKTYoI4j85uSpTT/R\nZDOZNoKnsq8Qxa0aFyuJ6oY5ym8mHrVftY9b9n8rPCCdV9zYuH0zB/DYd3Eo\nOb0dTYBZWPIgW5Zq9JtslIYzryn00AvLi2RlZ1PS+7ukx4tg2nHacCu1r4KA\n6cBcTjpE//JbbOdKcL0Ex1idAH53tVLa1eMKVxjsiCpL1GPotY3zo/83YjmV\n9yH6ZW8UFFRm785R0ElBpDgQt6qzjSiZfi+ezxW1ky0V07b+R+hVvN8MrN+1\nkELKjLhfokO38WVguvmum3y82zmE1A9GpjHeDWAmThX322ByKlkr40epGd/b\n5aZx0KsxzUTM5Oc+gYAKLxdn3KIJbZE+nQ0UT8jjBJ5cKczi0ALNQsw0luZ0\nqLrJ\r\n=FFPm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBExUvoMsz2wi3TLnCg0SulwtLKt9Hay0JVftVsk5c3IAiA3zqi0dP4JJTwKU3ovw3i2ch9WXKAG8ZeVuGOVvs7IVw=="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.0.0-next.2_1578507527725_0.3073525738388889"},"_hasShrinkwrap":false},"5.0.0-next.3":{"name":"tape","version":"5.0.0-next.3","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/":"./lib/","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.1","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.0.5","minimist":"^1.2.0","object-inspect":"^1.7.0","object.assign":"^4.1.0","resolve":"^1.14.1","resumer":"^0.0.0","string.prototype.trim":"^1.2.1","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.8.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape\n\ntap-producing test harness for node and browsers\n\n[![build status](https://secure.travis-ci.org/substack/tape.svg?branch=master)](http://travis-ci.org/substack/tape)\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files. You can run the tests by\nusual node means (`require('test-file.js')` or `node test-file.js`). You can\nalso run tests using the `tape` binary to utilize globbing, on Windows for\nexample:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the\n[`glob`](https://www.npmjs.com/package/glob) module. If you want `glob` to\nperform the expansion on a system where the shell performs such expansion, quote\nthe arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm\nthat will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one\nof the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods\nin [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have\nfinished. Tests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you\ndon't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished\nright before `tape` is about to print the test summary.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called\nautomatically after the `n`th assertion. If there are any more assertions after\nthe `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert\nthat it is falsey.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the\ndescription message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. The `Function` is the exception thrown (e.g. `Error`). `msg` is an optional description of the assertion.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown. For example, set `expected` to `/user/` to fail the test only if the string representation of the exception contains the word `user`. Any other exception would pass the test. If `expected` is omitted, any exception will fail the test. `msg` is an optional description of the assertion.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current\ntest `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up\nafter `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with\na new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to\nsomeplace else if you `htest.createStream().pipe()` to a destination stream on\nthe first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case\nthat will run for the entire process, all other test cases using `tape` will\nbe ignored.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes\nmessages to `console.log()`. By default `stream` will be a text stream of TAP\noutput, but you can get an object stream instead by setting `opts.objectMode` to\n`true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want,\nlike a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# license\n\nMIT\n","readmeFilename":"readme.markdown","gitHead":"d807af1aee2648d0830bf782daa24e27e624b925","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.0.0-next.3","_nodeVersion":"13.6.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-F4BuDAG5DXPBGAs8x6vBW4m0tLfmSFFy/3M8hq0WQPs4WwTtgTctrrJE/DOBy9vzjIFdh0qk9WeCCr57yQ3Epw==","shasum":"8bfe5d7daac086c97a34df92f715f19f21574b9a","tarball":"https://registry.npmjs.org/tape/-/tape-5.0.0-next.3.tgz","fileCount":119,"unpackedSize":183676,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeFnQQCRA9TVsSAnZWagAAAOMP/0F/b4Dd94ul2iTOW7r6\nU2DElPAqeGcqR94yJv/phFsweBBBSiaI++2rGPywT7IzG/BRvMyrz+2bGSfM\nOTnrh/HHT6HDCVmrZ0uZJFcSHh5ji3rZ+bYMyJhaWiBwq0+9mXHxQ8XSU4uE\nyFqrRgb/QZyhjC+mNQSk/4rFev5L9+x/E7mThZkyi8XObnbzahGzKBxRsx6k\nSYKoiYlKjIhgCjBvxDxCFTIipJr9rar2fjZcnndoGBwjsNQfUJ2rCDmvpIx5\nEwJ4A3mGapLl5FmZEBzkYP+A3wUlheKZf3JknnNXiTacChN0tv4AMq5gdORf\nqqDKvpCT9zEDmpn6fretGKt24na0tgm8eMzxXi23xXsBHr/cWQfyc9U4TS6n\nI1g+Do9MeyIF6kdwnQjB3hqIv95Usr4l+3opJ1wWTjvcVw8j56ZdS8Ap66H7\ncoi0kAj7bL6H5PLXejSd9aXQd9qB2pO3UFkNmfmSur9K5ZVR5qUfhudFdnYd\nhKIS0UY0VsoNCs25MAk21FB9Ocij6OtvwVOBajBJc+fH0j2YHSibumYs96KJ\nMIR2adgxzWMRo0EFAMx5jwxoYx1TfI0ZtxDwBV6b69OCt3KPhzdtPuYguE1B\nqxQ/tOT5Rn4XjjraSJF7EXrlBkVsI5gre0/Wytg3wqgG9GQJug8U92mGAro8\nBthn\r\n=c+u+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAeqI+Ekw2SZhUVxv3o4PjbOUJZRX3NdG4dbX3zz4Y3/AiEAo12FjUab7u/iVc5pcJaFhLFvjOS0pAeZX97BitSUxvg="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.0.0-next.3_1578529808480_0.11886592603458346"},"_hasShrinkwrap":false},"5.0.0-next.4":{"name":"tape","version":"5.0.0-next.4","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/":"./lib/","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.1","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.0.5","minimist":"^1.2.0","object-inspect":"^1.7.0","object.assign":"^4.1.0","resolve":"^1.14.2","resumer":"^0.0.0","string.prototype.trim":"^1.2.1","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.8.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape\n\ntap-producing test harness for node and browsers\n\n[![build status](https://secure.travis-ci.org/substack/tape.svg?branch=master)](http://travis-ci.org/substack/tape)\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files. You can run the tests by\nusual node means (`require('test-file.js')` or `node test-file.js`). You can\nalso run tests using the `tape` binary to utilize globbing, on Windows for\nexample:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the\n[`glob`](https://www.npmjs.com/package/glob) module. If you want `glob` to\nperform the expansion on a system where the shell performs such expansion, quote\nthe arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm\nthat will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one\nof the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods\nin [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have\nfinished. Tests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you\ndon't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished\nright before `tape` is about to print the test summary.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called\nautomatically after the `n`th assertion. If there are any more assertions after\nthe `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert\nthat it is falsey.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the\ndescription message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. The `Function` is the exception thrown (e.g. `Error`). `msg` is an optional description of the assertion.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown. For example, set `expected` to `/user/` to fail the test only if the string representation of the exception contains the word `user`. Any other exception would pass the test. If `expected` is omitted, any exception will fail the test. `msg` is an optional description of the assertion.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current\ntest `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up\nafter `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with\na new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to\nsomeplace else if you `htest.createStream().pipe()` to a destination stream on\nthe first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case\nthat will run for the entire process, all other test cases using `tape` will\nbe ignored.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes\nmessages to `console.log()`. By default `stream` will be a text stream of TAP\noutput, but you can get an object stream instead by setting `opts.objectMode` to\n`true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want,\nlike a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# license\n\nMIT\n","readmeFilename":"readme.markdown","gitHead":"a93a2c826776117d2d163d23cea6e92a68ff4858","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.0.0-next.4","_nodeVersion":"13.6.0","_npmVersion":"6.13.4","dist":{"integrity":"sha512-NMpUncO7y1436IlvA131riBvAqLJ5pPlT6kLrUdCVAJraRV9pFDIqDH17wUZ7b4UCH/sxf8HqVZck5OdzJyHkg==","shasum":"c3a948ce8c58ac8a988a1c4756dfbab36beb22ac","tarball":"https://registry.npmjs.org/tape/-/tape-5.0.0-next.4.tgz","fileCount":119,"unpackedSize":183696,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeI+TpCRA9TVsSAnZWagAArQkP/jghP+aJSdryECnMdlti\nJkI2XrE2NMAZlhwfwsBmhZi7IbCsD6BAY3i6dxn9bILGWEHftYSEuq8uojfD\nvdY1va9m9Ca1qesSELutki5z4h2/kJgRE2dAx4Qc/U7qUYRnMHlwDtm5peDl\n7MvO/on+uHKOp8TLJw+5+l49wfr9UwELA5XgMql6eIh+6j+DWBrp6duiFE+U\nmm+MMccJSL7htqxLm0CtRCkivDIpiv/tPuZkDlS6ac6R2Y3mq+HeCT/3KKEi\n6wfOQ3Ayy5aFu7+5YK9RYf5KwCnULwYa6HEHP2JN4X8BfGUqnihaULWFnp5b\n9uqHpOMle/LQRnHLc14FYxZwrIwkWvyXR1x0+kf2G8BUPvJRMTtJT1DyxVG5\naKeYmKuO/nUMWMmbRP6QaDU8kkPIwzgP8u3NwQGyQ45H+hHe9tjc1D3MpreE\nerwh3ImOLWhKKumQz+o7x2wySxXDVOBv2Hf1O3yJCnPzxDm54M5yy0eHA6M6\nWEF45AtfNfwSbPUp/6pGgrygIw6TtBJRoZ9YB6T+7txZcNZWq7YFHxQXGZd5\n+FZLV1Lb8WOotn1Yp7RxffV10KRO49kW9wfWKUuHGXb0dfYtKsmOHy61FQzT\n6vTO2fa9c12+LC1Tyqn/0maRJ3IaP3XNVQNa8sjgVctWQvFPpRWKcowdMrhc\n5WX4\r\n=NbSY\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDXQ5UL1waDi2/lVjdE835TQUYEmkz8DcZuKAUD7gJYsQIgPhKawdpVlY6RkcDlVlKQnk6Kt71t6gvcLsK3UjpNx8Q="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.0.0-next.4_1579410665059_0.17113468066917736"},"_hasShrinkwrap":false},"4.13.2":{"name":"tape","version":"4.13.2","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.1.1","defined":"~1.0.0","dotignore":"~0.1.2","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.6","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.0.5","minimist":"~1.2.0","object-inspect":"~1.7.0","resolve":"~1.15.1","resumer":"~0.0.0","string.prototype.trim":"~1.2.1","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.8.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"2914a7b28fab0b1e9e52fcfbba49baed5f41762f","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.13.2","_nodeVersion":"13.9.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-waWwC/OqYVE9TS6r1IynlP2sEdk4Lfo6jazlgkuNkPTHIbuG2BTABIaKdlQWwPeB6Oo4ksZ1j33Yt0NTOAlYMQ==","shasum":"eb419b9d9bc004025b1a81a5b63093e07f425629","tarball":"https://registry.npmjs.org/tape/-/tape-4.13.2.tgz","fileCount":109,"unpackedSize":180092,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeXWv6CRA9TVsSAnZWagAAy8oP/1l/g6pv1ALmyENqbHaP\nM5C4l6gNZFgveUzN2qPITCW4kdJMIneCT9ZFqZnNk8/RY1GFJYpD+FluQVb1\n2asEmF5zbvo34+ityYxekuN5hNfXtataV70bTdfoMcu79dqOnyWkT8Au5b4d\nOps6TCSvwaipWxVlkW91BvZOC+XAzp+bNpP1DsB07Z5SztzWPwc1aOL3flRy\ndGOdoSD2HKW6U+1WCL9SA7MrFjdxk/kAwjKb+59yMO9w/4tbQHeVwrZwXmny\nA+tJiX5C4pz901MebAEgD4r5mNVeC9802J9fQDDiDXSmNCtu/ENfawSVaf/L\n/olnASrQHKIsJQrB4PyN2PUK6WGKXcGIZAjtQkX4eWFeoshvw7V45nt+v78+\no0PyhxiH8gELC7U9zGxWwIgmGJIKaGhEOIyuzHa2iTsodGJVV2nLPxumfRcy\nuGdUrLoedoss0jauhg9+Ivu0KHSmDIgsHxwPt5gz/BVYTLBg2ujgb6hn+akX\ngZNmPMqal/PtWbX0Lui0qy/PlaFNnbD3OgwYR9jaTJxsa+xDcOG+zQKGtgbu\nHjvOlWW+Sw/xb4szLX9qqN1Uhs+4lO/dZBKymFPJ6xHJ245jkLA98LU6NhoW\nvk/R13L1LM6pE2vF4NTKCxGTxDA0rYDuA6l6b4gAJ/Lr+Ng6XZTA8IOrqwUe\n80JG\r\n=tVzC\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDkbV0jcbMDt/mRvZC06YLxazwzY3eGeBAvkzN4Hy1jKAIhAOAQmXBGJ1m4GmYmNVH/5CA0zGQYPaCTPBG8v7H126HD"}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.13.2_1583180793928_0.381305277940859"},"_hasShrinkwrap":false},"5.0.0-next.5":{"name":"tape","version":"5.0.0-next.5","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/":"./lib/","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.1","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.0.5","minimist":"^1.2.0","object-inspect":"^1.7.0","object-is":"^1.0.2","object.assign":"^4.1.0","resolve":"^1.15.1","resumer":"^0.0.0","string.prototype.trim":"^1.2.1","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","eslint":"^6.8.0","falafel":"^2.1.0","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"5a8034d1648fafb34959d2682aaa6b0a37fd0959","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.0.0-next.5","_nodeVersion":"13.9.0","_npmVersion":"6.13.7","dist":{"integrity":"sha512-y10lHtYALGEU4ON9H7nnxZNzKjh4C6/ilXrlxp2C7aPqRdRkrsspOMDiIq2xDdHcE3jsZ4E86GL7swaKF373TA==","shasum":"574794f4f3ea079e101876d6e85f6e9bc8a28e9c","tarball":"https://registry.npmjs.org/tape/-/tape-5.0.0-next.5.tgz","fileCount":122,"unpackedSize":207865,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeXbK7CRA9TVsSAnZWagAA3rwQAJ4RRQBEu91OjDINyste\nX5sWG4dCOB+heR1N/vT/WHuBqmZIkxmwf+x7ex6RCVXZIGr3Mb3A4ZL5az5s\nBB0cm6Cat6zCJlhocbvl3ktvXmfNASj/yCLrjM2edyhvHggbcWnTQa7RDDSX\nZ+LMiCa8lrMcI8NdjyvDdUiChufhx53IWzluznU5+SM1TNQjLqtVC21Nfhb2\newHNARpXNFXCrVocuNgklb8oZkeNSvknwnrpOCPXdSuzwSctHJNXQU8jIvTS\nxt4hekJ9gOG/W6HquDYgN7CsAZ23rHk/6iVigPizW8jGGW/OVwcojf2+wUOx\nYhvG8qKBF1ZMLo/rUK/yg+Ub0aqfHnA9OpeTCaG+wdpq3xzB+MqNuL0ZJ+g5\nJJka872Yiu+MZqLOvsZDamtWFv8jjcn8SoVCY4HAYiL0+Vco73Hgp91JVmGU\ncbarYkFvHZiMxnFOVe81x0JAJUopWlR3GiE5MLSmRo8T6KOFPAFGPPc+ygNM\nnffeyq04fjM1oqk1rdkTsDbn0VSd3No8Xv+/ZLj/qCwYnYY+fah0VwDjZ8gp\nYRWoqanscAMLbaP3XRJwCO8r/cfWn/53wA0pqga6xID9pJzoehgi/V7nUxXb\nOm3B6lqJS2893jMmVeERoQ3JAuzmtc6y2EHzX1Li2DsrAHwDCJNaXWempfAO\nJL6S\r\n=DhjA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICCZ5c/AO+UvqGZJbQMjy14E72C0udRs//YsHMKR3SdOAiEAtxzspfc4fzteiCWjhVFxYl5D0h4pgvV/qRk80/x+u4s="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.0.0-next.5_1583198907166_0.3426990733179589"},"_hasShrinkwrap":false},"5.0.0":{"name":"tape","version":"5.0.0","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.3","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.0.5","minimist":"^1.2.5","object-inspect":"^1.7.0","object-is":"^1.1.2","object.assign":"^4.1.0","resolve":"^1.17.0","resumer":"^0.0.0","string.prototype.trim":"^1.2.1","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","eslint":"^6.8.0","falafel":"^2.2.4","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"cd81a404d7a8308b9aad50d2aa2c92e330351d1e","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.0.0","_nodeVersion":"14.0.0","_npmVersion":"6.14.4","dist":{"integrity":"sha512-+fi4WiHuvxpKL6GpcvnG5PXfzopgw9h1JM9CJdpEPAbyU3r3VjRgt059fD6Up2/u6BQXmmxKmUMm6mXQP+HS3w==","shasum":"ead4b82317d094dfaa51b1dd68b66364a51d093e","tarball":"https://registry.npmjs.org/tape/-/tape-5.0.0.tgz","fileCount":122,"unpackedSize":208141,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeo2F8CRA9TVsSAnZWagAAR1IP/js8xbn/P45QvcywTTn3\nEIWxsN5BGGTHqM0KbpNB5vzcd4bUKO07b/JGMDOwN2PlJMU1sKO52infvslk\n1ceBQ50cYdUmirV7F2XSkMgCsXybdQMQmeYbSu/Xx3F5ObZIWU18MlbXUVOb\nKc9YciWHL8nOfwGS30W80N+PIOQttJSiPFVSwqg/UYkhYOYsb+sLoa7Mx2YO\nHSh1A/bCGMQyjv/0gai/GoH6fiP7HwXaspUBVTYwR35S8h07XS0u2lKJ8W05\nx8bJnRAcTzGHnRHzvRhCwYeBLnkxfjuKisKOkQy3lLIj1oJkL6zZwFYPvku9\nOD8jFcXMyNIKhrlFpL64tTpm8BuFT4TNCcZWkPy7CmPMjA5FwmKOZmLGgyYN\nDeFEmeBkelyOUvO/LjkPWsKj40o6x/1eWHbtcCf+FokqqRVjCe+I+JJ2PNDX\n3lZYI++wrL1H6ve0Hvoexa6GYa3axYPdqG6+tGjrMZO3BmoFBSM3PwTkvuIo\nVmlJWMWz24ZNdHc6bGQPN1aIU9/QrqXatVBAzGyju7kQllMPk8mrHh+lhvQw\nO9WN+ARVbNwuuVTZGeygTO6bUChEZBcWzOy9mY/mnccgBdi3Gsa/wDRNO5/M\nnJya0Yf9lgLUf4sVO4GS+FlWX0LiYMfm4PSamMOG/KJM48uwkzTSb+b2aYsb\n31gg\r\n=yDxl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGriq+zJGMv5/IsPTjhq43tf3G/tIVnKFfaUqGIaUR0NAiEAhg3yYZqREO8Y8YuYWq0t5OZSCafkoREvSihNzaAQb30="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.0.0_1587765628349_0.4062848702392965"},"_hasShrinkwrap":false},"4.13.3":{"name":"tape","version":"4.13.3","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"~1.1.1","defined":"~1.0.0","dotignore":"~0.1.2","for-each":"~0.3.3","function-bind":"~1.1.1","glob":"~7.1.6","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.0.5","minimist":"~1.2.5","object-inspect":"~1.7.0","resolve":"~1.17.0","resumer":"~0.0.0","string.prototype.trim":"~1.2.1","through":"~2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","eslint":"^7.1.0","falafel":"^2.2.4","js-yaml":"^3.14.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint .","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape\n\ntap-producing test harness for node and browsers\n\n[![browser support](https://ci.testling.com/substack/tape.png)](http://ci.testling.com/substack/tape)\n\n[![build status](https://secure.travis-ci.org/substack/tape.svg?branch=master)](http://travis-ci.org/substack/tape)\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files. You can run the tests by\nusual node means (`require('test-file.js')` or `node test-file.js`). You can\nalso run tests using the `tape` binary to utilize globbing, on Windows for\nexample:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the\n[`glob`](https://www.npmjs.com/package/glob) module. If you want `glob` to\nperform the expansion on a system where the shell performs such expansion, quote\nthe arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm\nthat will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one\nof the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods\nin [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have\nfinished. Tests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you\ndon't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished\nright before `tape` is about to print the test summary.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called\nautomatically after the `n`th assertion. If there are any more assertions after\nthe `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert\nthat it is falsey.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the\ndescription message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. The `Function` is the exception thrown (e.g. `Error`). `msg` is an optional description of the assertion.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown. For example, set `expected` to `/user/` to fail the test only if the string representation of the exception contains the word `user`. Any other exception would pass the test. If `expected` is omitted, any exception will fail the test. `msg` is an optional description of the assertion.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current\ntest `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up\nafter `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with\na new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to\nsomeplace else if you `htest.createStream().pipe()` to a destination stream on\nthe first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case\nthat will run for the entire process, all other test cases using `tape` will\nbe ignored.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes\nmessages to `console.log()`. By default `stream` will be a text stream of TAP\noutput, but you can get an object stream instead by setting `opts.objectMode` to\n`true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want,\nlike a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# license\n\nMIT\n","readmeFilename":"readme.markdown","gitHead":"a8612306bb8d8a292b8f1c4163e47bd27deaf470","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.13.3","_nodeVersion":"14.3.0","_npmVersion":"6.14.5","dist":{"integrity":"sha512-0/Y20PwRIUkQcTCSi4AASs+OANZZwqPKaipGCEwp10dQMipVvSZwUUCi01Y/OklIGyHKFhIcjock+DKnBfLAFw==","shasum":"51b3d91c83668c7a45b1a594b607dee0a0b46278","tarball":"https://registry.npmjs.org/tape/-/tape-4.13.3.tgz","fileCount":110,"unpackedSize":183350,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeyz3BCRA9TVsSAnZWagAAPokP/RLZp6Kh8pSkEBBrYlVq\n/cBuhoQXGYLIAi6J069AqF0x/ZYtYgk853uHqb3fPFjOg37k7enjRLnlTUrN\n/TSWBPe+rf+aYtR+UU6U9iNQDvRGFPog2Te4MomIkf41/P4sz3hH0N6KCJqn\njKjV9f6yDtTL18yEEgpmqNAL0byXKft0VQ+CvaR04alBkFSPQ6dXOWG0N5Cn\nFdhIQPFycXDESPo3Xr2heZ0RRA6L+EaIsRY1f39mO9fdYqOulP2uamRv+8YZ\nKxCgbN67EahEQftbGAcKvAlKZTgLD5BpNcGiCzaiocTCo/dHPTqnwjqLilti\nlgiRYlf26ClI09ToiWw+8EadUa7VxjEtdHsPqoUmm4v+4m2N+7/+EU+T9RKy\nIIaOUguHvUx6uj9tDX8+ja9QvuzRoQhU7JKzaKtleKLIjISUAQYKL0M59rzt\njR47RTTlVCJzfY72bXEVKRPS2I3nTwVgCpel+GPCCNa2NTX7UbAWgjaBI/uz\nwMfhAPtDoP8mdyCwf2v9U5yWXFRYV4Un+drJBEhG+ZHm4d571NOSouztcuVL\nKg6OAcPV2Ej9W2+yFmEZXbJbIxB+b93FVQ3EaKcNoN3u8eiGzgPbk/tK7OPP\nSjp0vlHVC2NifQMFhGRPOMBa4fT4gPNKzHjAb7x2XnvflOSgkp125i39BONV\nax7Q\r\n=AfKo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHn/KlA3zmsThyTTl8oD6lZApW4jcB+CjjsJpXbVBSm/AiEA/qcZtwLzp4PU7uHc69asFwQRL4To1OI7f9maaLcrE6g="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.13.3_1590377920785_0.5514489179759727"},"_hasShrinkwrap":false},"5.0.1":{"name":"tape","version":"5.0.1","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.3","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.0.5","minimist":"^1.2.5","object-inspect":"^1.7.0","object-is":"^1.1.2","object.assign":"^4.1.0","resolve":"^1.17.0","resumer":"^0.0.0","string.prototype.trim":"^1.2.1","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","eslint":"^7.0.0","falafel":"^2.2.4","js-yaml":"^3.13.1","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"ce9a28211a2162d6615019a7d7909f9f25d7130c","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.0.1","_nodeVersion":"14.3.0","_npmVersion":"6.14.5","dist":{"integrity":"sha512-wVsOl2shKPcjdJdc8a+PwacvrOdJZJ57cLUXlxW4TQ2R6aihXwG0m0bKm4mA4wjtQNTaLMCrYNEb4f9fjHKUYQ==","shasum":"0d70ce90a586387c4efda4393e72872672a416a3","tarball":"https://registry.npmjs.org/tape/-/tape-5.0.1.tgz","fileCount":123,"unpackedSize":211231,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJey0QGCRA9TVsSAnZWagAAF8QP/0+gxoiWYKluC+wZN2kr\nCrT3SS6IX9B7hqTAekMcRxAclqLuKUkJzsu4JcVGqLOsH2QIOFKiyfXwD2Jt\ngmuE+Q5HkNoJHH8FhZdYvxZ35LiHM2pQkVGIt72GjLUeSmdbSnkvKnAyVq0a\npBzW0KwlEGnZwjvWZXujnQsgN2afJLWReSmnUTYJuROP0IUVXNb7gm9mvEFx\n8jkC9szfAtiw6xPq0MoivNx7zpJH3FPHS4f1okQEXJ6rkVTwVvd0/WYVGwPZ\nThKAxMgttdGuMt0r1ApQTIFLSnXd5xLIP8sbAoijWVsT8n14zQYi8xlPnbFM\nkIYsgNxn/7Vsqb0y1Cbx+TNy+RRlQehlZmGjKBQJ+0n3MiUJIMC1JlhhxZSi\nJq56fhWAqm21IUsSnqS59k3NJF6P1JClpoQ5EIrYEvKULAKdN3JN8lu3TZch\ndHIgGEt3O16bKF5oApEDtt43nFH5cZKN85jKd3BhgGoeb7BtYERZvDpIqnlC\npsvl8MT/V3TvGhwJKxadNaksKrbLvMmda6cVcVRi9nfSmSwrYaq0WgFCCTMz\niSNwunRwggzMrLLqZdgmYD27usDh6UrgjgBC+Z9s4U3j/oBbN/v2b96g68MA\nmYBY+e4uo2ktwKo+Y/T9UKnVQbYRoXehP04fP1VWl/Vi+Fwe9QGKs26743Yc\nMz5y\r\n=++zS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE6xsHAApAAzQhHxYtctUntvRHvDYPKvqE+3ljaBpmPRAiBDaEkekQDfoSK3i2/RdksRxGn3UTU/nu6wRst3yXWMjA=="}]},"maintainers":[{"email":"d@domenic.me","name":"domenic"},{"email":"ljharb@gmail.com","name":"ljharb"},{"email":"raynos2@gmail.com","name":"raynos"},{"email":"substack@gmail.com","name":"substack"}],"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.0.1_1590379525811_0.521413760387611"},"_hasShrinkwrap":false},"5.1.0":{"name":"tape","version":"5.1.0","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","function-bind":"^1.1.1","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.1.1","minimist":"^1.2.5","object-inspect":"^1.9.0","object-is":"^1.1.4","object.assign":"^4.1.2","resolve":"^1.19.0","resumer":"^0.0.0","string.prototype.trim":"^1.2.3","through":"^2.3.8"},"devDependencies":{"concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","eslint":"^7.16.0","falafel":"^2.2.4","js-yaml":"^3.14.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","tests-only":"tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"6c0625f1c7d7d69411404e3ce0aacb994b383697","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.1.0","_nodeVersion":"14.15.3","_npmVersion":"6.14.9","dist":{"integrity":"sha512-3+/QreLoHRe2QhjkIQ6vSjwTRnC3iMQSg943K9EP3rHhY6MWlLxNw/0h46B6DYz5/SSI4GmU1Dr5HNDAlFLhtQ==","shasum":"3ae5f8ac5f39dc7d74c70d1d680faa2d4720726b","tarball":"https://registry.npmjs.org/tape/-/tape-5.1.0.tgz","fileCount":123,"unpackedSize":211896,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf649hCRA9TVsSAnZWagAAhPIP/iwdT/tqOq4dOPWc2RYq\nzSHLf0aB5iHMhmr0LSNyqbdupeJJlpEVtiCcXiNHSCVPKnrCI3m0IayFXoe7\n3A5Wm4MnCaTJdNuWDRB7X6jayzCjxbrt7KDZrhjFNoRApWdvXCdJa0dYvM6o\nalrLz6DB+1Pr0tFvHI+ASqBbTQerreL4f1c9+/iT7JDIcuLFM4dS2eIIgpLR\nWI6D89GpDmXiudzJn5RKB9VANUrImOTLaUTje3Luouk+sxla0tKO9XaoweL9\nsWQUT2zVH2mJE/+yWfbKttqJfoR9pawiiI0q83BKeQaEqvwdkaDsUTp/Mws5\naAoNeHkv/gqYgKQ3R5yCigLvFp3VsLAABtbgA3VSVIj7AwSz+PB/Lv0d4FzR\nV2SJ9HmDRElpKl04ZRFRb5agEbgri6x8alpGZT5OhOyu3KL9gYgAVdTPRoaa\nxK8/YhA4pH3WEh3kT1JspxFxcDuU0yUYGKGl1iS4qCaphinEUinIVumfKKa0\npJOM7MUMcccg+69qgcq4+AE6ZdKyffTjeIUeMF+qzOae0QTHHvQalCo54hp+\nlAWkYEu3Q7enpPHd7M0pnDhgVHF+1qaJ06S2ixMYy8czqYF0nFrQX1B+FhvA\nt17GOeG2GvSIckZP1GjE+HK+XE2m3fzEKDdWL89utwKlydSxCLpwcsNzhd/f\noj5a\r\n=5jXI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDtxJ+CoUW0b+URRGYX2TzdswibsAVMNsUsg3XfrEouPgIhAKDn9AKRHubVs38fH0RELnGjBRsHkIHkodHzvQ/zCPsW"}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.1.0_1609273185225_0.6296277525736846"},"_hasShrinkwrap":false},"5.1.1":{"name":"tape","version":"5.1.1","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"^1.0.0","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.1.1","minimist":"^1.2.5","object-inspect":"^1.9.0","object-is":"^1.1.4","object.assign":"^4.1.2","resolve":"^1.19.0","resumer":"^0.0.0","string.prototype.trim":"^1.2.3","through":"^2.3.8"},"devDependencies":{"aud":"^1.1.3","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","eslint":"^7.16.0","falafel":"^2.2.4","js-yaml":"^3.14.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"3b924b0f48410fda1102929c9aa577fd3266f61f","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.1.1","_nodeVersion":"14.15.3","_npmVersion":"6.14.9","dist":{"integrity":"sha512-ujhT+ZJPqSGY9Le02mIGBnyWo7Ks05FEGS9PnlqECr3sM3KyV4CSCXAvSBJKMN+t+aZYLKEFUEo0l4wFJMhppQ==","shasum":"51e6fc7af0c15cf39faa6aac3d0a1d2ca6fd4744","tarball":"https://registry.npmjs.org/tape/-/tape-5.1.1.tgz","fileCount":125,"unpackedSize":217035,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf85onCRA9TVsSAnZWagAAhzAQAKRvko5E6AGe/OezR3Ut\nz+CfZvcx5GJjQou4d1V9+eL7eOmDDNk6Q1ArgHG28SuRy6b/dcBfnJPrFoiY\nbnb98bSwwAFRfkR5eLoRy9j2h+ZQqjswvL4WG12ypqtzg6rMDQzCDssmSBQ0\nD3n/SkS3enp8oQUgJ1+uX8e0PsQDlc2NRMGu+p817Pb2R9VJaTYQd3Ebf8BQ\nVZaOJuGv7DFt+1mgDbNWSHWGQEeHpAxfyU1j0tED2IXWIXlML+DkiTQr0Vlk\nl4kntYZav3UOoIKIpIWda2bQ+xjxsg9INKxnTcMpcvQFqVLIW2zRokLXgMzg\n+Y2/zizgo2qe7i8aVAOdJZtm2BAw6bbaiZEb+F7E2rwvzD7DgtKV7GKFeOa6\ntKwA5f6sMdsK6QIw2FhrpORoCEb2GXJQ84MCVf/w3RWTjk8rXCEbIaxJWLdr\nrcJ9oOW7La9cwz/KT8sdHmK49PslGLr9cN31e/D7pFxyA5N/q/2PgzWnJ/sq\n3COpfhiXchjj0aOc6zoLkrTxHngfgaHc6/pGD4sxpElM4xwdbphAg9AaZvFu\nP5zco8OyITw9ZFo+kPfd6vKo3bEYAQgUUA5T5G2ij+aJyDgQnCIM7epOoICN\nKUFvArtc+7+qsCznlxaPGsL6IB5qsk74aDAT+eNDfbSKimAzEZwBAwRmMNT6\n1Uit\r\n=4kFU\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICV5MWRVQSYVYkCo+ltDvPAO+SeYrAgD/8O7YNXdB6bFAiEAq01rE7ToF3zBxMvVi2kFXeruRzJUVhB9z1bFvogzSbI="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.1.1_1609800230520_0.0529137152499759"},"_hasShrinkwrap":false},"5.2.0":{"name":"tape","version":"5.2.0","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.1.2","minimist":"^1.2.5","object-inspect":"^1.9.0","object-is":"^1.1.4","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.3","through":"^2.3.8"},"devDependencies":{"array.prototype.flatmap":"^1.2.4","aud":"^1.1.4","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^7.20.0","falafel":"^2.2.4","js-yaml":"^3.14.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"50751dbcde3e06c017a3a677499ac0a24128b6e9","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.2.0","_nodeVersion":"14.15.5","_npmVersion":"6.14.11","dist":{"integrity":"sha512-J7stlwNrBEpHlZvbvPEAFvMmqIy79kMYvXiyekl5w6O7C2HF63bFKi8su70mdUtZZvNMm7EbIzLyI+fk6U9Ntg==","shasum":"6e73979c161de1f6da5350f346403bb30120df9b","tarball":"https://registry.npmjs.org/tape/-/tape-5.2.0.tgz","fileCount":126,"unpackedSize":230743,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgMX4dCRA9TVsSAnZWagAA5ZgP+wT+YK14XYFOG+aHlIHh\n0KHpZuGnJ6lOuVm6+Qj4+UGmq1BPLezpqmTwNgPTYNv/903v1b1R/BL+AEUb\nj6cAAxoq7pKdjNmPjNHf4hm9nQ1M86S2JyMQ5ehkhcbFCFPtU1Z4qZwIQjt7\nDD4FfhlXGEFtKeqjnlCc4aEJkz5uUbbXt6cqM/uPKlX9ecMaaPOM+TUa4jZo\nW7U3cgWle7d6zFJwiSDB/e+YOjDx+KFlHvRa251sfwC9QfDgp6KNNyz6N8mD\nNWFfsJ0vp9CseN48UlxlA2ISPF5xo99aoH2FnsyxNgVIfdQ940+mdmdUc1Mf\nTMZdqIqeprjH29KE01qU7l4x17iDN7BszqJWXBikrx72pXXrSGzuICc9DkTj\nZl0TgUvMj8NCsI/ka/P+uUxC10MmixXZPiO+jIXBYv+6qEhuLwM5KFJ0jwY/\n/aTC0FTyutT7xk13JHnKFNfkS5rE/KNw57f2bf+cdBsW/h5L8Ap/JlpBV3Du\n0D75AK7WmP5y1yPZZWaYwjaiO6bgdkN8OGCl1fbdEfFLTsGCOV+upLG975FP\n9tkoNBUUJrdXuV/+XJp2zAYo4AqqHC8HyWlo6tauo75Aia6TqO7EnzI/9SJ0\nBfXkFFAlnQmCzXwv64F6O6Q25h3H6MIfAH2ORRatyEdGwa4F5YuRM38X22pv\nYLjO\r\n=oTCl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCbowzMTUqMHjo/E1s4QOY/aob8vxWvrUfc0Z0hk2h3ugIgGi8Y0DOR2gIWS3P/GAxfJWrNPWpiLsExAWZJrXAVAlw="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.2.0_1613856285135_0.6772930804453396"},"_hasShrinkwrap":false},"5.2.1":{"name":"tape","version":"5.2.1","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.1.2","minimist":"^1.2.5","object-inspect":"^1.9.0","object-is":"^1.1.5","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.4","through":"^2.3.8"},"devDependencies":{"array.prototype.flatmap":"^1.2.4","aud":"^1.1.4","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^7.20.0","falafel":"^2.2.4","js-yaml":"^3.14.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"1642ae25801568909c840856315080f22d6cca80","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.2.1","_nodeVersion":"15.10.0","_npmVersion":"7.5.6","dist":{"integrity":"sha512-pjrC4M7OUCndgKNJ9AEy/WCfOd8Voux6pD/WlzRi0855ZZa66nPFlisCtPixA5Phh/V/tu6v8Q1cNRND9AcYMA==","shasum":"4dde2c2189ba4f8228adfbcb5cb7037601fea593","tarball":"https://registry.npmjs.org/tape/-/tape-5.2.1.tgz","fileCount":126,"unpackedSize":232005,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOuaACRA9TVsSAnZWagAA3LQP/3SdY5XozLjAsQWAuhqt\najenmeEjuN/+E5LhXdMI7AKP51NZS8CqFYn7ED2Ua7GxN7LDIPM/kkbkqthF\n8vdwax+9OBNHHfFfhHa2kHbF0wBYMsiGx2xY7yHnqHek+CN8jivefxEM8upl\nof/w2Jan6HrYPfaFU5tRVxJR/m36O0jW/sOvzGaScXgbrlZWwLbtCg9cACNs\nXzp8cwsfNmALVuTzp3ncXg5ZgHyyLY0n61JWuYIpwYpeNZgwC4+POTry/0B0\n9I5r5L0oMOmQhB33niy5UevkldDZtZur+T4lz53OXNwKCwV7icws932zIxxQ\n66wipmVCidBV8AV1WtUlldvEWAghsC6wZ6AdAMZBgPJJ7UNrqCTU/pk6LyTq\n2VfE8FPTYhre1W0LDuz/0uZs4VgPtIYNhuO5w2mv+7X2EheS732jrwY9eFc1\n+H2mOwUXnQUe/KoJLR7psUjehmWsAJJnOO2LtLKrb6kITRo2yO0pO+lnbH4+\n2PUcDOZIQDPUK1b/rigskF5bdmtZDIYRzWiL0NNknwkRvbAJU42A4v0vksHs\nqc4HUfNL2+jOq68fi4a68fJH6/SG4pebKcqgxahDna1IjlRi8fhU59PmRwli\nk2ZgfxMFW4WYy653ENjB9yC9ny3Wz/SuTSR5jEKVL1l7u2tu+xyujrOdTTA9\nWISd\r\n=uNM6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG7KQW4O1lPqYN3rpIQdHtg64149VmI7gsRaBH8EMkJRAiAga1lxE6H0ER24rs4znGKMCDW2QOxKZnV6Dgbphzatzw=="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.2.1_1614472831506_0.8256853447039587"},"_hasShrinkwrap":false},"5.2.2":{"name":"tape","version":"5.2.2","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","glob":"^7.1.6","has":"^1.0.3","inherits":"^2.0.4","is-regex":"^1.1.2","minimist":"^1.2.5","object-inspect":"^1.9.0","object-is":"^1.1.5","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.4","through":"^2.3.8"},"devDependencies":{"array.prototype.flatmap":"^1.2.4","aud":"^1.1.4","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^7.20.0","falafel":"^2.2.4","js-yaml":"^3.14.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"0e8f19d784042eb703970f03a04de2d3ae7789d2","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.2.2","_nodeVersion":"15.10.0","_npmVersion":"7.5.6","dist":{"integrity":"sha512-grXrzPC1ly2kyTMKdqxh5GiLpb0BpNctCuecTB0psHX4Gu0nc+uxWR4xKjTh/4CfQlH4zhvTM2/EXmHXp6v/uA==","shasum":"a98475ecf30aa0ed2a89c36439bb9438d24d2184","tarball":"https://registry.npmjs.org/tape/-/tape-5.2.2.tgz","fileCount":126,"unpackedSize":232105,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgP917CRA9TVsSAnZWagAAQNIP/Rplf8Npqk225p+HbRKG\nyWN09+q8b0+CJCulX9If91prsuluGM0ailm8DnwkzX7+nb0EKFP8D1zDSBhB\nuT7fXHr3B1y3oH8bhoqpD6A/5QjWpY3R0T30rwkP9iANskL0/DaHqvku4HnZ\ncwvB8XniBJ7dAfZ4Gl3YF+gvlqeDcGtzHxjQcGrqqOzGDcrWkvS0wh0bzDhB\nb6jcu+aqG306ZjWk6gp7IWc83l992IPvWmK4Vb854csCd6Zm6d7Qy1teHCpP\nzf4LLSDztgglUXvKez/CDxXf460cFi6w/uAowabgJ9j4BXxE7kkMjI5oQIuE\nf2o2Xmr2ROpGDDyfeyHn5OrniBxTfrwUto3hhpMGhwzcxRwI4b4Dov6f7F4F\nBlmiHkd/QYiLrqrDg/hSf5CJFuKJJQtUXPoQqpe0rYf97z+oOmQ03h4IrT4C\ngP6PYIlMT1UKW8/mLToMU+UwBltUfJC2uqrietFl49MnSeOzJ0FhJbaE0MVJ\ncZQeO86mkdUBsIVUPk2MU7f3ZcG33dUpP51+aPkcJTQ3Fkd8cXBmghuq+tUn\nhLbxfRdbTVapedmHsYebTjSsRUPRrPzzKEQKpnOGh3MCiZWJjCVUM80j19EN\niDl2aCBUGmnmKqgueEwIGCitMDs2pdET2iNtbpqh7upUZR/sh250PQ0TRiph\n10rK\r\n=Ti01\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAP+lBymp6IdrW3ubaW13p/fjuW24ghuTcNXnijOlfrEAiBpScRcQwDn8vezM8gBcUy5PyFBazZnAxnJFhU0+dQKAQ=="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.2.2_1614798202919_0.7878066622062732"},"_hasShrinkwrap":false},"5.3.0":{"name":"tape","version":"5.3.0","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.1.7","has":"^1.0.3","has-dynamic-import":"^2.0.0","inherits":"^2.0.4","is-regex":"^1.1.3","minimist":"^1.2.5","object-inspect":"^1.11.0","object-is":"^1.1.5","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.4","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^17.6.0","array.prototype.flatmap":"^1.2.4","aud":"^1.1.5","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^7.31.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^1.1.4","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"91ac45ef7fd5d2cd8bf59a15ea4d90de9f0b8349","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.3.0","_nodeVersion":"16.5.0","_npmVersion":"7.19.1","dist":{"integrity":"sha512-C4MJ44uuvFail8XhZD6D2j2u1+lar6KMkEdtJBApkC/5Hfk99OvyRcQFwiHWZLKwvxnEDeXBoTRw53p1o3Wgxw==","shasum":"09e40130162b7f935d5d5c9b48cc7a81b1b05706","tarball":"https://registry.npmjs.org/tape/-/tape-5.3.0.tgz","fileCount":144,"unpackedSize":247157,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg/0VtCRA9TVsSAnZWagAAHacP/iCku4spE0w5gBXRAoSO\ncfFL9YHQXY0uNGJQv1tjRf7224u0tZV8pS0PTctT/8u0JE+vlD2F1+Ee4yDQ\n0xWP/+0Wc/ZU9CMWdAagetjirip+5TG5UbKRkXRQdKDegX4iAJ+Xf8QAoY2T\nFv4+cn1th8kxTm0H2f7abiG9RSdr3GJ7oA58PhO67fjCJNDjVJr4tcCDnGlQ\nzct7HKzG7EFUog48oU+WG4bw5+OVGj56TXtJEoi7IFH5Fd0xSbmvL80MbwxG\nmQNG7etgdjv1j+DTNJm0Nlo7oRVtr+q8s38EiQbUYFz1J5BzqW8a0oeDOCCi\necYS5/XvKv5FeNIDByCKfIke3eUzWtDcTOSgwibl3vhdyFtOXFD3OmVW00DQ\nMXtHZV2itEgDb1I3lSMXzaXedkweN8h/C93G/z/Nm1r3Yw2L1Bzsl3DIfal5\nTntuypWIwsGikC2OWfkMSfslocAQCWcULnspeHwRih0OXF7nyqPV3VXBchOs\nzLWcQk8hLoprzFeWY21Picwi4s4x6yopm2rA2uTOboZuj6d18GB7qZstBkL7\nH49YOgbYyprg2IzIlwvtaYuaw1dYwE3wbdkZEBGRuYhZMRUHm4SOes/pR3Ah\n3MbHvG4MIthL3kN7ovM4nE61CUYPdq2dmICzpoSDDhRWnYP1LEdQMZLSnT/O\n1BF0\r\n=kopI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD0/I2WNHl9s9idblxRdNlF1lyjMm5ZrUPRLcmiIbBOBgIhAPgYsmc6qq/5AR3chW3tOV/HzhGeISBYS0jmxj7ztQ+K"}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.3.0_1627342189166_0.19616982675760353"},"_hasShrinkwrap":false},"4.14.0":{"name":"tape","version":"4.14.0","description":"tap-producing test harness for node and browsers","main":"index.js","bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"~1.0.2","deep-equal":"~1.1.1","defined":"~1.0.0","dotignore":"~0.1.2","for-each":"~0.3.3","glob":"~7.1.7","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.1.3","minimist":"~1.2.5","object-inspect":"~1.11.0","resolve":"~1.20.0","resumer":"~0.0.0","string.prototype.trim":"~1.2.4","through":"~2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^17.6.0","array.prototype.flatmap":"^1.2.4","aud":"^1.1.5","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^7.31.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^1.1.4","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check","lint":"eslint . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape\n\ntap-producing test harness for node and browsers\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files. You can run the tests by\nusual node means (`require('test-file.js')` or `node test-file.js`). You can\nalso run tests using the `tape` binary to utilize globbing, on Windows for\nexample:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the\n[`glob`](https://www.npmjs.com/package/glob) module. If you want `glob` to\nperform the expansion on a system where the shell performs such expansion, quote\nthe arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm\nthat will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one\nof the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n- Describe blocks with https://github.com/mattriley/tape-describe\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods\nin [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have\nfinished. Tests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you\ndon't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.teardown(cb)\n\nRegister a callback to run after the individual test has completed. Multiple registered teardown callbacks will run in order. Useful for undoing side effects, closing network connections, etc.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished\nright before `tape` is about to print the test summary.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called\nautomatically after the `n`th assertion. If there are any more assertions after\nthe `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert\nthat it is falsey.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the\ndescription message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using\n[node's deepEqual() algorithm](https://github.com/substack/node-deep-equal)\nwith loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp`, `Function`, or `Object`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will pass only if the string representation of the exception contains the word `user`. Any other exception will result in a failed test. The `Function` is the exception thrown (e.g. `Error`). `Object` in this case corresponds to a so-called validation object, in which each property is tested for strict deep equality. As an example, see the following two tests--each passes a validation object to `t.throws()` as the second parameter. The first test will pass, because all property values in the actual error object are deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = true;\n\n    // Passing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true\n        },\n        \"Test message.\"\n    );\n```\nThis next test will fail, because all property values in the actual error object are _not_ deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = \"true\";\n\n    // Failing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true // This is not deeply strictly equal to err.check.\n        },\n        \"Test message.\"\n    );\n```\n\nThis is very similar to how Node's `assert.throws()` method tests validation objects (please see the [Node _assert.throws()_ documentation](https://nodejs.org/api/assert.html#assert_assert_throws_fn_error_message) for more information).\n\nIf `expected` is not of type `RegExp`, `Function`, or `Object`, or omitted entirely, any exception will result in a passed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.throws(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown. For example, set `expected` to `/user/` to fail the test only if the string representation of the exception contains the word `user`. Any other exception would pass the test. If `expected` is omitted, any exception will fail the test. `msg` is an optional description of the assertion.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current\ntest `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up\nafter `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will throw (not just fail) when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with\na new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to\nsomeplace else if you `htest.createStream().pipe()` to a destination stream on\nthe first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case\nthat will run for the entire process, all other test cases using `tape` will\nbe ignored.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes\nmessages to `console.log()`. By default `stream` will be a text stream of TAP\noutput, but you can get an object stream instead by setting `opts.objectMode` to\n`true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want,\nlike a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\nA convenient alternative to achieve the same:\n```js\n// report.js\nvar test = require('tape');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row)) // for example\n});\n```\nand then:\n```sh\n$ tape -r ./report.js **/*.test.js\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# license\n\nMIT\n\n[codecov-image]: https://codecov.io/gh/substack/tape/branch/master/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/substack/tape/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/substack/tape\n[actions-url]: https://github.com/substack/tape/actions\n","readmeFilename":"readme.markdown","gitHead":"af5b2f2225cbef6fb7d22533bc77796096ac5012","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.14.0","_nodeVersion":"16.5.0","_npmVersion":"7.19.1","dist":{"integrity":"sha512-z0+WrUUJuG6wIdWrl4W3rTte2CR26G6qcPOj3w1hfRdcmhF3kHBhOBW9VHsPVAkz08ZmGzp7phVpDupbLzrYKQ==","shasum":"e4d46097e129817175b90925f2385f6b1bcfa826","tarball":"https://registry.npmjs.org/tape/-/tape-4.14.0.tgz","fileCount":114,"unpackedSize":201771,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhAOA9CRA9TVsSAnZWagAAn3IP/0lJqEy7NoAwEn22CL/b\nEYkDNuZfcNGBepapp6Uuj55OW/IvGX9viIV1gdm/i10Sq/fz3YL/ovELqKGE\nM1qU8WFrGbQGdw7r7bsC+JIETh0GacJdgT+Jht3PhRUYq7XaQSiFHDZHcXHN\nJhurMQTNmQaOzTVcNuzs4i0295RsEg6NxlATiA7MlrRl66KXwho2ASTG9UAj\ni72IxA7Ob1NL/WOViDUQ93o+qx1Ihi8Zi9pnTm8DbdKDsn1VyJOL/kkN9ULQ\niD5HpakDmTvjsTDgLMo5AVPtZK9XR6+roeV7cfK0wj5+sOGOt0qS8YDlD6df\nVamF21Q1UyqCc9Zpj8B/FkGzEiEuXkqLg32jT7zi4j+vTcSG//4WNby+H7X2\n9B3RgN64KN8MXWZmAJ5ufSQwUiLqKJSJExr4SkojPUckT6j4ppPCKNFi4ySf\nmA/y31e0IExYg43kVZNtMkl9y6AN2o6ZrQ+tWn9a0+IfPmz2hKfeU372bIWz\nW6F538I42by90Kls0fOK3pSEiYJPDMIFT4uKMK7yMdivZEoVDMPne/5Q7oSU\nVO22X9OymyAV/xdVM3rIpeH8jr51QIJwloWfIJMAnOjWMJvGh7Dx8kinQIPT\ngTr2icG0DEk27vye4L95wvgEZtGG/USW8gyrYGG7zkBg4d6F/+K/TJ81lmvI\nInfg\r\n=extV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCC6pt6Tf0tQq5Q8xDqWMpF8d4Shx3+rU9jdWkZw2QSZgIgHoHt5vNT7aymuF6nLu5e+qtkAgVFcfEqqvUSHx4jaF8="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.14.0_1627447357593_0.09208231982221338"},"_hasShrinkwrap":false},"5.3.1":{"name":"tape","version":"5.3.1","description":"tap-producing test harness for node and browsers","main":"index.js","exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.1.7","has":"^1.0.3","has-dynamic-import":"^2.0.0","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.5","object-inspect":"^1.11.0","object-is":"^1.1.5","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.4","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^17.6.0","array.prototype.flatmap":"^1.2.4","aud":"^1.1.5","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^7.32.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^1.1.4","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"5a5a574d7b07c2c1bebda1c8cb74af9d906d178b","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.3.1","_nodeVersion":"16.6.1","_npmVersion":"7.20.3","dist":{"integrity":"sha512-Mj3h+/dgfI2xct4kTpzqZaRxhhglXcMg//xGTbB0AQisfiOYa6ZBNQIgv46xi1MqbgthuNLSS1SAySDZsb7MMA==","shasum":"f0b0a0da35973fdb8767238ee94e943edd1ba0d5","tarball":"https://registry.npmjs.org/tape/-/tape-5.3.1.tgz","fileCount":144,"unpackedSize":246985,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhDhy3CRA9TVsSAnZWagAAv3wQAI+ti7c8wYsquAI6XZbv\nUVstjcwVtXxOC3qqypfyiVjw5U7GY2W/jkK6kI2iIPQoEk/bbnt90wJ7gpE7\ne2k3p0mt5DgpNzc9mbCFvwOspvD8JXQDixrHkxa1OnuUqpRIo3gg6Ws8uTaB\naQ4ZLPaHcCTpioJ6ZULJrD7rCuS6og+pGdge0/+h3oMpzjloLV8Bz6qod4R0\ni1OfYKA5knWXNYwTldTsp7x/6NlMJVT3t8tzBoCbWvnSZvviq9EM+zvpGrCJ\ndRSVYQkgJeD28AD8F/SOfnK3qhIhJK4ZO1+61HKf7zZX1IFfhB1CSzcWYMIQ\nBThg4i1sF2mC981MK8SGnurkm4eibc3dWOg8oYZVe0z0hIzDaGi0fCBBNOKn\nCWWgMz9a7lfCDinAGrBfm+bklu0S7MEumaFjfibkfW9W4/i1KF9oMHAxhd42\nRHIoJYrik1DRjw7+sJwiy44jGILp/d0jYWZyx4V1nSoLYN9TL2ktdrhNXUHM\nnZbACLXOsXMWd48ZKr37oUEcvv395iy5fJLij1ptHymKZrbz11a+gmqVwDBa\nAybffQx9v6WPnaa3p0NwhxYGUaZElOFLKrCCBq0EOAgERidC7H/umCYahdNb\nIirY0dgz6uhB27jhn2dA7Px1Hy/LzOJ5lNvpkR62j9ot7Ar/ZeDKvK1MRN9Q\nLI6z\r\n=PdIv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCQebrUXZOHVE4boFoDipe19d+J6cIi1RpZRL47f3LNNgIhAOLn4JjkLusCMyOkfbGL2urlIAp1qIQPUZ+djp6+5MKS"}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.3.1_1628314806952_0.38635672618655836"},"_hasShrinkwrap":false},"5.3.2":{"name":"tape","version":"5.3.2","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.0","has":"^1.0.3","has-dynamic-import":"^2.0.0","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.5","object-inspect":"^1.11.0","object-is":"^1.1.5","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.5","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^19.0.1","array.prototype.flatmap":"^1.2.5","aud":"^1.1.5","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^8.2.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"eaceb8780cad3718536739f7246e46303cdc5951","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.3.2","_nodeVersion":"17.1.0","_npmVersion":"8.1.2","dist":{"integrity":"sha512-F+UjjvUJsEq/D0NwTKtuekTJsN7vpvYT/dvkZuBw7Y+2whC2JIU8syHIlNNkqstmtBu/mVoqhDr1QJGFUl+caA==","shasum":"d7e2e68b7b7ea853681743d2760e9fffc7a0adcf","tarball":"https://registry.npmjs.org/tape/-/tape-5.3.2.tgz","fileCount":144,"unpackedSize":248396,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhk0I2CRA9TVsSAnZWagAAt4EP+gIkA08Zbk17xP6CRMoF\navhKSp3Q5s6qmMnFwvcBPOiypSTR8EdqSsDLxnxavq2KZj9RCHe+uUFSChre\nHEUnJE3DBuzqcyoo2synSqCoiLNQ602evOqxx9HqiXAH1oL2piJxcY7k69E5\ny3I/cBCuyLITVAgo3N159gDktVLvCZsfIFiYPu960ltp2oUWX3rsOJt21ZCV\n7buCGdhaesHRzqvxErW+7VIQuO9i8ShooKUS5NLcv2KuEvzhPlt7YJHjXlIT\nIt/94FOmzumbYGy+e7usl/8n90HuevAfYn+ItnQ+/SrqP8b5NZ/+8any99I0\n4AflKyq8A1Io821KaL9N6YrXLpczBVN6WdaL+2HA8S6psh4C/Xp9Ga3hoHi5\nfBtX4tytfqyh/rB2cFFP/QREy/HKqqvnpQvqPADFr2E423J5MVzdJbb7DjXV\ncNyz8khvulZKbygQJ/sj3SISX6tsLyJTTYEx50/fSRaeIMDE0p87BTZV/IFU\npKF/LyX9aJ4bhAnkX1p46pv2ahbMSBMu0jX0TDG//G5xCVVPc2MyfGc3dHXU\n1ycLJVxRCMCG8kp33tcCnqAGKuNnc1FxPqYR02k1cMstFGCzbVoXRrgIfvRE\niagNsfOgPpAxdCYGxF2IdWwI4vIV+k7ss6nS+YZG4hmPt0LTcEfEJ3nKcqj/\nFt/k\r\n=YrV+\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBNAXjiwW19JO8Y4P3FcuoQI3U4DdXHkK4HgyKV/w0NVAiAPRZi3qxjPN/e9G9OoHJkO9mk24X4taBqjI/tPW4+kew=="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.3.2_1637040694302_0.4824381550590451"},"_hasShrinkwrap":false},"5.4.0":{"name":"tape","version":"5.4.0","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.0","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.5","object-inspect":"^1.12.0","object-is":"^1.1.5","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.5","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^20.1.0","array.prototype.flatmap":"^1.2.5","aud":"^1.1.5","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^8.5.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"7b00833896d3e50c8bbf20384ff9963f5ea8f430","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.4.0","_nodeVersion":"17.3.0","_npmVersion":"8.3.0","dist":{"integrity":"sha512-8Cq4mql6oZVO7zkMcen+2AZoJyICsHjJqTiWk1kVub6C/EsS4o9zBVWWbvBBLzx10okW3SKCoNN9XfwfTAIR2w==","shasum":"5fc60357771c634917e6a937b7bc1fa1a994d41d","tarball":"https://registry.npmjs.org/tape/-/tape-5.4.0.tgz","fileCount":144,"unpackedSize":253975,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhx/+ACRA9TVsSAnZWagAAl2AP/3jbBLB/fDKPR2n8oXDj\nkR4LaqLwMhb+ctyi7nYHFKxl/EJSqfXjciV/D0ai1x20n3xB4GQlVbfp5NkW\nEN2TW0NKu2qNBG6eelxle9uMUSICXxmIib+3GXiLUBn5COQY2T2uWWJO5bJD\n/SO7ZNYaT1KeE/LVlWrQmUG9RgdOR6pajT9fLxZg4A9p1cIjE6wwk3gUd31q\nu5vYvJw5CrXXy9XLJ1WUmCAi5XLKucKmvwPu67eeflazyFpzyaF9IUJ8jgm5\nfex1VjyQAmIHi4nb4q4XlnGydhAevssLn93Aqgt9XUrcjh4NGGeXW9+Fuqr5\nCOyVX7wQaZqviDtJti4G/9vxdSCqXiHcoehWOHbnzs1hOoogtVdmid1QpksO\n2oVXQ0w4AWUtKLKdEuBj2xS+kdDnD/Ha/cBfy2BYt5+y6HN9vcFBpbBSOBSa\nib0Rc2Hd7uN69NGmIs/eGcpM6mgGeyH9CxIJomAXbVe1Tm/hUIcR6HR5ukbO\npi5mEtp2dKxt++E8WzC9F+Set2GtxmTqFQgvRvlNpg55KmWhQC0aJ6ybIQU8\nKlrzWeuNvVsCPGteOHTw43far2Jy5Vd5P1UU77+6dwh2skD6n2tXtvwwiriu\nFCtb2uyT766oXeBOIRffwLJPG+Jv2HacERs6+OM+8n2uVO9nq5qfpTiBMEUl\npMZn\r\n=PD7S\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDTMkqwxDA+7mm5jjLx4SOeGVmAN9GezmfhIgFHftvdcQIgchdsc2LhzBCnVg5F9sX68o9Qp1pFrWaZMCHpQYY8U4Y="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.4.0_1640497024312_0.4877697676622992"},"_hasShrinkwrap":false},"5.4.1":{"name":"tape","version":"5.4.1","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.3","call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.0","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.5","object-inspect":"^1.12.0","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.5","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^20.2.0","array.prototype.flatmap":"^1.2.5","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^8.6.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check $(git ls-files | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git')","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"606c62c50232943e0d67eb3c20cfc9aaf2059f48","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.4.1","_nodeVersion":"17.3.1","_npmVersion":"8.3.1","dist":{"integrity":"sha512-7bGaJ3WnQ/CX3xOWzlR+9lNptEWoD+11gyREP8k+SYrDu2a20EifKpTmZndXn25ZRxesYHSuNtE7Fb+THcjfGA==","shasum":"2abc418ba37111fa4910d5d09136e54623f29b99","tarball":"https://registry.npmjs.org/tape/-/tape-5.4.1.tgz","fileCount":143,"unpackedSize":254233,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh45hoCRA9TVsSAnZWagAAyFIP/0O0w6hDCQbdGN+L1Sz8\n653mnBm2k2uk3xxzg2+CPKrqU+hns2gX3cEybIRYk5t+PzgxlSAdwXjdecvZ\nC525PSxRhGIZwIgzb+yqnsOxU+USzBwJDp+rJ/kK9YBo0JrS9qWKC8uc8fNA\nBNntwPanDEFyMBc1u6U0WRtFGF6Xv+BPdCF36+gFhtb4DEC+z/2o3KyicKxY\nudWWc22LRg08t07kzuB76XLPlI8JoNJPD6hz2YTaou6wDOl5ijjj6cBnVt61\ng74STtB1Fl2gIev1Y9HF8TkaSA6e49i1rrg5ollSo0QEs+Yfl7656clZucAh\nQCwHau8CspFgKLm+M19sBxU6jFSsTkAUwbyHKFOHZNqJ0SyaoxGEwo+rVeaw\nQvRnEi9Lq3WPxuzWw7OxuFDEp1zM7uDBrrbV9UiNMSGRIABpMQMgH2yp4VF+\nXeC5wNHfZoRJJB4nQGE5Pwg1BsymLLGd/oUOHK1Y/nLBBS3yqhYrzTF4PqJm\nn+F7cPAeT0YIRf9Gbv6TIiywLWFPBiVbBRF6FG2WcLdtu1bGei4BY12coEzB\noeaC0xYZjy0gwtsA9UcSi5geU+QwXvoc6ymXG7PkUQJ2k8ZE23SF0qz1Zekw\nbDAh4HAGFAO0sD+wbxljKUcNq6FSfEeJiaAwtF4qQzgqgQBExxjxctNw2i4M\n1+5F\r\n=qFNX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDvjSLBTNUiSLftZjKtDpl/xI+00ErOpcqW0m6wWN/2mAiEAzgdX/pWmy79Bt1BbGvcp4UqxM1QVN2NJW/e0v8t0DFg="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.4.1_1642305640167_0.8171362702995286"},"_hasShrinkwrap":false},"4.15.0":{"name":"tape","version":"4.15.0","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"~1.0.2","deep-equal":"~1.1.1","defined":"~1.0.0","dotignore":"~0.1.2","for-each":"~0.3.3","glob":"~7.2.0","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.1.4","minimist":"~1.2.5","object-inspect":"~1.12.0","resolve":"~1.22.0","resumer":"~0.0.0","string.prototype.trim":"~1.2.5","through":"~2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^20.2.0","array.prototype.flatmap":"^1.2.5","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^8.7.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check $(git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js')","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape <sup>[![Version Badge][npm-version-svg][package-url]]</sup>\n\ntap-producing test harness for node and browsers\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files.\nYou can run the tests by usual node means (`require('test-file.js')` or `node test-file.js`).\nYou can also run tests using the `tape` binary to utilize globbing, on Windows for example:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the [`glob`](https://www.npmjs.com/package/glob) module.\nIf you want `glob` to perform the expansion on a system where the shell performs such expansion, quote the arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm that will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n- [tabe](https://github.com/Josenzo/tabe)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one of the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n- Describe blocks with https://github.com/mattriley/tape-describe\n\n# command-line flags\n\nWhile running tests, top-level configurations can be passed via the command line to specify desired behavior.\n\nAvailable configurations are listed below:\n\n## --require\n\n**Alias**: `-r`\n\nThis is used to load modules before running tests and is explained extensively in the [preloading modules](#preloading-modules) section.\n\n## --ignore\n\n**Alias**: `-i`\n\nThis flag is used when tests from certain folders and/or files are not intended to be run. It defaults to `.gitignore` file when passed with no argument.\n\n```sh\ntape -i .ignore **/*.js\n```\n\nAn error is thrown if the specified file passed as argument does not exist.\n\n## --no-only\nThis is particularly useful in a CI environment where an [only test](#testonlyname-opts-cb) is not supposed to go unnoticed.\n\nBy passing the `--no-only` flag, any existing [only test](#testonlyname-opts-cb) causes tests to fail.\n\n```sh\ntape --no-only **/*.js\n```\n\nAlternatively, the environment variable `NODE_TAPE_NO_ONLY_TEST` can be set to `true` to achieve the same behavior; the command-line flag takes precedence.\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods in [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have finished.\nTests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you don't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished right before `tape` is about to print the test summary.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called automatically after the `n`th assertion.\nIf there are any more assertions after the `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert that it is falsy.\n\nDo not call `t.end()` if your test callback returns a Promise.\n\n## t.teardown(cb)\n\nRegister a callback to run after the individual test has completed. Multiple registered teardown callbacks will run in order. Useful for undoing side effects, closing network connections, etc.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the description message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp`, `Function`, or `Object`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will pass only if the string representation of the exception contains the word `user`. Any other exception will result in a failed test. The `Function` is the exception thrown (e.g. `Error`). `Object` in this case corresponds to a so-called validation object, in which each property is tested for strict deep equality. As an example, see the following two tests--each passes a validation object to `t.throws()` as the second parameter. The first test will pass, because all property values in the actual error object are deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = true;\n\n    // Passing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true\n        },\n        \"Test message.\"\n    );\n```\nThis next test will fail, because all property values in the actual error object are _not_ deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = \"true\";\n\n    // Failing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true // This is not deeply strictly equal to err.check.\n        },\n        \"Test message.\"\n    );\n```\n\nThis is very similar to how Node's `assert.throws()` method tests validation objects (please see the [Node _assert.throws()_ documentation](https://nodejs.org/api/assert.html#assert_assert_throws_fn_error_message) for more information).\n\nIf `expected` is not of type `RegExp`, `Function`, or `Object`, or omitted entirely, any exception will result in a passed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.throws(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown, and must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will fail  only if the string representation of the exception contains the word `user`. Any other exception will result in a passed test.  The `Function` is the exception thrown (e.g. `Error`).  If `expected` is not of type `RegExp` or `Function`, or omitted entirely, any exception will result in a failed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.doesNotThrows(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current test `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up after `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\nMultiline output will be split by `\\n` characters, and each one printed as a comment.\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with a new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to someplace else if you `htest.createStream().pipe()` to a destination stream on the first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case that will run for the entire process, all other test cases using `tape` will be ignored.\n\nCheck out how the usage of [the --no-only flag](#--no-only) could help ensure there is no `.only` test running in a specified environment.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes messages to `console.log()`. By default `stream` will be a text stream of TAP output, but you can get an object stream instead by setting `opts.objectMode` to `true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want, like a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\nA convenient alternative to achieve the same:\n```js\n// report.js\nvar test = require('tape');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row)) // for example\n});\n```\nand then:\n```sh\n$ tape -r ./report.js **/*.test.js\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# troubleshooting\n\nSometimes `t.end()` doesn’t preserve the expected output ordering.\n\nFor instance the following:\n\n```js\nvar test = require('tape');\n\ntest('first', function (t) {\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\nwill output:\n\n```\nok 1 second test\nok 2 third test\nok 3 first test\n```\n\nbecause `second` and `third` assume `first` has ended before it actually does.\n\nUse `t.plan()` instead to let other tests know they should wait:\n\n```diff\nvar test = require('tape');\n\ntest('first', function (t) {\n\n+  t.plan(2);\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n-    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\n# license\n\nMIT\n\n[package-url]: https://npmjs.org/package/tape\n[npm-version-svg]: https://versionbadg.es/substack/tape.svg\n[deps-svg]: https://david-dm.org/substack/tape.svg\n[deps-url]: https://david-dm.org/substack/tape\n[dev-deps-svg]: https://david-dm.org/substack/tape/dev-status.svg\n[dev-deps-url]: https://david-dm.org/substack/tape#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/tape.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/tape.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/tape.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=tape\n[codecov-image]: https://codecov.io/gh/substack/tape/branch/master/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/substack/tape/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/substack/tape\n[actions-url]: https://github.com/substack/tape/actions\n","readmeFilename":"readme.markdown","gitHead":"e00bfb035b966dee4e6f03e6e441ae0017df6147","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.15.0","_nodeVersion":"17.4.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-SfRmG2I8QGGgJE/MCiLH8c11L5XxyUXxwK9xLRD0uiK5fehRkkSZGmR6Y1pxOt8vJ19m3sY+POTQpiaVv45/LQ==","shasum":"1b8a9563b4bc7e51302216c137732fb2ce6d1a99","tarball":"https://registry.npmjs.org/tape/-/tape-4.15.0.tgz","fileCount":116,"unpackedSize":216502,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh8aHwCRA9TVsSAnZWagAAE2gQAJX0i0vk9nmXLEFjvYZe\n8FAPsUUTnipRTENr23+0zFtB1Q6JzM8nYLDLoe8kzyY1wmWGTn0YAtA2zIL3\nDJYleTyFCn9Rm4FIdDALXLckUyihxAgJyGDKSYgxMfFMJzXQexiIAEjAtHoB\n0ToiXHAf4+bMY5WhFOw+yZY42iaNGFboJTs5QOGV62+efSV4xSXLw+jKo6aa\nD20UWXxUjnLDfsT2KGZY5+usb1KWbeTYGCiLOYbTxjH4D3XZ/ATnJIrttD+3\ncf9XZyf6jSlC/BiGu0/WN4miH5Zbn9beZ1p+Pda/HPWGlSNaHXHwHsoox3FU\nlX2SRLczuCZZc/ii6UumwOe4lL8y9vNZYEcixGAouYOaA8z0l3P/YehC31MW\nNxCuZSGwJ3+CbQ+xU9uZfj9PkWQQWVK9cIlTxZmZ3UZczkwsteOPl0vQQdWB\nHG8UIUDS8HDUy7ZDuGQkfJd9uEh13R5BnsY/OZKLAai+Pvo9kbs/7QjROmx2\nSFUSIfFyYkgJXVi/0V7lKhGehM3L64HtIGx22uIM4PC0wvoteBwSo6urc1Z/\nJrZdkOGwu/XvEjkGVhTSGv2z5ElgOfbsT/gxlTVDjQ4ra0Wn1EKaHBN6Jk1a\nDaBD2+tu+ZaVAXmH86dv9cdIol+rd7Z6Dhn615TTWdb75iGssJiOXclPaK25\noVDd\r\n=9jRy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCiZuYGsVJUA6S/V3m8w+dfB/PnbfrVoa5WbG0wrz+mHAIhAK3U23LAoxZCOQxDreP7HDuZRJ/lNDAb4E2Gavbg8qG8"}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.15.0_1643225584850_0.5600326139310443"},"_hasShrinkwrap":false},"5.5.0":{"name":"tape","version":"5.5.0","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.3","call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.0","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.5","object-inspect":"^1.12.0","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.5","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^20.2.0","array.prototype.flatmap":"^1.2.5","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^8.7.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check $(git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js')","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"d75888e3064fccc929668d584d2bf6792a797c48","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.5.0","_nodeVersion":"17.4.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-hmsc9J+07tM+evk2Rkv7pkbj70Uoy9k0w1yhnN8Sza8kmjhtUTVNltsjywQjC+4grB+EBMKXiJPTkftX8IrbSA==","shasum":"5ad3f2a78aeb91ff90f853692b4ff33ba585db70","tarball":"https://registry.npmjs.org/tape/-/tape-5.5.0.tgz","fileCount":146,"unpackedSize":260153,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh8ap9CRA9TVsSAnZWagAAcZMP/0FH9HJuc3PeKpwWPnBb\n4H9RW1Hid7Z2zmN78W21t526HcxcW/EOMnULDtjaHD2E6xFgm0+loN2Qn8Bt\n8c0eEEvuYLxlZbdnOCyOmFd5eB3v4XOm1QEPpe9ffwRmS0Fbp/woQGYydEPn\nM44NXJEll3r6QtxkVVYiKGpm0p9aFh49rMD2fOB6z9AcnJKTxxkCJ9vpBvXr\nstMEW/pZtkz5iol7wQ+aiCnzz9u6sWUjZc9irOacOUEithDeJQ1iO8E2yQbi\nqKVlC/ANbTs9TFp8irAxMFp7WRTGJY1h0YD+MpZN+/ge6AynRmCOTmRJYdeN\nknbpyDnSNI7u3t4k+o5S/5s38Z5YGytO4DEEii8bREcwKpY06J0jQ59Z5OVa\ndkKSxYZHPpZ9ebvVUngDHRdOiyC/dYs0MSmlo0C2UM+x1aKtMbg9nMqmQFy9\n13cHvWjsNPXBCdZTbmX1v8hZ5BrsikxALkLc/DZoUWgS2RX2Bfy6l+X4dm/y\niIaz6bYoQOJOWFv9Y0Vby5pc03O+XVUjqhDZI2cHZdxi2OittHSGQOKITyT3\n4kwQABT2owjtVN121icXYKymVwG6vkyPsjxaQpcZboPF1eiAK7Ea819/9Fti\nUQiPuBLdXzyWWwuLt/rZqR/OaIkAiA4B1/ZfUKGDuKG1L20jjifAKk6CUows\n8Je+\r\n=5Lgn\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC7118m4K9Ikj9i9x8ujNmq8POhOFMSwY6UJopvjyzJjQIgTnrY69zJtORCKO6I0Z7xTltVdT/Uk8fZGeVaPZhz6+o="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.5.0_1643227773423_0.2977599631093144"},"_hasShrinkwrap":false},"5.5.1":{"name":"tape","version":"5.5.1","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.3","call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.0","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimatch":"=3.0.4","minimist":"^1.2.5","object-inspect":"^1.12.0","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.5","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^20.2.0","array.prototype.flatmap":"^1.2.5","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"^8.7.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check $(git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js')","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"7bda49393aa458401b361e577f94d4481069becc","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.5.1","_nodeVersion":"17.5.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-cO+URxa9CWe2mfgeccQRfKcDyNJ2EqoL+bpHLonEvMKilzkNz16IJ1WDMoI665/7RJvCofBk+pG5/wUbcKAMDQ==","shasum":"e61519a400bf778c9dc2e3b2fa699dc14ce14ae5","tarball":"https://registry.npmjs.org/tape/-/tape-5.5.1.tgz","fileCount":146,"unpackedSize":260184,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiBghYCRA9TVsSAnZWagAAYzAQAJRqsiAqBtUoUuimrYQ0\nYJS6DY1RlqV7gTz/5kqxw0gaAjT1Debiu2seGXToEcd2XBtp7k7WzefRdwkE\nrYzBW2k6q5o8D0MbWtjAL6l/8N+CRNO6OZlU9Noj23adY+jeLuyQtIwvJlVo\n+E33IzB1cL1FaYDkMYeaMvtIKM01t2qTVYYRuPda2kcWMtx6YHveArrkMxTd\nMoNOBFVp+438e1JgrVZ8DcqTK9N8p5UFR4ckjktbiSjpZKlsZQ4n4oKTFfCR\nfKsebsNgHqTHbuVHdlNbRBwS3Fbk/mo2dKmkGnI/esmLKK4K5MKNMwpTuxQj\nK8+DuLmxpu728I7m7aU3PIASwGxRbJCCXauAawa3o87y59gsuP68mAMHKd4S\nB/KnwYG02IMXJZQ4YmJgJc7k3GtQwW8g14mJWnJwZeCy65y3AC6Sj9klH6oU\ntUsH22bWvn4st9pVziB0KqRh3ijiD2t7xJAJ7+MRw2lSgN3ohepRqGJz14W8\nIt4+GF3RiRSObM+ZZyFxZ++tGLLSJBQcU+H2lnYcUary3K2+wNE5UUNmhKst\nQG+0n1PnfCKBAYgW7OVUJwibuQQfQhp3EuEx98Xfwm2yj1FPCAfSJB24hjih\nya8MAvCzvFuOcGkzGM9qc2XvVdBQt60T+Xy/FU1172Of/tTjCgrtb24lbY2f\nJ+IN\r\n=p7c8\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCcOTdAXLnJi39MvfH5Qr+BCdaITMPfm5h+n5XCuestwAIgJ+2vUgWgpG6wmlXiuzCT0lhTFSKa2vbvJPWB2fCzAck="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.5.1_1644562520612_0.47485046909883755"},"_hasShrinkwrap":false},"5.5.2":{"name":"tape","version":"5.5.2","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.3","call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.0","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.5","object-inspect":"^1.12.0","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.5","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^20.2.2","array.prototype.flatmap":"^1.2.5","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"=8.8.0","falafel":"^2.2.4","js-yaml":"^3.14.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint":"eclint check $(git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js')","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"e6f091a78fd5e611c616fabff6a4e10c2af3ac4c","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.5.2","_nodeVersion":"17.5.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-N9Ss672dFE3QlppiXGh2ieux8Ophau/HSAQguW5cXQworKxV0QvnZCYI35W1OYySTJk0OC9OPuS+0xNO6lhiTQ==","shasum":"3750c415e6ddfbcd425945f02f1a907d2ea8171f","tarball":"https://registry.npmjs.org/tape/-/tape-5.5.2.tgz","fileCount":146,"unpackedSize":260153,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJiCFvPCRA9TVsSAnZWagAABE0P/0Anx+2ehKm0nVspOi7G\nitMePDgJiZzOTNbrychAw/oidv9MrRZHOAODhWJzLpdRpvnm5wYHi2p13M+u\nycamrMrtBjNErzCF2QnD30bvn5i2gPxKij2Dd/kxcnma0hMVAIcRK+Vffe8N\n0Pwuds1OTtzfBf+pdp9fGgRwqxUwdnhjx+M2TGAqcVDZXFojJPJ3NjUEHtQC\nmXrHyfj1Wjl487kaFzLDYHAwkydpAQCGm3stOSavztHeUVV0kmBZSuZY3tbJ\n27qrtyMdfbTkjXvxKTYsOgk+3ntGWy8p5jxnntZ1FIkp4vPjy5PcbIeuHCXs\nh1YAFaoqRXW3195lZR2ienaUYCElrEzit6ismscFeHJimJpFfgIviRNJtjrU\nssza8A/tpEdygHEQrfHlBD93HvxpyY3qI7PUDyLNMMg5RMOssjCAXBOr1L5q\nisDW3K9f8Sbo2J5TGr0qzQw6LWqLo1j9MmDLEyXne+2dV8HqY6jOEmZP1kg9\nmWm3wC3zyBUGxahsdOnwJU9zzoujulK88zkmOdInw5xrUSGg7/G/K3C3Vp0H\nJZBIjL1SJG0f240YSDqBXaoAm6fqDsNEB0s8Y6L9lkeNuSqFEIYhLn/R/dh7\n3tlUY+XBOyBcDcQ33nhm5dWL9g7RZGehl6z0inXqKq8I68RYhkyJR+DDPDT0\nccgW\r\n=Dnc4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIETVYzXJdCpQNqgqNuBR9ewVmdUztGPgoUmDiGf2KW0EAiAGrXgWkRj/3DEhXatHsBQQm0C3rKqzrF7e7W1M3gZY7Q=="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.5.2_1644714959549_0.2231026765072317"},"_hasShrinkwrap":false},"5.5.3":{"name":"tape","version":"5.5.3","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.3","call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.0","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.6","object-inspect":"^1.12.0","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.2","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.5","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^20.2.2","array.prototype.flatmap":"^1.2.5","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"=8.8.0","falafel":"^2.2.4","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"1d724f04a3f49e8ab6489991226c4426c8febe76","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.5.3","_nodeVersion":"17.9.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-hPBJZBL9S7bH9vECg/KSM24slGYV589jJr4dmtiJrLD71AL66+8o4b9HdZazXZyvnilqA7eE8z5/flKiy0KsBg==","shasum":"b6d6f3c99a7bade12b9dcf6ee2234b1dd35e5003","tarball":"https://registry.npmjs.org/tape/-/tape-5.5.3.tgz","fileCount":146,"unpackedSize":260431,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCkpZfymym8wBczs4w3QerInW6Eba3Tug8hqp8TVOJ7gAIhAO7XiKnkw80X0FOALfH/8kRNGHQk/PU0IAE5QsiB4RJS"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiUIYoACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoFKA/9HHEnCHeabcDNyctmDcYzZ1ntIy56SbIAGfljHBvBqVe18EdS\r\n7ki56PCFwRvFoBl5+cTKl8XWK5HlTAC3WACPwSiS1iPP3FUhCpmlQwJ5Hjdg\r\nKQZqzJw6gID13bSPvb3ak36yso97UTs4g93zJlFnqtrxQqS2F/0GyxyrolC3\r\n1nmq3qLOkdp19cwWWf3adal5YFb0fcergelDSFzLXbdp84UL4II4frZ76Bo4\r\ngA8XaHcvKeOGOjT4Pmd3R0bpG1GAz1yH+0z5uH458XauX++4gQZcJTH6eXuI\r\nejaEFa7isnYNTwS+W7OptBgCuPjAi2f8kMuXlhi77PehUL6NB1xiCyf2aRta\r\nehtrQLnIW1w19IaX0qXV8AplRl8PZkRkohMBxc70yDLa9X35VoM4+8a/dUkW\r\n/0gCM2BrYq6ArRSBsEkuDvreKrlC/Y4RYNwhsE4UBa75uPAqz0saLu1TRnoD\r\nQE9tohQS1aM4Xnb7uXOagHL2oxTIy7MOGPA5COgU19ArKvCZOpIHnSRkUM/V\r\nIv+M4dTyl3SxXdHoWSrmInovQooT9aPI1scP8z2cIg8fplA9833ZNZdEHSw9\r\nj8Gv76+SINs4AhJIRHX/RM5XTVL6U/9ntGk9kIG2Lj1xdJE1qTXSONx+VYkb\r\nm+GOlLhUW7Enbk1225dZxc9Kjz0cbkY3cFc=\r\n=oaG0\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.5.3_1649444392621_0.17798528631332888"},"_hasShrinkwrap":false},"4.15.1":{"name":"tape","version":"4.15.1","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"~1.0.2","deep-equal":"~1.1.1","defined":"~1.0.0","dotignore":"~0.1.2","for-each":"~0.3.3","glob":"~7.2.0","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.1.4","minimist":"~1.2.6","object-inspect":"~1.12.0","resolve":"~1.22.0","resumer":"~0.0.0","string.prototype.trim":"~1.2.5","through":"~2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^20.2.3","array.prototype.flatmap":"^1.2.5","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.2.1","eslint":"=8.8.0","falafel":"^2.2.4","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap test/*.js"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","readme":"# tape <sup>[![Version Badge][npm-version-svg][package-url]]</sup>\n\ntap-producing test harness for node and browsers\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files.\nYou can run the tests by usual node means (`require('test-file.js')` or `node test-file.js`).\nYou can also run tests using the `tape` binary to utilize globbing, on Windows for example:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the [`glob`](https://www.npmjs.com/package/glob) module.\nIf you want `glob` to perform the expansion on a system where the shell performs such expansion, quote the arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm that will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n- [tabe](https://github.com/Josenzo/tabe)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one of the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n- Describe blocks with https://github.com/mattriley/tape-describe\n\n# command-line flags\n\nWhile running tests, top-level configurations can be passed via the command line to specify desired behavior.\n\nAvailable configurations are listed below:\n\n## --require\n\n**Alias**: `-r`\n\nThis is used to load modules before running tests and is explained extensively in the [preloading modules](#preloading-modules) section.\n\n## --ignore\n\n**Alias**: `-i`\n\nThis flag is used when tests from certain folders and/or files are not intended to be run. It defaults to `.gitignore` file when passed with no argument.\n\n```sh\ntape -i .ignore **/*.js\n```\n\nAn error is thrown if the specified file passed as argument does not exist.\n\n## --no-only\nThis is particularly useful in a CI environment where an [only test](#testonlyname-opts-cb) is not supposed to go unnoticed.\n\nBy passing the `--no-only` flag, any existing [only test](#testonlyname-opts-cb) causes tests to fail.\n\n```sh\ntape --no-only **/*.js\n```\n\nAlternatively, the environment variable `NODE_TAPE_NO_ONLY_TEST` can be set to `true` to achieve the same behavior; the command-line flag takes precedence.\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods in [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have finished.\nTests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you don't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished right before `tape` is about to print the test summary.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called automatically after the `n`th assertion.\nIf there are any more assertions after the `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert that it is falsy.\n\nDo not call `t.end()` if your test callback returns a Promise.\n\n## t.teardown(cb)\n\nRegister a callback to run after the individual test has completed. Multiple registered teardown callbacks will run in order. Useful for undoing side effects, closing network connections, etc.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the description message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp`, `Function`, or `Object`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will pass only if the string representation of the exception contains the word `user`. Any other exception will result in a failed test. The `Function` is the exception thrown (e.g. `Error`). `Object` in this case corresponds to a so-called validation object, in which each property is tested for strict deep equality. As an example, see the following two tests--each passes a validation object to `t.throws()` as the second parameter. The first test will pass, because all property values in the actual error object are deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = true;\n\n    // Passing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true\n        },\n        \"Test message.\"\n    );\n```\nThis next test will fail, because all property values in the actual error object are _not_ deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = \"true\";\n\n    // Failing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true // This is not deeply strictly equal to err.check.\n        },\n        \"Test message.\"\n    );\n```\n\nThis is very similar to how Node's `assert.throws()` method tests validation objects (please see the [Node _assert.throws()_ documentation](https://nodejs.org/api/assert.html#assert_assert_throws_fn_error_message) for more information).\n\nIf `expected` is not of type `RegExp`, `Function`, or `Object`, or omitted entirely, any exception will result in a passed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.throws(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown, and must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will fail  only if the string representation of the exception contains the word `user`. Any other exception will result in a passed test.  The `Function` is the exception thrown (e.g. `Error`).  If `expected` is not of type `RegExp` or `Function`, or omitted entirely, any exception will result in a failed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.doesNotThrows(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current test `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up after `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\nMultiline output will be split by `\\n` characters, and each one printed as a comment.\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with a new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to someplace else if you `htest.createStream().pipe()` to a destination stream on the first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case that will run for the entire process, all other test cases using `tape` will be ignored.\n\nCheck out how the usage of [the --no-only flag](#--no-only) could help ensure there is no `.only` test running in a specified environment.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes messages to `console.log()`. By default `stream` will be a text stream of TAP output, but you can get an object stream instead by setting `opts.objectMode` to `true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want, like a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\nA convenient alternative to achieve the same:\n```js\n// report.js\nvar test = require('tape');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row)) // for example\n});\n```\nand then:\n```sh\n$ tape -r ./report.js **/*.test.js\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# troubleshooting\n\nSometimes `t.end()` doesn’t preserve the expected output ordering.\n\nFor instance the following:\n\n```js\nvar test = require('tape');\n\ntest('first', function (t) {\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\nwill output:\n\n```\nok 1 second test\nok 2 third test\nok 3 first test\n```\n\nbecause `second` and `third` assume `first` has ended before it actually does.\n\nUse `t.plan()` instead to let other tests know they should wait:\n\n```diff\nvar test = require('tape');\n\ntest('first', function (t) {\n\n+  t.plan(2);\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n-    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\n# license\n\nMIT\n\n[package-url]: https://npmjs.org/package/tape\n[npm-version-svg]: https://versionbadg.es/substack/tape.svg\n[deps-svg]: https://david-dm.org/substack/tape.svg\n[deps-url]: https://david-dm.org/substack/tape\n[dev-deps-svg]: https://david-dm.org/substack/tape/dev-status.svg\n[dev-deps-url]: https://david-dm.org/substack/tape#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/tape.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/tape.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/tape.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=tape\n[codecov-image]: https://codecov.io/gh/substack/tape/branch/master/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/substack/tape/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/substack/tape\n[actions-url]: https://github.com/substack/tape/actions\n","readmeFilename":"readme.markdown","gitHead":"678b92204b606ba8e612b2487e7390d365a372ca","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.15.1","_nodeVersion":"17.9.0","_npmVersion":"8.3.1","dist":{"integrity":"sha512-k7F5pyr91n9D/yjSJwbLLYDCrTWXxMSXbbmHX2n334lSIc2rxeXyFkaBv4UuUd2gBYMrAOalPutAiCxC6q1qbw==","shasum":"88fb662965a11f9be1bddb04c11662d7eceb129e","tarball":"https://registry.npmjs.org/tape/-/tape-4.15.1.tgz","fileCount":115,"unpackedSize":217002,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDNEoJkANH1FKDkxe4PM+KBfaw2ALVGPwTyh+3nGuiy2wIgTW2haJUn3HbBwWpQka31nXu1r8T1gNZC+w2evbIyCow="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiUKZeACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqlJQ/9FsSA3RNOvjy+rzcqsvL+eADgOzuSBui+pOGl1UyQunQUvtIL\r\nO1k9DvtVW+0EmrbessnbcYYzhH33/fDLZZMl+dn7B6mTI8q6xSbsxquDVZBw\r\nBggarcgCPCxNRgbLcyaW0/Rzf0h2nNSMrdGD5yLP2RH26fZIpKxJxOSBxCsq\r\nH/MEuh3WSgIk6vgeIKNET7uBUgHeJixC/ohXhhnCQD68Ek4XycM7m5NWdiDI\r\nkLgvYwTkpwXHQ4qb5lWpHnW1A7IUevZnGxYrIUgw/s9F+2IH8RsT08ZthQ+P\r\nxqWi4SUPXv2VtsZQ+qbSI1B+51xdjORRfacYTXK/kKqyltW4QMewcKMCThmA\r\nTCERoXjzmH32DaW+DmQmiLz0EBfwkXvrqolyjNl3ppfnmhIUSLjlBHNZbNcx\r\nc+25UpZfPGvjgWRlac6PSVzvBpZHchuEmrLfk/XLTa8iPSpiIu73VTurzX34\r\n6eVAQz03nXg3FhsFjIrTqVD8LiBEFcRNEcvG69sSKAgvbUu8UVy6t7eGv/cz\r\nDAqvC6UcP77G1NmW+Yp8//gfp7QVmQX64uU3DX1ho0w7oehVe/vFT7T5W0aI\r\nxXXwlfMG12pYtqT6c9Dg5p+XLu67zMAhafFUATztUvSIwRM7w81Ec3k2WjGi\r\nFMb8UMKcCwRRJnMCcMd4uWlF2hgIIH8+sVg=\r\n=VvCW\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.15.1_1649452637891_0.33804597643113565"},"_hasShrinkwrap":false},"5.6.0":{"name":"tape","version":"5.6.0","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.3","call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.6","object-inspect":"^1.12.2","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.3","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.6","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.0.0","array.prototype.flatmap":"^1.3.0","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.4","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","publishConfig":{"ignore":[".github/workflows"]},"gitHead":"6d9e78284b5941e7428761f9db6fd4481632479f","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@5.6.0","_nodeVersion":"18.7.0","_npmVersion":"8.15.0","dist":{"integrity":"sha512-LyM4uqbiTAqDgsHTY0r1LH66yE24P3SZaz5TL3mPUds0XCTFl/0AMUBrjgBjUclvbPTFB4IalXg0wFfbTuuu/Q==","shasum":"588af7292e4a91e49ce5eba344d632d412317b9b","tarball":"https://registry.npmjs.org/tape/-/tape-5.6.0.tgz","fileCount":148,"unpackedSize":261595,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQClUH2HL0swAptU4+1yiz8v+aPYwX6hBJqkCpo3a3hh8QIhANqSmZsWvQHdTn2IPdsJ7xtxsLq6o+uupe4BBUT6rO8P"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi/AD7ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmr/lw/6A0B+mgXhya7AvzD4602It/sBiatxzwwV4nUffd6ZzrJQwY57\r\nTlu3tQVifLRyhUamCUPfi1xTrOwutscQR4+rjdzing7+4yehCXy+u5WxOgJo\r\nT3V7hgdSFa5pakoK489Mf6EuzzoVfVaHfwGpp2Oj5UD6lZnunMVeXr0E70kG\r\nfVqHFXctxeYU5WvnuI1mfkLybaoUAIYYU0JCUqi9ts4LDJHJCcNKOfL+gZoV\r\n2cXlXhUK/ALdHmgtaqUMm6l7pli93BGVz5iFrH53LPUM2ZSI0ECIkFuNVar7\r\nvzJiop0GdJRao2DHdHST1jvAA9Xxa/3cR/yTxJngOlEXYF0h+v9nY6NtVmfH\r\nGyXg0ea1OJr8ZLMLOat7zhsMlsATSP9u6C/iGM1ig0mqthxrmTulY0xq4LU3\r\nmatKEXvoKhvvQYfjLzjGwWshOSQ2SQcGqdk3senBpMF6hJpQcsgIMYgcW7B6\r\nJt6NEMM3ruibGsjSUcPnMYnou+pSUnbbC3o1TfAF/ScPJBkFHy93nxKSKrD9\r\njJcfuZWfVqEJZv3ynMPE1uTN4LHEs4SjTyLEMoG9MzhGudN234VGlOL2D/GY\r\nJhGIQFndMHtJrQ27HJDBi5Fd33dA3h6qOeCr1yNi5VYbflLdosbST6J9/2cx\r\nzbyQOZ8R9pBP1K4Eq/3Zyr/I3DiOMzUK7/Y=\r\n=C55L\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.6.0_1660682491046_0.9470503363712071"},"_hasShrinkwrap":false},"4.16.0":{"name":"tape","version":"4.16.0","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"~1.0.2","deep-equal":"~1.1.1","defined":"~1.0.0","dotignore":"~0.1.2","for-each":"~0.3.3","glob":"~7.2.3","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.1.4","minimist":"~1.2.6","object-inspect":"~1.12.2","resolve":"~1.22.1","resumer":"~0.0.0","string.prototype.trim":"~1.2.6","through":"~2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.0.0","array.prototype.flatmap":"^1.3.0","aud":"^2.0.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/substack/tape.git"},"homepage":"https://github.com/substack/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"James Halliday","email":"mail@substack.net","url":"http://substack.net"},"license":"MIT","gitHead":"f4c7214aba364b059b38289394b9c4a4c9d71a79","readme":"# tape <sup>[![Version Badge][npm-version-svg][package-url]]</sup>\n\ntap-producing test harness for node and browsers\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files.\nYou can run the tests by usual node means (`require('test-file.js')` or `node test-file.js`).\nYou can also run tests using the `tape` binary to utilize globbing, on Windows for example:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the [`glob`](https://www.npmjs.com/package/glob) module.\nIf you want `glob` to perform the expansion on a system where the shell performs such expansion, quote the arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm that will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/substack/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n- [tabe](https://github.com/Josenzo/tabe)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one of the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n- Describe blocks with https://github.com/mattriley/tape-describe\n\n# command-line flags\n\nWhile running tests, top-level configurations can be passed via the command line to specify desired behavior.\n\nAvailable configurations are listed below:\n\n## --require\n\n**Alias**: `-r`\n\nThis is used to load modules before running tests and is explained extensively in the [preloading modules](#preloading-modules) section.\n\n## --ignore\n\n**Alias**: `-i`\n\nThis flag is used when tests from certain folders and/or files are not intended to be run. It defaults to `.gitignore` file when passed with no argument.\n\n```sh\ntape -i .ignore **/*.js\n```\n\nAn error is thrown if the specified file passed as argument does not exist.\n\n## --no-only\nThis is particularly useful in a CI environment where an [only test](#testonlyname-opts-cb) is not supposed to go unnoticed.\n\nBy passing the `--no-only` flag, any existing [only test](#testonlyname-opts-cb) causes tests to fail.\n\n```sh\ntape --no-only **/*.js\n```\n\nAlternatively, the environment variable `NODE_TAPE_NO_ONLY_TEST` can be set to `true` to achieve the same behavior; the command-line flag takes precedence.\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods in [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have finished.\nTests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you don't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished right before `tape` is about to print the test summary.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called automatically after the `n`th assertion.\nIf there are any more assertions after the `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert that it is falsy.\n\nDo not call `t.end()` if your test callback returns a Promise.\n\n## t.teardown(cb)\n\nRegister a callback to run after the individual test has completed. Multiple registered teardown callbacks will run in order. Useful for undoing side effects, closing network connections, etc.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the description message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/substack/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp`, `Function`, or `Object`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will pass only if the string representation of the exception contains the word `user`. Any other exception will result in a failed test. The `Function` is the exception thrown (e.g. `Error`). `Object` in this case corresponds to a so-called validation object, in which each property is tested for strict deep equality. As an example, see the following two tests--each passes a validation object to `t.throws()` as the second parameter. The first test will pass, because all property values in the actual error object are deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = true;\n\n    // Passing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true\n        },\n        \"Test message.\"\n    );\n```\nThis next test will fail, because all property values in the actual error object are _not_ deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = \"true\";\n\n    // Failing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true // This is not deeply strictly equal to err.check.\n        },\n        \"Test message.\"\n    );\n```\n\nThis is very similar to how Node's `assert.throws()` method tests validation objects (please see the [Node _assert.throws()_ documentation](https://nodejs.org/api/assert.html#assert_assert_throws_fn_error_message) for more information).\n\nIf `expected` is not of type `RegExp`, `Function`, or `Object`, or omitted entirely, any exception will result in a passed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.throws(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown, and must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will fail  only if the string representation of the exception contains the word `user`. Any other exception will result in a passed test.  The `Function` is the exception thrown (e.g. `Error`).  If `expected` is not of type `RegExp` or `Function`, or omitted entirely, any exception will result in a failed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.doesNotThrows(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current test `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up after `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\nMultiline output will be split by `\\n` characters, and each one printed as a comment.\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with a new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to someplace else if you `htest.createStream().pipe()` to a destination stream on the first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case that will run for the entire process, all other test cases using `tape` will be ignored.\n\nCheck out how the usage of [the --no-only flag](#--no-only) could help ensure there is no `.only` test running in a specified environment.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes messages to `console.log()`. By default `stream` will be a text stream of TAP output, but you can get an object stream instead by setting `opts.objectMode` to `true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want, like a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\nA convenient alternative to achieve the same:\n```js\n// report.js\nvar test = require('tape');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row)) // for example\n});\n```\nand then:\n```sh\n$ tape -r ./report.js **/*.test.js\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# troubleshooting\n\nSometimes `t.end()` doesn’t preserve the expected output ordering.\n\nFor instance the following:\n\n```js\nvar test = require('tape');\n\ntest('first', function (t) {\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\nwill output:\n\n```\nok 1 second test\nok 2 third test\nok 3 first test\n```\n\nbecause `second` and `third` assume `first` has ended before it actually does.\n\nUse `t.plan()` instead to let other tests know they should wait:\n\n```diff\nvar test = require('tape');\n\ntest('first', function (t) {\n\n+  t.plan(2);\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n-    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\n# license\n\nMIT\n\n[package-url]: https://npmjs.org/package/tape\n[npm-version-svg]: https://versionbadg.es/substack/tape.svg\n[deps-svg]: https://david-dm.org/substack/tape.svg\n[deps-url]: https://david-dm.org/substack/tape\n[dev-deps-svg]: https://david-dm.org/substack/tape/dev-status.svg\n[dev-deps-url]: https://david-dm.org/substack/tape#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/tape.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/tape.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/tape.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=tape\n[codecov-image]: https://codecov.io/gh/substack/tape/branch/master/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/substack/tape/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/substack/tape\n[actions-url]: https://github.com/substack/tape/actions\n","readmeFilename":"readme.markdown","bugs":{"url":"https://github.com/substack/tape/issues"},"_id":"tape@4.16.0","_nodeVersion":"18.7.0","_npmVersion":"8.15.0","dist":{"integrity":"sha512-mBlqYFr2mHysgCFXAuSarIQ+ffhielpb7a5/IbeOhMaLnQYhkJLUm6CwO1RszWeHRxnIpMessZ3xL2Cfo94BWw==","shasum":"18310f57b71c0ac21b3ef94fe5c16033b3d6362b","tarball":"https://registry.npmjs.org/tape/-/tape-4.16.0.tgz","fileCount":117,"unpackedSize":218000,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCToNvqdNEI3ygMondJ07ibHxCa6wOfXNzB8OQJmOavCgIhALji0JNvVWkdmpQ+A4Ada0zguchxtTasiLEGYsqpMjge"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJi/BTjACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoVehAAmZzDeqthPdc3YzleEZoDLtKyAls9YwdfHefEoVDI6zIzD+qG\r\n8DQNTbOp3SPddIsegGcOUOoSY3KIs5UKiDHMKX2MU7mo4zJry1pPgQwob1vh\r\nITJ1bjeGThUxqZ4ZuBOB4T18ZTBURxk3cj5hr0P3oSHtLkbery3h7ylJFGFY\r\n2CA9Nicv8Byo03pZ/XSMQO3rfd+SRVbzxxZCJiqg/z9jc4CDpIw3a6sd8Djw\r\niR1jeGPythwqLjEbnlUM7F5eTgFk5y3z3D4x9RrYMEQ0zFMlRwBnVfcN4kEE\r\neOzIkTH/QcjEfDRtBLmWflcyrDaVxqWD4XbakUf+PqWI+i4+2LbvPN0x4tqp\r\nzvz82mwE8JdOBoAXqreKsFwUHvdBjkHtbsMOvrhax8QdLFsjeXMcQKt1sw1e\r\n9fiPtelSLByS1zSVAI2Sao5SjMX3rzUAbil0ZzMasGOC5J83dyHrgGsDEhfb\r\n0ozePD34ytdSKZPews8ubjbXg2TV/t0wc1O9pIPI/zExf8e1TgHVMRsSziv7\r\nR0Jr/WVq32LOGVcFbYtzQ3+rIpSRRbZ1o0tlGYlWqLhClGiXS7uto2wrGtb6\r\nwmpbgdqQSVXcTXnhurepAkapifk3pv7FFhvZn+w5YYPfNC/IaSD8qYhXtCsl\r\nTsvuDl+5ayjLFw6LuRVixUDE9Vrd/2QcT4I=\r\n=cWqv\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.16.0_1660687587495_0.25001730600072736"},"_hasShrinkwrap":false},"4.16.1":{"name":"tape","version":"4.16.1","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"~1.0.2","deep-equal":"~1.1.1","defined":"~1.0.0","dotignore":"~0.1.2","for-each":"~0.3.3","glob":"~7.2.3","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.1.4","minimist":"~1.2.6","object-inspect":"~1.12.2","resolve":"~1.22.1","resumer":"~0.0.0","string.prototype.trim":"~1.2.6","through":"~2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.0.0","array.prototype.flatmap":"^1.3.0","aud":"^2.0.0","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"readme":"# tape <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\ntap-producing test harness for node and browsers\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files.\nYou can run the tests by usual node means (`require('test-file.js')` or `node test-file.js`).\nYou can also run tests using the `tape` binary to utilize globbing, on Windows for example:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the [`glob`](https://www.npmjs.com/package/glob) module.\nIf you want `glob` to perform the expansion on a system where the shell performs such expansion, quote the arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm that will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/ljharb/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n- [tabe](https://github.com/Josenzo/tabe)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one of the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n- Describe blocks with https://github.com/mattriley/tape-describe\n\n# command-line flags\n\nWhile running tests, top-level configurations can be passed via the command line to specify desired behavior.\n\nAvailable configurations are listed below:\n\n## --require\n\n**Alias**: `-r`\n\nThis is used to load modules before running tests and is explained extensively in the [preloading modules](#preloading-modules) section.\n\n## --ignore\n\n**Alias**: `-i`\n\nThis flag is used when tests from certain folders and/or files are not intended to be run. It defaults to `.gitignore` file when passed with no argument.\n\n```sh\ntape -i .ignore **/*.js\n```\n\nAn error is thrown if the specified file passed as argument does not exist.\n\n## --no-only\nThis is particularly useful in a CI environment where an [only test](#testonlyname-opts-cb) is not supposed to go unnoticed.\n\nBy passing the `--no-only` flag, any existing [only test](#testonlyname-opts-cb) causes tests to fail.\n\n```sh\ntape --no-only **/*.js\n```\n\nAlternatively, the environment variable `NODE_TAPE_NO_ONLY_TEST` can be set to `true` to achieve the same behavior; the command-line flag takes precedence.\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods in [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have finished.\nTests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you don't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished right before `tape` is about to print the test summary.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called automatically after the `n`th assertion.\nIf there are any more assertions after the `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert that it is falsy.\n\nDo not call `t.end()` if your test callback returns a Promise.\n\n## t.teardown(cb)\n\nRegister a callback to run after the individual test has completed. Multiple registered teardown callbacks will run in order. Useful for undoing side effects, closing network connections, etc.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the description message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp`, `Function`, or `Object`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will pass only if the string representation of the exception contains the word `user`. Any other exception will result in a failed test. The `Function` is the exception thrown (e.g. `Error`). `Object` in this case corresponds to a so-called validation object, in which each property is tested for strict deep equality. As an example, see the following two tests--each passes a validation object to `t.throws()` as the second parameter. The first test will pass, because all property values in the actual error object are deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = true;\n\n    // Passing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true\n        },\n        \"Test message.\"\n    );\n```\nThis next test will fail, because all property values in the actual error object are _not_ deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = \"true\";\n\n    // Failing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true // This is not deeply strictly equal to err.check.\n        },\n        \"Test message.\"\n    );\n```\n\nThis is very similar to how Node's `assert.throws()` method tests validation objects (please see the [Node _assert.throws()_ documentation](https://nodejs.org/api/assert.html#assert_assert_throws_fn_error_message) for more information).\n\nIf `expected` is not of type `RegExp`, `Function`, or `Object`, or omitted entirely, any exception will result in a passed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.throws(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown, and must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will fail  only if the string representation of the exception contains the word `user`. Any other exception will result in a passed test.  The `Function` is the exception thrown (e.g. `Error`).  If `expected` is not of type `RegExp` or `Function`, or omitted entirely, any exception will result in a failed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.doesNotThrows(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current test `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up after `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\nMultiline output will be split by `\\n` characters, and each one printed as a comment.\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with a new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to someplace else if you `htest.createStream().pipe()` to a destination stream on the first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case that will run for the entire process, all other test cases using `tape` will be ignored.\n\nCheck out how the usage of [the --no-only flag](#--no-only) could help ensure there is no `.only` test running in a specified environment.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes messages to `console.log()`. By default `stream` will be a text stream of TAP output, but you can get an object stream instead by setting `opts.objectMode` to `true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want, like a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\nA convenient alternative to achieve the same:\n```js\n// report.js\nvar test = require('tape');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row)) // for example\n});\n```\nand then:\n```sh\n$ tape -r ./report.js **/*.test.js\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# troubleshooting\n\nSometimes `t.end()` doesn’t preserve the expected output ordering.\n\nFor instance the following:\n\n```js\nvar test = require('tape');\n\ntest('first', function (t) {\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\nwill output:\n\n```\nok 1 second test\nok 2 third test\nok 3 first test\n```\n\nbecause `second` and `third` assume `first` has ended before it actually does.\n\nUse `t.plan()` instead to let other tests know they should wait:\n\n```diff\nvar test = require('tape');\n\ntest('first', function (t) {\n\n+  t.plan(2);\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n-    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\n# license\n\nMIT\n\n[package-url]: https://npmjs.org/package/tape\n[npm-version-svg]: https://versionbadg.es/ljharb/tape.svg\n[deps-svg]: https://david-dm.org/ljharb/tape.svg\n[deps-url]: https://david-dm.org/ljharb/tape\n[dev-deps-svg]: https://david-dm.org/ljharb/tape/dev-status.svg\n[dev-deps-url]: https://david-dm.org/ljharb/tape#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/tape.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/tape.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/tape.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=tape\n[codecov-image]: https://codecov.io/gh/ljharb/tape/branch/master/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/ljharb/tape/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/tape\n[actions-url]: https://github.com/ljharb/tape/actions\n","readmeFilename":"readme.markdown","gitHead":"8dd3f07c817c915452f2ebdf14d5067b98a860c2","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_id":"tape@4.16.1","_nodeVersion":"18.9.0","_npmVersion":"8.19.1","dist":{"integrity":"sha512-U4DWOikL5gBYUrlzx+J0oaRedm2vKLFbtA/+BRAXboGWpXO7bMP8ddxlq3Cse2bvXFQ0jZMOj6kk3546mvCdFg==","shasum":"8d511b3a0be1a30441885972047c1dac822fd9be","tarball":"https://registry.npmjs.org/tape/-/tape-4.16.1.tgz","fileCount":118,"unpackedSize":317365,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD219PSKfEOj+lSqUUnqaEVz7Ql97jU/hgO0uYo5/BNKgIgBkd2fvbDJz4Ci/GQw8wM4CiRB1ap9byid9Xoz1h/zIM="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjKP0fACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqt7xAApND6LTO4v8YGIubJ1YM3mGiZdhCXJ/8i+NpeKN5rMzLYzNep\r\n2ZPiWO1PhAOOqVDvHwXLFll+d8DaK5tSo6Vo3FNbSSQ+EEYrOEWoPVTZp+VF\r\ntPP2kYZRjkXPKSWlIBMaH6jhl1WWNcSET51pm1J1khWlR1oJJ4frXoDNL1rx\r\nO7Mh0Ta6okMQndnsUqRh1aCMAlaNn4CXNCenzGBlo0jkqmDLAAbubqW88nkA\r\nwE7FtL+QJsKPISDwthOFk/B7T48wZsN/RTeYcoMzPU6hfM4xtoTHUDwCDYWI\r\nAqR0UdV4yw8SV5WkMJNIXfybz9bNPpySnBfu+bTg3O1m6wjFJ/RTFaphFu03\r\n4/Y2qHJxTBT4phzXT4e+7jE5EvIMjlkr7ILHUzQZpzlrM+hO3oOeXpZn9R4X\r\nYgX2ioCh/W1nVBU4e8c/kZP3AQieIOPQRrTIbRW0FPD8MutJnhKfvYN+ldyK\r\ncTc9E8QIHfUT1Ezfeh8nw3jhxA2vFCLV0hn8iXzaLGUMjIuYIBsbfZb3+iHZ\r\nnvYokrpGBQxT1XyH0H7AHsnj2GTrQkVp+dNuBSIaX/zokYm9G/PJ2fRucKNu\r\n8YMhfAO+2MJbTFZ8OhRkQaeLy6iTv//EVIddS4LXKrAIS4jQWiHaF/K6MRMY\r\nY+Q6D53xl1An3NTtTwH7Tv1G6TwZiB2QJpY=\r\n=vD7h\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.16.1_1663630623281_0.9114858588140362"},"_hasShrinkwrap":false},"5.6.1":{"name":"tape","version":"5.6.1","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.3","call-bind":"^1.0.2","deep-equal":"^2.0.5","defined":"^1.0.0","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.6","object-inspect":"^1.12.2","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.3","resumer":"^0.0.0","string.prototype.trim":"^1.2.6","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.0.0","array.prototype.flatmap":"^1.3.0","aud":"^2.0.0","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"gitHead":"996b2a0f360240f4b0dbc5964f1af09130cbfc50","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_id":"tape@5.6.1","_nodeVersion":"18.9.0","_npmVersion":"8.19.1","dist":{"integrity":"sha512-reNzS3rzsJtKk0f+zJx2XlzIsjJXlIcOIrIxk5shHAG/DzW3BKyMg8UfN79oluYlcWo4lIt56ahLqwgpRT4idg==","shasum":"bbc1420e5e13003cbd7e2cf0efaa091bfb5c970a","tarball":"https://registry.npmjs.org/tape/-/tape-5.6.1.tgz","fileCount":149,"unpackedSize":356370,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBABPg9n3Wg6cMv5pQ2HVC1XR7vR7PRe0Me47BgTlylIAiEAxWk5/ccQIAuu0Y+pT7K3iC0I36Y1XUjEN2fbpVlh8DQ="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjKP1RACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoFvw/+JKeoZDvaeokJGyZJxSg2srTWK7gwyqZxTpW5FMhZSv7VEndO\r\nzlj2kRT3VCiUM9u5YUDhriP3dH4BoKzgTCRi1pOrm41vWFbuDJqgX7C2g5Cc\r\n7j07fp1aIaU3Wb4gdQAhZr++qrvCuas9bdBqkV3JHUx5dcoKw61ewpc4R40v\r\nSB0OoFyEtl9LKuEzzQtq874Wx//rdjKhmfTsSEDIHML6rT3TUudlsI8P+xv9\r\nObJQfiusE24Yn6F5yrMYpoy3eeQKV9akHcPi4bbuBhv07fYpzAcLCom0UeDQ\r\n/U3Gx6wrXK5fbOMjxS0DhqFH00ptztociwXFjFlnpqGw1sQNs9X2soA4wULU\r\nGndiwCXKOh7a2LqIOMXfQe0Ke0Vc5pIDTAbb5RXpbxZ/qj09ehnUFMm6gnYn\r\nKMOqS+w2BSAbhKqEf6gxfI3y6PPS7XwlD01hu43aGwfc/mAhujPsePc9zOLd\r\nhJmsx8rFL9lN9F2ctk2RrQ+wWsDZhBPIzThkfJbQcMdyLQzfGAPIMaYLww/0\r\nKWVXmROvFdlbhtEAiZeKZLGZ7yEMzKinrEsHuAZa61CuBARppie746mdrfOD\r\nO+Wu+Yemz4sK20aYz/0t51VzPZOUASY7SMTqEMr9rZYRBNg/QezE9lbI/utL\r\nbZLtmdhZfItU2OBFxnzE0mOa74Xf6h+eEAI=\r\n=4bbG\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"substack","email":"substack@gmail.com"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.6.1_1663630673049_0.18788797353052367"},"_hasShrinkwrap":false},"5.6.2":{"name":"tape","version":"5.6.2","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.4","call-bind":"^1.0.2","deep-equal":"^2.2.0","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.7","object-inspect":"^1.12.3","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.4","resumer":"^0.0.0","string.prototype.trim":"^1.2.7","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.0.1","array.prototype.flatmap":"^1.3.1","aud":"^2.0.2","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"gitHead":"40f6ad3649450cf8038c2238b01300d4f4b32bbb","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_id":"tape@5.6.2","_nodeVersion":"19.4.0","_npmVersion":"9.2.0","dist":{"integrity":"sha512-SqtlFs0MOoM2fVgTmlTw9GtO5Pua5YlVbKGzmd8faT5HaWPtVdVa4KXA7lK6/YJea0WSqJ0UR+HyfhACUHTK8Q==","shasum":"791447222425f8bca62bbdc893a65d912b389007","tarball":"https://registry.npmjs.org/tape/-/tape-5.6.2.tgz","fileCount":162,"unpackedSize":1101662,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDaTmkNtMK4RuWaKktuzsU/c3t72CFWsp91ri4jRZEEawIgSngyDmnrQRksax+0s9NRr6BBQk/Fr2ZBBmLtYv5rleY="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjxIotACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmql4Q//WJso88HbVYdjPiSZozCvkNxG/Un+1rSRWJMHAoSdQKqIIPbY\r\nED425KHD08QK3zeBcLjr6s7tqtBbV67H+0+I9qsi9n8sMedHIneukiF6DpCM\r\nd52H8OD0lCjXJ9FwyG8h10H2aXBEoxQmI9FhfNU4RUb2St4oqZFyE/Gaj3qj\r\njZqwudPHkxuxYtAsVd7jlYmkxDr11+lN7tBhQKPBaVN3NX9YQGKLtqU6MEfx\r\nyT3Mr0lebjmjMYrPS/dpJTQMSeEfx7jTdo6BvpePHM9F2ZKSNbvxGXQ/Axbv\r\nLWYCxujALMUQn09zC53sKyfA0ExQ0KJxJKT0nKcYg5GvSQj7INVkoOGIiyBN\r\nVVv6KiSTXj5vAiN1XEQ3gJVjjxu3JdvxGbCiSkrTWKBO8Dcv0jV9DWCGGxD4\r\negCiq9M/iSpV/OtUZhTBEPj2u3Z4fZsMOBLHtNpoOHQHUVj2xe7iZejezFUB\r\n3lUKafClS/0ySp+lT5L8uhnX3Kze2XlVt0B99/kJ1kYKBHHt6qkwqrs4coHM\r\n0jAnCJeVRzJcVkDry4NaFt9lyWj/ok3c+bkYkTd4plm76ZQ6l7gLR5KN8IYH\r\nOpYaXxGBppcaQzMDn7GGbLRzvCMxVs35tuBgndGxOiDIluvmNbKJSY8e+gHS\r\nmP1Zf1f50muSyzyMjqJ2Ft8euCYgZbFSDQY=\r\n=jAwL\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.6.2_1673824813552_0.33082391191231686"},"_hasShrinkwrap":false,"deprecated":"use v5.6.3 instead to avoid a useless debugging file being installed"},"5.6.3":{"name":"tape","version":"5.6.3","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.4","call-bind":"^1.0.2","deep-equal":"^2.2.0","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.7","object-inspect":"^1.12.3","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.4","resumer":"^0.0.0","string.prototype.trim":"^1.2.7","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.0.1","array.prototype.flatmap":"^1.3.1","aud":"^2.0.2","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"gitHead":"23aa477ed5d56b6fa377fb0c916ef8e94db116bc","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_id":"tape@5.6.3","_nodeVersion":"19.4.0","_npmVersion":"9.2.0","dist":{"integrity":"sha512-cUDDGSbyoSIpdUAqbqLI/r7i/S4BHuCB9M5j7E/LrLs/x/i4zeAJ798aqo+FGo+kr9seBZwr8AkZW6rjceyAMQ==","shasum":"0d3cc82f96b0906f73b0981df1a38a44fec7901d","tarball":"https://registry.npmjs.org/tape/-/tape-5.6.3.tgz","fileCount":161,"unpackedSize":363308,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDWKBJ35izT18Dl5u1C2dNi3Iw+yobVfyPbXfNT1FNhUgIhANZBSVDUQ6aarFpVzZCe7T910dpKIlj+MEUKyA96JM03"}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjxIpQACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo12w//XLmNtZ/PJJdf1Sk0+ot2A/pcMIn0Q5VO65dzsgNNMdauD0o2\r\nL5u6j8g+nrOhtE2L6x+8NigeCQYSAU9r9o2C8KLTVO2NYT8uwxNiClyKk3C9\r\nxtp7dTBiNnmV1g0Au+g2zha+OZknCidJyVZUPiiSCeoyD25/zKtCoz16H1Rp\r\nKCCxMmQVKRSUHSuTERvkZeomtMvv6KkAiaKZ+ulcQlBtrxTzqRgeuSkBZS/1\r\nsgWyt6X+gDFj5yBb/N/zkY8gghpmp8Ew5GvE+0njSRpbK4FMSpTA3ztYeOQP\r\nVyKndelniPOmO9G9LQ4a2fh+nP39Mqzc0hNh16YFTnDgbDvcSdBxKnQ/UHz9\r\nAX1c+JZKNVqx993YaBB0XaMm1V2XKpx4HDV0diDeujSpwI9w8hh1Ztd2DnNF\r\nMi09mEOssrDIEpKqq2f0KxizHLWlIkoPN0uuWmBMm+c+dvP7kwdesvNVNdE7\r\n0494inSxIGRMrSvzoMlP/PV4tEi+/zbTGbzs09+CKOHEYQ09VNslTk0AMZQh\r\nbjzN5tkI+1uGUiXPoz9OSgEiJqP59go5NcUlfkSltRPpTrn1CyfBaJhOx/ek\r\nDjoNYgYLNbT64RAxGlY7MZ+O9QHf0/uFlJYAVwLGnwG0AK8aWEqTVXPVufkq\r\nj7TC3tPXm9NflXrF3OAoiD5k9/SGIY30574=\r\n=/OSQ\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.6.3_1673824848166_0.3939004115399096"},"_hasShrinkwrap":false},"4.16.2":{"name":"tape","version":"4.16.2","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"call-bind":"~1.0.2","deep-equal":"~1.1.1","defined":"~1.0.1","dotignore":"~0.1.2","for-each":"~0.3.3","glob":"~7.2.3","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.1.4","minimist":"~1.2.7","object-inspect":"~1.12.3","resolve":"~1.22.1","resumer":"~0.0.0","string.prototype.trim":"~1.2.7","through":"~2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.0.1","array.prototype.flatmap":"^1.3.1","aud":"^2.0.2","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"readme":"# tape <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\ntap-producing test harness for node and browsers\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files.\nYou can run the tests by usual node means (`require('test-file.js')` or `node test-file.js`).\nYou can also run tests using the `tape` binary to utilize globbing, on Windows for example:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the [`glob`](https://www.npmjs.com/package/glob) module.\nIf you want `glob` to perform the expansion on a system where the shell performs such expansion, quote the arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm that will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/ljharb/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n- [tabe](https://github.com/Josenzo/tabe)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one of the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n- Describe blocks with https://github.com/mattriley/tape-describe\n\n# command-line flags\n\nWhile running tests, top-level configurations can be passed via the command line to specify desired behavior.\n\nAvailable configurations are listed below:\n\n## --require\n\n**Alias**: `-r`\n\nThis is used to load modules before running tests and is explained extensively in the [preloading modules](#preloading-modules) section.\n\n## --ignore\n\n**Alias**: `-i`\n\nThis flag is used when tests from certain folders and/or files are not intended to be run. It defaults to `.gitignore` file when passed with no argument.\n\n```sh\ntape -i .ignore **/*.js\n```\n\nAn error is thrown if the specified file passed as argument does not exist.\n\n## --no-only\nThis is particularly useful in a CI environment where an [only test](#testonlyname-opts-cb) is not supposed to go unnoticed.\n\nBy passing the `--no-only` flag, any existing [only test](#testonlyname-opts-cb) causes tests to fail.\n\n```sh\ntape --no-only **/*.js\n```\n\nAlternatively, the environment variable `NODE_TAPE_NO_ONLY_TEST` can be set to `true` to achieve the same behavior; the command-line flag takes precedence.\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods in [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have finished.\nTests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you don't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished right before `tape` is about to print the test summary.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called automatically after the `n`th assertion.\nIf there are any more assertions after the `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert that it is falsy.\n\nDo not call `t.end()` if your test callback returns a Promise.\n\n## t.teardown(cb)\n\nRegister a callback to run after the individual test has completed. Multiple registered teardown callbacks will run in order. Useful for undoing side effects, closing network connections, etc.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the description message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp`, `Function`, or `Object`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will pass only if the string representation of the exception contains the word `user`. Any other exception will result in a failed test. The `Function` is the exception thrown (e.g. `Error`). `Object` in this case corresponds to a so-called validation object, in which each property is tested for strict deep equality. As an example, see the following two tests--each passes a validation object to `t.throws()` as the second parameter. The first test will pass, because all property values in the actual error object are deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = true;\n\n    // Passing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true\n        },\n        \"Test message.\"\n    );\n```\nThis next test will fail, because all property values in the actual error object are _not_ deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = \"true\";\n\n    // Failing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true // This is not deeply strictly equal to err.check.\n        },\n        \"Test message.\"\n    );\n```\n\nThis is very similar to how Node's `assert.throws()` method tests validation objects (please see the [Node _assert.throws()_ documentation](https://nodejs.org/api/assert.html#assert_assert_throws_fn_error_message) for more information).\n\nIf `expected` is not of type `RegExp`, `Function`, or `Object`, or omitted entirely, any exception will result in a passed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.throws(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown, and must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will fail  only if the string representation of the exception contains the word `user`. Any other exception will result in a passed test.  The `Function` is the exception thrown (e.g. `Error`).  If `expected` is not of type `RegExp` or `Function`, or omitted entirely, any exception will result in a failed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.doesNotThrows(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current test `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up after `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output. (Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\nMultiline output will be split by `\\n` characters, and each one printed as a comment.\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with a new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to someplace else if you `htest.createStream().pipe()` to a destination stream on the first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case that will run for the entire process, all other test cases using `tape` will be ignored.\n\nCheck out how the usage of [the --no-only flag](#--no-only) could help ensure there is no `.only` test running in a specified environment.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes messages to `console.log()`. By default `stream` will be a text stream of TAP output, but you can get an object stream instead by setting `opts.objectMode` to `true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want, like a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\nA convenient alternative to achieve the same:\n```js\n// report.js\nvar test = require('tape');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row)) // for example\n});\n```\nand then:\n```sh\n$ tape -r ./report.js **/*.test.js\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# troubleshooting\n\nSometimes `t.end()` doesn’t preserve the expected output ordering.\n\nFor instance the following:\n\n```js\nvar test = require('tape');\n\ntest('first', function (t) {\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\nwill output:\n\n```\nok 1 second test\nok 2 third test\nok 3 first test\n```\n\nbecause `second` and `third` assume `first` has ended before it actually does.\n\nUse `t.plan()` instead to let other tests know they should wait:\n\n```diff\nvar test = require('tape');\n\ntest('first', function (t) {\n\n+  t.plan(2);\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n-    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\n# license\n\nMIT\n\n[package-url]: https://npmjs.org/package/tape\n[npm-version-svg]: https://versionbadg.es/ljharb/tape.svg\n[deps-svg]: https://david-dm.org/ljharb/tape.svg\n[deps-url]: https://david-dm.org/ljharb/tape\n[dev-deps-svg]: https://david-dm.org/ljharb/tape/dev-status.svg\n[dev-deps-url]: https://david-dm.org/ljharb/tape#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/tape.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/tape.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/tape.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=tape\n[codecov-image]: https://codecov.io/gh/ljharb/tape/branch/master/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/ljharb/tape/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/tape\n[actions-url]: https://github.com/ljharb/tape/actions\n","readmeFilename":"readme.markdown","gitHead":"a892b65442832c5ddb8185541c78e874dbff5a21","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_id":"tape@4.16.2","_nodeVersion":"19.4.0","_npmVersion":"9.2.0","dist":{"integrity":"sha512-TUChV+q0GxBBCEbfCYkGLkv8hDJYjMdSWdE0/Lr331sB389dsvFUHNV9ph5iQqKzt8Ss9drzcda/YeexclBFqg==","shasum":"7565e6af20426565557266e9dda7215869b297b6","tarball":"https://registry.npmjs.org/tape/-/tape-4.16.2.tgz","fileCount":118,"unpackedSize":325755,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBuFBzP2gU+Muv1XEC7PdiKUwCLc9gYAl/fSRqdxh9PTAiBBVLkGLpCCtuy5hTC5Fy95gUNiA3m/9kvgraImVUkoFg=="}],"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjxOtgACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmqvCg//X5U2l3GFMbyopxwWbUZKdXwiSE1JJ8L3zQq8rXusAj6eBHo9\r\nU76sMwZzkdPbBSIFb6ElltWunMET/haDmc6LMvti6Jqy974wwdtTekXlflxx\r\nCWreTrLljGxLsiz45pi93IzAszwBY2Bncd26JxWPU1UfvECGk4Ye6U72aGk2\r\nTMKvGlyBgoNqbBNKEIi/6TETVCCQrIz6UtkhdA/o5Vjjd+W8zL1dGCoDQ4JR\r\n3chBuddjrv7EYE07OljSz1kFaY7Sf72uXo40fQ7blTiLnTXdx5oKSs4HvEyx\r\nNYPUozJfJcTxyvz82z03km25ftQ5InMFcB65B1zbwnlH2eaVpCa/UF7tWu9t\r\nxC/+BIfpZSxBVX9OIqEXeGoxu+z5Z5I6OpuHGPmfvPtQX7Eu0XtFE/EoLy89\r\n/m2STQmPvJZjVUEpVIMcl1wW+7PWW5lphBuUD/hag2Dt9WyEIXwkGV0tw0R7\r\nYsifyaxCETPIp7NL6RRWcmFtk3GwyE3fhPXEakJ24InPKjN+ITBG6SZR2rSQ\r\ntqnrZpgfgRy2S+3jrMJuCQ0z7XOwqsL0HYfEBcuW/MKcYvgZoGQbIMHEGspj\r\nxvO1PKQn2AQAFAbfdLuhG34nARIBDu0Te0G7K/YBwmvbe93WA8dF/iGneu0s\r\nGpVMYbc73V1eaYkN//Qklpme8aGyt0loB38=\r\n=OnCP\r\n-----END PGP SIGNATURE-----\r\n"},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.16.2_1673849696753_0.8370380023342825"},"_hasShrinkwrap":false},"5.6.4":{"name":"tape","version":"5.6.4","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.4","call-bind":"^1.0.2","deep-equal":"^2.2.1","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","object-inspect":"^1.12.3","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.4","resumer":"^0.0.0","string.prototype.trim":"^1.2.7","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.1","aud":"^2.0.3","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"gitHead":"41fc81af90469db064b2fbcf6526669eb84c75cb","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_id":"tape@5.6.4","_nodeVersion":"20.3.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-D5NkwItdBMAmgmij4qbHGOmxBF9Xo4l3iRDme7KIxZE/K+D0k4ZJLdaGPbQvBF7QVUeFUzEo11j8CZxkrydINA==","shasum":"c6a7dc0585495e166518cbc07c4d8ccdc1d8ee2a","tarball":"https://registry.npmjs.org/tape/-/tape-5.6.4.tgz","fileCount":161,"unpackedSize":366520,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGdIWJP6H55G3ZcyjHsqHn3S/gEfo3QhqawjPFE1uXXvAiA/L9jSlhLJDteMDdzicmwwtYAzznLzFgi9AWAaXVBBQA=="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.6.4_1688272167237_0.6718613049411783"},"_hasShrinkwrap":false},"5.6.5":{"name":"tape","version":"5.6.5","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"array.prototype.every":"^1.1.4","call-bind":"^1.0.2","deep-equal":"^2.2.2","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","object-inspect":"^1.12.3","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.4","resumer":"^0.0.0","string.prototype.trim":"^1.2.7","through":"^2.3.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.1","aud":"^2.0.3","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"gitHead":"fea1937da076ed032c5f457b2eb9ddfc147d9214","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_id":"tape@5.6.5","_nodeVersion":"20.4.0","_npmVersion":"9.7.2","dist":{"integrity":"sha512-r6XcLeO3h5rOFpkYWifAjlhSSSXbFSSBF86lhb6J0KAQbY91H1MzOeIWG6TH0iWS52ypwr6fenJgCGQGtL8CxA==","shasum":"a4dd5c6fb035fcee5b89a069cf8e98c6cbf40959","tarball":"https://registry.npmjs.org/tape/-/tape-5.6.5.tgz","fileCount":161,"unpackedSize":367370,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHBWRhhmlfAVBR5r/cRF5OCee2+PclMSjl5jvbUATrcSAiEA4eWhMnp3TFuxnpa+BfZHdxAPdk8bUgmDHoGpxUmo4Ek="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.6.5_1689194144667_0.8123759416340843"},"_hasShrinkwrap":false},"5.6.6":{"name":"tape","version":"5.6.6","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"@ljharb/resumer":"^0.0.1","@ljharb/through":"^2.3.9","array.prototype.every":"^1.1.4","call-bind":"^1.0.2","deep-equal":"^2.2.2","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","object-inspect":"^1.12.3","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.4","string.prototype.trim":"^1.2.7"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.1","aud":"^2.0.3","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"!(type not-in-publish) || not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"gitHead":"e8c56b7a1b25f065439cec49e9ef1eeffad074e2","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_id":"tape@5.6.6","_nodeVersion":"20.4.0","_npmVersion":"9.7.2","dist":{"integrity":"sha512-rGp2cZ3rfZ6QfTBm6yvohf8aXmDqPyzMKZwTMV12w4i+b/N2Adwlg8PlW8jLqWzlJUZhglyYaLOSrMt/ZlZkAA==","shasum":"dc555729d557184764a0d61130304d21977e4ca2","tarball":"https://registry.npmjs.org/tape/-/tape-5.6.6.tgz","fileCount":161,"unpackedSize":367710,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAVm79dQUvUHUgiDDTz47F4Y50gKpy4ECeX+uVnQ5zASAiEAlAIV8DzbKf13AoMl/6Jvt8E7+3FiP4HR22kJtAy7TOs="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.6.6_1689714868883_0.21079127828078925"},"_hasShrinkwrap":false},"5.7.0":{"name":"tape","version":"5.7.0","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"@ljharb/resumer":"^0.0.1","@ljharb/through":"^2.3.9","array.prototype.every":"^1.1.5","call-bind":"^1.0.2","deep-equal":"^2.2.2","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","mock-property":"^1.0.0","object-inspect":"^1.12.3","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.4","string.prototype.trim":"^1.2.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.2","aud":"^2.0.3","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","intl-fallback-symbol":"^1.0.0","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"_id":"tape@5.7.0","gitHead":"e1ce53b6207268df48c7da108b30d021b2902e03","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_nodeVersion":"20.6.1","_npmVersion":"9.8.1","dist":{"integrity":"sha512-6EZoHjMDUUhet8+k32w/9onULL1U8idXKvBCnZxuZF2iFe+tMYOsKo4bpCtXbTSngZmYBnkU08TMhJwsKaHhaw==","shasum":"7f31bf116159d3cdbc6f65baa11aaa025d34ccfc","tarball":"https://registry.npmjs.org/tape/-/tape-5.7.0.tgz","fileCount":164,"unpackedSize":393081,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQClHMh77kx5UqDBHuBeIW/i8Mu7n6AbaZp4ojZ2/iC5AAIhAJ8HoOll6tYjhjK5qU70u1oKlA1ztSw06vc4amyT1c3i"}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.7.0_1695333316026_0.7962210155236136"},"_hasShrinkwrap":false},"4.17.0":{"name":"tape","version":"4.17.0","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"@ljharb/resumer":"~0.0.1","@ljharb/through":"~2.3.9","call-bind":"~1.0.2","deep-equal":"~1.1.1","defined":"~1.0.1","dotignore":"~0.1.2","for-each":"~0.3.3","glob":"~7.2.3","has":"~1.0.3","inherits":"~2.0.4","is-regex":"~1.1.4","minimist":"~1.2.8","mock-property":"~1.0.0","object-inspect":"~1.12.3","resolve":"~1.22.6","string.prototype.trim":"~1.2.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.2","aud":"^2.0.3","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^3.0.5"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"_id":"tape@4.17.0","readme":"# tape <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\ntap-producing test harness for node and browsers\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be equal\nnot ok 2 should be equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files.\nYou can run the tests by usual node means (`require('test-file.js')` or `node test-file.js`).\nYou can also run tests using the `tape` binary to utilize globbing, on Windows for example:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the [`glob`](https://www.npmjs.com/package/glob) module.\nIf you want `glob` to perform the expansion on a system where the shell performs such expansion, quote the arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm that will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/ljharb/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n- [tabe](https://github.com/Josenzo/tabe)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one of the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- Promise support with https://www.npmjs.com/package/blue-tape or https://www.npmjs.com/package/tape-promise\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n- Describe blocks with https://github.com/mattriley/tape-describe\n\n# command-line flags\n\nWhile running tests, top-level configurations can be passed via the command line to specify desired behavior.\n\nAvailable configurations are listed below:\n\n## --require\n\n**Alias**: `-r`\n\nThis is used to load modules before running tests and is explained extensively in the [preloading modules](#preloading-modules) section.\n\n## --ignore\n\n**Alias**: `-i`\n\nThis flag is used when tests from certain folders and/or files are not intended to be run. It defaults to `.gitignore` file when passed with no argument.\n\n```sh\ntape -i .ignore **/*.js\n```\n\nAn error is thrown if the specified file passed as argument does not exist.\n\n## --no-only\nThis is particularly useful in a CI environment where an [only test](#testonlyname-opts-cb) is not supposed to go unnoticed.\n\nBy passing the `--no-only` flag, any existing [only test](#testonlyname-opts-cb) causes tests to fail.\n\n```sh\ntape --no-only **/*.js\n```\n\nAlternatively, the environment variable `NODE_TAPE_NO_ONLY_TEST` can be set to `true` to achieve the same behavior; the command-line flag takes precedence.\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods in [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have finished.\nTests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you don't call `t.end()` explicitly, your test will hang.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished right before `tape` is about to print the test summary.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called automatically after the `n`th assertion.\nIf there are any more assertions after the `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert that it is falsy.\n\nDo not call `t.end()` if your test callback returns a Promise.\n\n## t.teardown(cb)\n\nRegister a callback to run after the individual test has completed. Multiple registered teardown callbacks will run in order. Useful for undoing side effects, closing network connections, etc.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the description message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `actual === expected` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.is()`, `t.strictEqual()`,\n`t.strictEquals()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `actual !== expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.notStrictEqual()`, `t.notStrictEquals()`,\n`t.isNotEqual()`, `t.isNot()`, `t.not()`, `t.doesNotEqual()`, `t.isInequal()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.looseEqual()`, `t.looseEquals()`\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp`, `Function`, or `Object`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will pass only if the string representation of the exception contains the word `user`. Any other exception will result in a failed test. The `Function` is the exception thrown (e.g. `Error`). `Object` in this case corresponds to a so-called validation object, in which each property is tested for strict deep equality. As an example, see the following two tests--each passes a validation object to `t.throws()` as the second parameter. The first test will pass, because all property values in the actual error object are deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = true;\n\n    // Passing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true\n        },\n        \"Test message.\"\n    );\n```\nThis next test will fail, because all property values in the actual error object are _not_ deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = \"true\";\n\n    // Failing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true // This is not deeply strictly equal to err.check.\n        },\n        \"Test message.\"\n    );\n```\n\nThis is very similar to how Node's `assert.throws()` method tests validation objects (please see the [Node _assert.throws()_ documentation](https://nodejs.org/api/assert.html#assert_assert_throws_fn_error_message) for more information).\n\nIf `expected` is not of type `RegExp`, `Function`, or `Object`, or omitted entirely, any exception will result in a passed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.throws(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown, and must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will fail  only if the string representation of the exception contains the word `user`. Any other exception will result in a passed test.  The `Function` is the exception thrown (e.g. `Error`).  If `expected` is not of type `RegExp` or `Function`, or omitted entirely, any exception will result in a failed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.doesNotThrows(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current test `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up after `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output.\n(Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\nMultiline output will be split by `\\n` characters, and each one printed as a comment.\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.capture(obj, method, implementation = () => {})\n\nReplaces `obj[method]` with the supplied implementation.\n`obj` must be a non-primitive, `method` must be a valid property key (string or symbol), and `implementation`, if provided, must be a function.\n\nCalling the returned `results()` function will return an array of call result objects.\nThe array of calls will be reset whenever the function is called.\nCall result objects will match one of these forms:\n  - `{ args: [x, y, z], receiver: o, returned: a }`\n  - `{ args: [x, y, z], receiver: o, threw: true, thrown: e }`\n\nThe replacement will automatically be restored on test teardown.\nYou can restore it manually, if desired, by calling `.restore()` on the returned results function.\n\nModeled after [tap](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html).\n\n## t.captureFn(original)\n\nWraps the supplied function.\nThe returned wrapper has a `.calls` property, which is an array that will be populated with call result objects, described under `t.capture()`.\n\nModeled after [tap](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html).\n\n## t.intercept(obj, property, desc = {}, strictMode = true)\n\nSimilar to `t.capture()``, but can be used to track get/set operations for any arbitrary property.\nCalling the returned `results()` function will return an array of call result objects.\nThe array of calls will be reset whenever the function is called.\nCall result objects will match one of these forms:\n  - `{ type: 'get', value: '1.2.3', success: true, args: [x, y, z], receiver: o }`\n  - `{ type: 'set', value: '2.4.6', success: false, args: [x, y, z], receiver: o }`\n\nIf `strictMode` is `true`, and `writable` is `false`, and no `get` or `set` is provided, an exception will be thrown when `obj[property]` is assigned to.\nIf `strictMode` is `false` in this scenario, nothing will be set, but the attempt will still be logged.\n\nProviding both `desc.get` and `desc.set` are optional and can still be useful for logging get/set attempts.\n\n`desc` must be a valid property descriptor, meaning that `get`/`set` are mutually exclusive with `writable`/`value`.\nAdditionally, explicitly setting `configurable` to `false` is not permitted, so that the property can be restored.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with a new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to someplace else if you `htest.createStream().pipe()` to a destination stream on the first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case that will run for the entire process, all other test cases using `tape` will be ignored.\n\nCheck out how the usage of [the --no-only flag](#--no-only) could help ensure there is no `.only` test running in a specified environment.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes messages to `console.log()`. By default `stream` will be a text stream of TAP output, but you can get an object stream instead by setting `opts.objectMode` to `true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want, like a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\nA convenient alternative to achieve the same:\n```js\n// report.js\nvar test = require('tape');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row)) // for example\n});\n```\nand then:\n```sh\n$ tape -r ./report.js **/*.test.js\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# troubleshooting\n\nSometimes `t.end()` doesn’t preserve the expected output ordering.\n\nFor instance the following:\n\n```js\nvar test = require('tape');\n\ntest('first', function (t) {\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\nwill output:\n\n```\nok 1 second test\nok 2 third test\nok 3 first test\n```\n\nbecause `second` and `third` assume `first` has ended before it actually does.\n\nUse `t.plan()` instead to let other tests know they should wait:\n\n```diff\nvar test = require('tape');\n\ntest('first', function (t) {\n\n+  t.plan(2);\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n-    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\n# license\n\nMIT\n\n[package-url]: https://npmjs.org/package/tape\n[npm-version-svg]: https://versionbadg.es/ljharb/tape.svg\n[deps-svg]: https://david-dm.org/ljharb/tape.svg\n[deps-url]: https://david-dm.org/ljharb/tape\n[dev-deps-svg]: https://david-dm.org/ljharb/tape/dev-status.svg\n[dev-deps-url]: https://david-dm.org/ljharb/tape#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/tape.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/tape.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/tape.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=tape\n[codecov-image]: https://codecov.io/gh/ljharb/tape/branch/master/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/ljharb/tape/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/tape\n[actions-url]: https://github.com/ljharb/tape/actions\n","readmeFilename":"readme.markdown","gitHead":"9851ca25c5a67aa1ce538724bf219e2977e8be8e","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_nodeVersion":"20.6.1","_npmVersion":"9.8.1","dist":{"integrity":"sha512-KCuXjYxCZ3ru40dmND+oCLsXyuA8hoseu2SS404Px5ouyS0A99v8X/mdiLqsR5MTAyamMBN7PRwt2Dv3+xGIxw==","shasum":"de89f3671ddc5dad178d04c28dc6b0183f42268e","tarball":"https://registry.npmjs.org/tape/-/tape-4.17.0.tgz","fileCount":121,"unpackedSize":355670,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDf1m8a2R5Hrk/VYUYmQJxqJZZQC8SUDonQLTA9k0AtXQIgEBY20jF7FckFUA1P+FJpw/Z5ILvYyfYVwNzI/UFJ/7I="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_4.17.0_1695357964240_0.5625675928427101"},"_hasShrinkwrap":false},"5.7.1":{"name":"tape","version":"5.7.1","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"@ljharb/resumer":"^0.0.1","@ljharb/through":"^2.3.11","array.prototype.every":"^1.1.5","call-bind":"^1.0.2","deep-equal":"^2.2.2","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has":"^1.0.3","has-dynamic-import":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","mock-property":"^1.0.0","object-inspect":"^1.12.3","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.5","string.prototype.trim":"^1.2.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.2","aud":"^2.0.3","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","intl-fallback-symbol":"^1.0.0","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"_id":"tape@5.7.1","gitHead":"5a776572cb7dcf46e32c493db716579e3bc5dc5d","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_nodeVersion":"20.8.0","_npmVersion":"10.1.0","dist":{"integrity":"sha512-5U2nU0PbvWXXtJxE0hFv78VSyhJiyEPq1wNtMCWUxt17SZbeBqs9V5zcyDqkyguYN39d8qAjZxfFkjJ1+kB4yA==","shasum":"f5b837e4982561dd4d9354a1f77ede20391e3f5b","tarball":"https://registry.npmjs.org/tape/-/tape-5.7.1.tgz","fileCount":164,"unpackedSize":396679,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFEqMNZGHz7X1AbgF38PdWxKbEDTFNNu31ZnrQNlPVd9AiEAyKQkbsh2vFNLdMWJkIagn9CWBB80wqiDkY3iAsq1+B8="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.7.1_1697060420109_0.2959530598467033"},"_hasShrinkwrap":false},"5.7.2":{"name":"tape","version":"5.7.2","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"directories":{"example":"example","test":"test"},"dependencies":{"@ljharb/resumer":"^0.0.1","@ljharb/through":"^2.3.11","array.prototype.every":"^1.1.5","call-bind":"^1.0.5","deep-equal":"^2.2.2","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has-dynamic-import":"^2.0.1","hasown":"^2.0.0","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","mock-property":"^1.0.2","object-inspect":"^1.13.1","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.4","resolve":"^2.0.0-next.5","string.prototype.trim":"^1.2.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.2","aud":"^2.0.3","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","intl-fallback-symbol":"^1.0.0","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.0","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm run tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"_id":"tape@5.7.2","gitHead":"3404436096313bfa061c9b3ceea64a8892091249","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_nodeVersion":"21.0.0","_npmVersion":"10.2.0","dist":{"integrity":"sha512-cvSyprYahyOYXbtBwV/B7nrx7kINeZ3VZ9fKoSywoPwZN3oQ1WVLvt+Vl0XCz/gi37CDrY3dlW790nzviIzoPw==","shasum":"04ff0e64a0316f648f153fae8ccd69791143f84b","tarball":"https://registry.npmjs.org/tape/-/tape-5.7.2.tgz","fileCount":164,"unpackedSize":397253,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCdg/uN6NmQFx9uQYeo7r9ZU0qau6aWgwPHPcYGBpDymAIga0JP6FIZjzLg0khj/qVKpaK1uUw+dglVC1VhnwDvuQI="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.7.2_1697864957471_0.5050042320157064"},"_hasShrinkwrap":false},"5.7.3":{"name":"tape","version":"5.7.3","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"sideEffects":false,"directories":{"example":"example","test":"test"},"dependencies":{"@ljharb/resumer":"^0.0.1","@ljharb/through":"^2.3.11","array.prototype.every":"^1.1.5","call-bind":"^1.0.5","deep-equal":"^2.2.3","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has-dynamic-import":"^2.0.1","hasown":"^2.0.0","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","mock-property":"^1.0.3","object-inspect":"^1.13.1","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.5","resolve":"^2.0.0-next.5","string.prototype.trim":"^1.2.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.2","aud":"^2.0.4","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","intl-fallback-symbol":"^1.0.0","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.1","nyc":"^10.3.2","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm-run-posix-or-windows tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","tests-only:windows":"nyc node_modules\\tap\\bin\\run.js test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"_id":"tape@5.7.3","gitHead":"56569c3e837cdaef8b623e838860a776910036b3","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_nodeVersion":"21.5.0","_npmVersion":"10.2.4","dist":{"integrity":"sha512-un2/TkloCBIxbrLac88Z9WElQ85WLE4t+jjfgrmxrlInWGYQf9r9Wbycc/nNP3zap6GBb7qln7h85QoNBNZdHg==","shasum":"d10975d79554089230dbada91dd85f38467ece6c","tarball":"https://registry.npmjs.org/tape/-/tape-5.7.3.tgz","fileCount":164,"unpackedSize":402654,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFSIoY5V4y2sBuJPLUVpFA76UnXJVfD9jVeJd1U8vVVPAiBexQ4c/22rOru58Bp7miiYBZlj981ZJKshTDno65+W4A=="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.7.3_1705125944349_0.08726193791342518"},"_hasShrinkwrap":false},"5.7.4":{"name":"tape","version":"5.7.4","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"sideEffects":false,"directories":{"example":"example","test":"test"},"dependencies":{"@ljharb/resumer":"^0.0.1","@ljharb/through":"^2.3.11","array.prototype.every":"^1.1.5","call-bind":"^1.0.5","deep-equal":"^2.2.3","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has-dynamic-import":"^2.1.0","hasown":"^2.0.0","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","mock-property":"^1.0.3","object-inspect":"^1.13.1","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.5","resolve":"^2.0.0-next.5","string.prototype.trim":"^1.2.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.2","aud":"^2.0.4","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","intl-fallback-symbol":"^1.0.0","is-core-module":"^2.13.1","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.1","nyc":"^10.3.2","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm-run-posix-or-windows tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","tests-only:windows":"nyc node_modules\\tap\\bin\\run.js test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"_id":"tape@5.7.4","gitHead":"22befd6c6add70aab813db7cc74ab8efc370c053","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_nodeVersion":"21.6.0","_npmVersion":"10.2.4","dist":{"integrity":"sha512-uaigP+5H9+E8aaMLKMbGkDd33G5TKu4UFpapqT7um+8xSHQQUS2lJNd+hTj9fFVQLg8bmcIofwc8b9f6+ISSfQ==","shasum":"5c515282a513599e9d1434665640900faf066a3b","tarball":"https://registry.npmjs.org/tape/-/tape-5.7.4.tgz","fileCount":166,"unpackedSize":407510,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCHRflLggceyI5uz1OulBeek3ezkVbm3wq26AtcNTb51wIge6Hmv16Ec5TLjKva7jMIyU8+GZ5DAIZQ8h7HQ4cA95E="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.7.4_1706164869343_0.18101162995348563"},"_hasShrinkwrap":false},"5.7.5":{"name":"tape","version":"5.7.5","description":"tap-producing test harness for node and browsers","main":"index.js","browser":{"fs":false},"exports":{".":[{"default":"./index.js"},"./index.js"],"./lib/default_stream":"./lib/default_stream.js","./lib/results":"./lib/results.js","./lib/test":"./lib/test.js","./package":"./package.json","./package.json":"./package.json"},"bin":{"tape":"bin/tape"},"sideEffects":false,"directories":{"example":"example","test":"test"},"dependencies":{"@ljharb/resumer":"^0.1.2","@ljharb/through":"^2.3.12","array.prototype.every":"^1.1.5","call-bind":"^1.0.7","deep-equal":"^2.2.3","defined":"^1.0.1","dotignore":"^0.1.2","for-each":"^0.3.3","get-package-type":"^0.1.0","glob":"^7.2.3","has-dynamic-import":"^2.1.0","hasown":"^2.0.1","inherits":"^2.0.4","is-regex":"^1.1.4","minimist":"^1.2.8","mock-property":"^1.0.3","object-inspect":"^1.13.1","object-is":"^1.1.5","object-keys":"^1.1.1","object.assign":"^4.1.5","resolve":"^2.0.0-next.5","string.prototype.trim":"^1.2.8"},"devDependencies":{"@ljharb/eslint-config":"^21.1.0","array.prototype.flatmap":"^1.3.2","aud":"^2.0.4","auto-changelog":"^2.4.0","concat-stream":"^1.6.2","eclint":"^2.8.1","ecstatic":"^4.1.4","es-value-fixtures":"^1.4.2","eslint":"=8.8.0","falafel":"^2.2.5","intl-fallback-symbol":"^1.0.0","is-core-module":"^2.13.1","jackspeak":"=2.1.1","js-yaml":"^3.14.0","npm-run-posix-or-windows":"^2.0.2","npmignore":"^0.3.1","nyc":"^10.3.2","safe-publish-latest":"^2.0.0","tap":"^8.0.1","tap-parser":"^5.4.0"},"scripts":{"prepack":"npmignore --auto --commentLines=autogenerated","version":"auto-changelog && git add CHANGELOG.md","postversion":"auto-changelog && git add CHANGELOG.md && git commit --no-edit --amend && git tag -f \"v$(node -e \"console.log(require('./package.json').version)\")\"","prepublishOnly":"safe-publish-latest","prepublish":"not-in-publish || npm run prepublishOnly","prelint:files":"git ls-files 2>/dev/null | xargs find 2> /dev/null | grep -vE 'node_modules|\\.git' || echo '*.md *.js test/*.js'","eclint":"FILES=\"$(npm run --silent prelint:files)\" eclint check \"${FILES:=package.json}\"","eclint:windows":"eclint check *.js","prelint":"npm-run-posix-or-windows eclint","lint":"eslint --ext .js,.cjs,.mjs . bin/*","pretest":"npm run lint","test":"npm-run-posix-or-windows tests-only","posttest":"aud --production","tests-only":"nyc tap 'test/*.js'","tests-only:windows":"nyc node_modules\\tap\\bin\\run.js test/*.js","test:example":"find example -name '*.js' | grep -v fail | grep -v static | xargs tap"},"testling":{"files":"test/browser/*.js","browsers":["ie/6..latest","chrome/20..latest","firefox/10..latest","safari/latest","opera/11.0..latest","iphone/6","ipad/6"]},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"funding":{"url":"https://github.com/sponsors/ljharb"},"license":"MIT","auto-changelog":{"output":"CHANGELOG.md","template":"keepachangelog","unreleased":false,"commitLimit":false,"backfillLimit":false,"hideCredit":true},"publishConfig":{"ignore":[".github/workflows"]},"_id":"tape@5.7.5","gitHead":"70d8f91411115f0600baa0eb5c6f1127fece1abe","bugs":{"url":"https://github.com/ljharb/tape/issues"},"_nodeVersion":"21.6.0","_npmVersion":"10.2.4","dist":{"integrity":"sha512-C5Gm1MR8ujZmNrsmOiHSkKFfY2thrnUrFw/fFtcva9FABbN7LrHuQPi3MTS0Z0i/SLfYSJtRIcJYDUpwPsQ8yA==","shasum":"fa015b537507afe90067fb448ace738745bb1fd3","tarball":"https://registry.npmjs.org/tape/-/tape-5.7.5.tgz","fileCount":167,"unpackedSize":414197,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGTEHXxVWBNX1Bqtt2RS10SW0oXxzVRfdkQ+rntlaNJaAiEAmki4EyyRa8IeZvv2H0ZOt6BynsSY97jot6wFlXqCPhQ="}]},"_npmUser":{"name":"ljharb","email":"ljharb@gmail.com"},"maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/tape_5.7.5_1707944667512_0.09190691749578006"},"_hasShrinkwrap":false}},"readme":"# tape <sup>[![Version Badge][npm-version-svg]][package-url]</sup>\n\n[TAP](https://testanything.org/)-producing test harness for node and browsers\n\n[![github actions][actions-image]][actions-url]\n[![coverage][codecov-image]][codecov-url]\n[![dependency status][deps-svg]][deps-url]\n[![dev dependency status][dev-deps-svg]][dev-deps-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n[![npm badge][npm-badge-png]][package-url]\n\n![tape](https://web.archive.org/web/20170612184731if_/http://substack.net/images/tape_drive.png)\n\n# example\n\n``` js\nvar test = require('tape');\n\ntest('timing test', function (t) {\n    t.plan(2);\n\n    t.equal(typeof Date.now, 'function');\n    var start = Date.now();\n\n    setTimeout(function () {\n        t.equal(Date.now() - start, 100);\n    }, 100);\n});\n\ntest('test using promises', async function (t) {\n    const result = await someAsyncThing();\n    t.ok(result);\n});\n```\n\n```\n$ node example/timing.js\nTAP version 13\n# timing test\nok 1 should be strictly equal\nnot ok 2 should be strictly equal\n  ---\n    operator: equal\n    expected: 100\n    actual:   107\n  ...\n\n1..2\n# tests 2\n# pass  1\n# fail  1\n```\n\n# usage\n\nYou always need to `require('tape')` in test files. You can run the tests by usual node means (`require('test-file.js')` or `node test-file.js`).\nYou can also run tests using the `tape` binary to utilize globbing, on Windows for example:\n\n```sh\n$ tape tests/**/*.js\n```\n\n`tape`'s arguments are passed to the [`glob`](https://www.npmjs.com/package/glob) module.\nIf you want `glob` to perform the expansion on a system where the shell performs such expansion, quote the arguments as necessary:\n\n```sh\n$ tape 'tests/**/*.js'\n$ tape \"tests/**/*.js\"\n```\n\n## Preloading modules\n\nAdditionally, it is possible to make `tape` load one or more modules before running any tests, by using the `-r` or `--require` flag. Here's an example that loads [babel-register](http://babeljs.io/docs/usage/require/) before running any tests, to allow for JIT compilation:\n\n```sh\n$ tape -r babel-register tests/**/*.js\n```\n\nDepending on the module you're loading, you may be able to parameterize it using environment variables or auxiliary files. Babel, for instance, will load options from [`.babelrc`](http://babeljs.io/docs/usage/babelrc/) at runtime.\n\nThe `-r` flag behaves exactly like node's `require`, and uses the same module resolution algorithm. This means that if you need to load local modules, you have to prepend their path with `./` or `../` accordingly.\n\nFor example:\n\n```sh\n$ tape -r ./my/local/module tests/**/*.js\n```\n\nPlease note that all modules loaded using the `-r` flag will run *before* any tests, regardless of when they are specified. For example, `tape -r a b -r c` will actually load `a` and `c` *before* loading `b`, since they are flagged as required modules.\n\n# things that go well with tape\n\n`tape` maintains a fairly minimal core. Additional features are usually added by using another module alongside `tape`.\n\n## pretty reporters\n\nThe default TAP output is good for machines and humans that are robots.\n\nIf you want a more colorful / pretty output there are lots of modules on npm that will output something pretty if you pipe TAP into them:\n\n- [tap-spec](https://github.com/scottcorgan/tap-spec)\n- [tap-dot](https://github.com/scottcorgan/tap-dot)\n- [faucet](https://github.com/ljharb/faucet)\n- [tap-bail](https://github.com/juliangruber/tap-bail)\n- [tap-browser-color](https://github.com/kirbysayshi/tap-browser-color)\n- [tap-json](https://github.com/gummesson/tap-json)\n- [tap-min](https://github.com/derhuerst/tap-min)\n- [tap-nyan](https://github.com/calvinmetcalf/tap-nyan)\n- [tap-pessimist](https://www.npmjs.org/package/tap-pessimist)\n- [tap-prettify](https://github.com/toolness/tap-prettify)\n- [colortape](https://github.com/shuhei/colortape)\n- [tap-xunit](https://github.com/aghassemi/tap-xunit)\n- [tap-difflet](https://github.com/namuol/tap-difflet)\n- [tape-dom](https://github.com/gritzko/tape-dom)\n- [tap-diff](https://github.com/axross/tap-diff)\n- [tap-notify](https://github.com/axross/tap-notify)\n- [tap-summary](https://github.com/zoubin/tap-summary)\n- [tap-markdown](https://github.com/Hypercubed/tap-markdown)\n- [tap-html](https://github.com/gabrielcsapo/tap-html)\n- [tap-react-browser](https://github.com/mcnuttandrew/tap-react-browser)\n- [tap-junit](https://github.com/dhershman1/tap-junit)\n- [tap-nyc](https://github.com/MegaArman/tap-nyc)\n- [tap-spec (emoji patch)](https://github.com/Sceat/tap-spec-emoji)\n- [tape-repeater](https://github.com/rgruesbeck/tape-repeater)\n- [tabe](https://github.com/Josenzo/tabe)\n\nTo use them, try `node test/index.js | tap-spec` or pipe it into one of the modules of your choice!\n\n## uncaught exceptions\n\nBy default, uncaught exceptions in your tests will not be intercepted, and will cause `tape` to crash. If you find this behavior undesirable, use [`tape-catch`](https://github.com/michaelrhodes/tape-catch) to report any exceptions as TAP errors.\n\n## other\n\n- CoffeeScript support with https://www.npmjs.com/package/coffeetape\n- ES6 support with https://www.npmjs.com/package/babel-tape-runner or https://www.npmjs.com/package/buble-tape-runner\n- Different test syntax with https://github.com/pguth/flip-tape (warning: mutates String.prototype)\n- Electron test runner with https://github.com/tundrax/electron-tap\n- Concurrency support with https://github.com/imsnif/mixed-tape\n- In-process reporting with https://github.com/DavidAnson/tape-player\n- Describe blocks with https://github.com/mattriley/tape-describe\n\n# command-line flags\n\nWhile running tests, top-level configurations can be passed via the command line to specify desired behavior.\n\nAvailable configurations are listed below:\n\n## --require\n\n**Alias**: `-r`\n\nThis is used to load modules before running tests and is explained extensively in the [preloading modules](#preloading-modules) section.\n\n## --ignore\n\n**Alias**: `-i`\n\nThis flag is used when tests from certain folders and/or files are not intended to be run.\nThe argument is a path to a file that contains the patterns to be ignored.\nIt defaults to `.gitignore` when passed with no argument.\n\n```sh\ntape -i .ignore '**/*.js'\n```\n\nAn error is thrown if the specified file passed as argument does not exist.\n\n## --ignore-pattern\n\nSame functionality as `--ignore`, but passing the pattern directly instead of an ignore file.\nIf both `--ignore` and `--ignore-pattern` are given, the `--ignore-pattern` argument is appended to the content of the ignore file.\n\n```sh\ntape --ignore-pattern 'integration_tests/**/*.js' '**/*.js'\n```\n\n## --no-only\nThis is particularly useful in a CI environment where an [only test](#testonlyname-opts-cb) is not supposed to go unnoticed.\n\nBy passing the `--no-only` flag, any existing [only test](#testonlyname-opts-cb) causes tests to fail.\n\n```sh\ntape --no-only **/*.js\n```\n\nAlternatively, the environment variable `NODE_TAPE_NO_ONLY_TEST` can be set to `true` to achieve the same behavior; the command-line flag takes precedence.\n\n# methods\n\nThe assertion methods in `tape` are heavily influenced or copied from the methods in [node-tap](https://github.com/isaacs/node-tap).\n\n```js\nvar test = require('tape')\n```\n\n## test([name], [opts], cb)\n\nCreate a new test with an optional `name` string and optional `opts` object.\n`cb(t)` fires with the new test object `t` once all preceding tests have finished.\nTests execute serially.\n\nAvailable `opts` options are:\n- opts.skip = true/false. See test.skip.\n- opts.timeout = 500. Set a timeout for the test, after which it will fail. See test.timeoutAfter.\n- opts.objectPrintDepth = 5. Configure max depth of expected / actual object printing. Environmental variable `NODE_TAPE_OBJECT_PRINT_DEPTH` can set the desired default depth for all tests; locally-set values will take precedence.\n- opts.todo = true/false. Test will be allowed to fail.\n\nIf you forget to `t.plan()` out how many assertions you are going to run and you don't call `t.end()` explicitly, or return a Promise that eventually settles, your test will hang.\n\nIf `cb` returns a Promise, it will be implicitly awaited. If that promise rejects, the test will be failed; if it fulfills, the test will end. Explicitly calling `t.end()` while also returning a Promise that fulfills is an error.\n\n## test.skip([name], [opts], cb)\n\nGenerate a new test that will be skipped over.\n\n## test.onFinish(fn)\n\nThe onFinish hook will get invoked when ALL `tape` tests have finished right before `tape` is about to print the test summary.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## test.onFailure(fn)\n\nThe onFailure hook will get invoked whenever any `tape` tests has failed.\n\n`fn` is called with no arguments, and its return value is ignored.\n\n## t.plan(n)\n\nDeclare that `n` assertions should be run. `t.end()` will be called automatically after the `n`th assertion.\nIf there are any more assertions after the `n`th, or after `t.end()` is called, they will generate errors.\n\n## t.end(err)\n\nDeclare the end of a test explicitly. If `err` is passed in `t.end` will assert that it is falsy.\n\nDo not call `t.end()` if your test callback returns a Promise.\n\n## t.teardown(cb)\n\nRegister a callback to run after the individual test has completed. Multiple registered teardown callbacks will run in order. Useful for undoing side effects, closing network connections, etc.\n\n## t.fail(msg)\n\nGenerate a failing assertion with a message `msg`.\n\n## t.pass(msg)\n\nGenerate a passing assertion with a message `msg`.\n\n## t.timeoutAfter(ms)\n\nAutomatically timeout the test after X ms.\n\n## t.skip(msg)\n\nGenerate an assertion that will be skipped over.\n\n## t.ok(value, msg)\n\nAssert that `value` is truthy with an optional description of the assertion `msg`.\n\nAliases: `t.true()`, `t.assert()`\n\n## t.notOk(value, msg)\n\nAssert that `value` is falsy with an optional description of the assertion `msg`.\n\nAliases: `t.false()`, `t.notok()`\n\n## t.error(err, msg)\n\nAssert that `err` is falsy. If `err` is non-falsy, use its `err.message` as the description message.\n\nAliases: `t.ifError()`, `t.ifErr()`, `t.iferror()`\n\n## t.equal(actual, expected, msg)\n\nAssert that `Object.is(actual, expected)` with an optional description of the assertion `msg`.\n\nAliases: `t.equals()`, `t.isEqual()`, `t.strictEqual()`, `t.strictEquals()`, `t.is()`\n\n## t.notEqual(actual, expected, msg)\n\nAssert that `!Object.is(actual, expected)` with an optional description of the assertion `msg`.\n\nAliases: `t.notEquals()`, `t.isNotEqual()`, `t.doesNotEqual()`, `t.isInequal()`, `t.notStrictEqual()`, `t.notStrictEquals()`, `t.isNot()`, `t.not()`\n\n## t.looseEqual(actual, expected, msg)\n\nAssert that `actual == expected` with an optional description of the assertion `msg`.\n\nAliases: `t.looseEquals()`\n\n## t.notLooseEqual(actual, expected, msg)\n\nAssert that `actual != expected` with an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEquals()`\n\n## t.deepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.deepEquals()`, `t.isEquivalent()`, `t.same()`\n\n## t.notDeepEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with strict comparisons (`===`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notDeepEquals`, `t.notEquivalent()`, `t.notDeeply()`, `t.notSame()`,\n`t.isNotDeepEqual()`, `t.isNotDeeply()`, `t.isNotEquivalent()`,\n`t.isInequivalent()`\n\n## t.deepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\n## t.notDeepLooseEqual(actual, expected, msg)\n\nAssert that `actual` and `expected` do not have the same structure and nested values using [node's deepEqual() algorithm](https://github.com/inspect-js/node-deep-equal) with loose comparisons (`==`) on leaf nodes and an optional description of the assertion `msg`.\n\nAliases: `t.notLooseEqual()`, `t.notLooseEquals()`\n\n## t.throws(fn, expected, msg)\n\nAssert that the function call `fn()` throws an exception. `expected`, if present, must be a `RegExp`, `Function`, or `Object`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will pass only if the string representation of the exception contains the word `user`. Any other exception will result in a failed test. The `Function` could be the constructor for the Error type thrown, or a predicate function to be called with that exception. `Object` in this case corresponds to a so-called validation object, in which each property is tested for strict deep equality. As an example, see the following two tests--each passes a validation object to `t.throws()` as the second parameter. The first test will pass, because all property values in the actual error object are deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = true;\n\n    // Passing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true\n        },\n        \"Test message.\"\n    );\n```\nThis next test will fail, because all property values in the actual error object are _not_ deeply strictly equal to the property values in the validation object.\n```\n    const err = new TypeError(\"Wrong value\");\n    err.code = 404;\n    err.check = \"true\";\n\n    // Failing test.\n    t.throws(\n        () => {\n            throw err;\n        },\n        {\n            code: 404,\n            check: true // This is not deeply strictly equal to err.check.\n        },\n        \"Test message.\"\n    );\n```\n\nThis is very similar to how Node's `assert.throws()` method tests validation objects (please see the [Node _assert.throws()_ documentation](https://nodejs.org/api/assert.html#assert_assert_throws_fn_error_message) for more information).\n\nIf `expected` is not of type `RegExp`, `Function`, or `Object`, or omitted entirely, any exception will result in a passed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.throws(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.doesNotThrow(fn, expected, msg)\n\nAssert that the function call `fn()` does not throw an exception. `expected`, if present, limits what should not be thrown, and must be a `RegExp` or `Function`. The `RegExp` matches the string representation of the exception, as generated by `err.toString()`. For example, if you set `expected` to `/user/`, the test will fail  only if the string representation of the exception contains the word `user`. Any other exception will result in a passed test.  The `Function` is the exception thrown (e.g. `Error`).  If `expected` is not of type `RegExp` or `Function`, or omitted entirely, any exception will result in a failed test. `msg` is an optional description of the assertion.\n\nPlease note that the second parameter, `expected`, cannot be of type `string`. If a value of type `string` is provided for `expected`, then `t.doesNotThrows(fn, expected, msg)`  will execute, but the value of `expected` will be set to  `undefined`, and the specified string will be set as the value for the `msg` parameter (regardless of what _actually_ passed as the third parameter). This can cause unexpected results, so please be mindful.\n\n## t.test(name, [opts], cb)\n\nCreate a subtest with a new test handle `st` from `cb(st)` inside the current test `t`. `cb(st)` will only fire when `t` finishes. Additional tests queued up after `t` will not be run until all subtests finish.\n\nYou may pass the same options that [`test()`](#testname-opts-cb) accepts.\n\n## t.comment(message)\n\nPrint a message without breaking the tap output.\n(Useful when using e.g. `tap-colorize` where output is buffered & `console.log` will print in incorrect order vis-a-vis tap output.)\n\nMultiline output will be split by `\\n` characters, and each one printed as a comment.\n\n## t.match(string, regexp, message)\n\nAssert that `string` matches the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.doesNotMatch(string, regexp, message)\n\nAssert that `string` does not match the RegExp `regexp`. Will fail when the first two arguments are the wrong type.\n\n## t.capture(obj, method, implementation = () => {})\n\nReplaces `obj[method]` with the supplied implementation.\n`obj` must be a non-primitive, `method` must be a valid property key (string or symbol), and `implementation`, if provided, must be a function.\n\nCalling the returned `results()` function will return an array of call result objects.\nThe array of calls will be reset whenever the function is called.\nCall result objects will match one of these forms:\n  - `{ args: [x, y, z], receiver: o, returned: a }`\n  - `{ args: [x, y, z], receiver: o, threw: true }`\n\nThe replacement will automatically be restored on test teardown.\nYou can restore it manually, if desired, by calling `.restore()` on the returned results function.\n\nModeled after [tap](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html).\n\n## t.captureFn(original)\n\nWraps the supplied function.\nThe returned wrapper has a `.calls` property, which is an array that will be populated with call result objects, described under `t.capture()`.\n\nModeled after [tap](https://tapjs.github.io/tapjs/modules/_tapjs_intercept.html).\n\n## t.intercept(obj, property, desc = {}, strictMode = true)\n\nSimilar to `t.capture()``, but can be used to track get/set operations for any arbitrary property.\nCalling the returned `results()` function will return an array of call result objects.\nThe array of calls will be reset whenever the function is called.\nCall result objects will match one of these forms:\n  - `{ type: 'get', value: '1.2.3', success: true, args: [x, y, z], receiver: o }`\n  - `{ type: 'set', value: '2.4.6', success: false, args: [x, y, z], receiver: o }`\n\nIf `strictMode` is `true`, and `writable` is `false`, and no `get` or `set` is provided, an exception will be thrown when `obj[property]` is assigned to.\nIf `strictMode` is `false` in this scenario, nothing will be set, but the attempt will still be logged.\n\nProviding both `desc.get` and `desc.set` are optional and can still be useful for logging get/set attempts.\n\n`desc` must be a valid property descriptor, meaning that `get`/`set` are mutually exclusive with `writable`/`value`.\nAdditionally, explicitly setting `configurable` to `false` is not permitted, so that the property can be restored.\n\n## var htest = test.createHarness()\n\nCreate a new test harness instance, which is a function like `test()`, but with a new pending stack and test state.\n\nBy default the TAP output goes to `console.log()`. You can pipe the output to someplace else if you `htest.createStream().pipe()` to a destination stream on the first tick.\n\n## test.only([name], [opts], cb)\n\nLike `test([name], [opts], cb)` except if you use `.only` this is the only test case that will run for the entire process, all other test cases using `tape` will be ignored.\n\nCheck out how the usage of [the --no-only flag](#--no-only) could help ensure there is no `.only` test running in a specified environment.\n\n## var stream = test.createStream(opts)\n\nCreate a stream of output, bypassing the default output stream that writes messages to `console.log()`. By default `stream` will be a text stream of TAP output, but you can get an object stream instead by setting `opts.objectMode` to `true`.\n\n### tap stream reporter\n\nYou can create your own custom test reporter using this `createStream()` api:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream().pipe(process.stdout);\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nYou could substitute `process.stdout` for whatever other output stream you want, like a network connection or a file.\n\nPass in test files to run as arguments:\n\n```sh\n$ node tap.js test/x.js test/y.js\nTAP version 13\n# (anonymous)\nnot ok 1 should be strictly equal\n  ---\n    operator: equal\n    expected: \"boop\"\n    actual:   \"beep\"\n  ...\n# (anonymous)\nok 2 should be strictly equal\nok 3 (unnamed assert)\n# wheee\nok 4 (unnamed assert)\n\n1..4\n# tests 4\n# pass  3\n# fail  1\n```\n\n### object stream reporter\n\nHere's how you can render an object stream instead of TAP:\n\n``` js\nvar test = require('tape');\nvar path = require('path');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row))\n});\n\nprocess.argv.slice(2).forEach(function (file) {\n    require(path.resolve(file));\n});\n```\n\nThe output for this runner is:\n\n```sh\n$ node object.js test/x.js test/y.js\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":0}\n{\"id\":0,\"ok\":false,\"name\":\"should be strictly equal\",\"operator\":\"equal\",\"actual\":\"beep\",\"expected\":\"boop\",\"error\":{},\"test\":0,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":0}\n{\"type\":\"test\",\"name\":\"(anonymous)\",\"id\":1}\n{\"id\":0,\"ok\":true,\"name\":\"should be strictly equal\",\"operator\":\"equal\",\"actual\":2,\"expected\":2,\"test\":1,\"type\":\"assert\"}\n{\"id\":1,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":1,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":1}\n{\"type\":\"test\",\"name\":\"wheee\",\"id\":2}\n{\"id\":0,\"ok\":true,\"name\":\"(unnamed assert)\",\"operator\":\"ok\",\"actual\":true,\"expected\":true,\"test\":2,\"type\":\"assert\"}\n{\"type\":\"end\",\"test\":2}\n```\n\nA convenient alternative to achieve the same:\n```js\n// report.js\nvar test = require('tape');\n\ntest.createStream({ objectMode: true }).on('data', function (row) {\n    console.log(JSON.stringify(row)) // for example\n});\n```\nand then:\n```sh\n$ tape -r ./report.js **/*.test.js\n```\n\n# install\n\nWith [npm](https://npmjs.org) do:\n\n```sh\nnpm install tape --save-dev\n```\n\n# troubleshooting\n\nSometimes `t.end()` doesn’t preserve the expected output ordering.\n\nFor instance the following:\n\n```js\nvar test = require('tape');\n\ntest('first', function (t) {\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\nwill output:\n\n```\nok 1 second test\nok 2 third test\nok 3 first test\n```\n\nbecause `second` and `third` assume `first` has ended before it actually does.\n\nUse `t.plan()` instead to let other tests know they should wait:\n\n```diff\nvar test = require('tape');\n\ntest('first', function (t) {\n\n+  t.plan(2);\n\n  setTimeout(function () {\n    t.ok(1, 'first test');\n-    t.end();\n  }, 200);\n\n  t.test('second', function (t) {\n    t.ok(1, 'second test');\n    t.end();\n  });\n});\n\ntest('third', function (t) {\n  setTimeout(function () {\n    t.ok(1, 'third test');\n    t.end();\n  }, 100);\n});\n```\n\n# license\n\nMIT\n\n[package-url]: https://npmjs.org/package/tape\n[npm-version-svg]: https://versionbadg.es/ljharb/tape.svg\n[deps-svg]: https://david-dm.org/ljharb/tape.svg\n[deps-url]: https://david-dm.org/ljharb/tape\n[dev-deps-svg]: https://david-dm.org/ljharb/tape/dev-status.svg\n[dev-deps-url]: https://david-dm.org/ljharb/tape#info=devDependencies\n[npm-badge-png]: https://nodei.co/npm/tape.png?downloads=true&stars=true\n[license-image]: https://img.shields.io/npm/l/tape.svg\n[license-url]: LICENSE\n[downloads-image]: https://img.shields.io/npm/dm/tape.svg\n[downloads-url]: https://npm-stat.com/charts.html?package=tape\n[codecov-image]: https://codecov.io/gh/ljharb/tape/branch/master/graphs/badge.svg\n[codecov-url]: https://app.codecov.io/gh/ljharb/tape/\n[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/tape\n[actions-url]: https://github.com/ljharb/tape/actions\n","maintainers":[{"name":"domenic","email":"d@domenic.me"},{"name":"raynos","email":"raynos2@gmail.com"},{"name":"ljharb","email":"ljharb@gmail.com"}],"time":{"modified":"2024-02-14T21:04:27.897Z","created":"2012-11-25T17:10:27.951Z","0.0.0":"2012-11-25T17:10:28.935Z","0.0.1":"2012-11-25T21:50:41.827Z","0.0.2":"2012-11-25T22:13:12.886Z","0.0.3":"2012-11-26T04:55:09.267Z","0.0.4":"2012-11-26T22:59:48.864Z","0.0.5":"2012-11-28T10:33:25.131Z","0.1.0":"2012-12-04T05:53:59.019Z","0.1.1":"2012-12-12T22:46:16.538Z","0.1.2":"2012-12-19T19:31:30.917Z","0.1.3":"2012-12-19T20:00:10.951Z","0.1.4":"2012-12-21T03:30:57.238Z","0.1.5":"2012-12-21T03:50:59.111Z","0.2.0":"2013-01-18T05:17:02.129Z","0.2.1":"2013-01-19T03:41:06.293Z","0.2.2":"2013-01-19T03:44:10.288Z","0.3.0":"2013-03-12T06:46:14.532Z","0.3.1":"2013-03-21T21:27:35.970Z","0.3.2":"2013-03-25T21:50:38.528Z","0.3.3":"2013-04-01T17:58:01.794Z","1.0.0":"2013-05-04T06:32:21.465Z","1.0.1":"2013-05-04T06:36:10.961Z","1.0.2":"2013-05-09T02:46:17.505Z","1.0.3":"2013-06-07T07:32:59.387Z","1.0.4":"2013-06-09T03:50:59.377Z","1.1.0":"2013-09-04T02:12:49.994Z","1.1.1":"2013-09-20T18:57:48.318Z","2.0.0":"2013-10-14T15:36:34.436Z","2.0.1":"2013-10-25T23:09:22.595Z","2.1.0":"2013-10-25T23:21:15.277Z","2.2.0":"2013-11-22T08:11:11.795Z","2.2.1":"2013-11-22T08:14:57.272Z","2.3.0":"2013-11-22T09:34:01.208Z","2.3.1":"2013-12-17T22:29:25.644Z","2.3.2":"2013-12-17T23:50:15.266Z","2.4.0":"2014-01-29T22:25:11.586Z","2.4.1":"2014-02-01T02:59:20.720Z","2.4.2":"2014-02-01T19:34:17.861Z","2.5.0":"2014-02-21T06:19:35.315Z","2.6.0":"2014-03-04T01:54:06.340Z","2.7.0":"2014-03-05T01:12:44.103Z","2.7.1":"2014-03-05T01:49:07.446Z","2.7.2":"2014-03-05T04:00:07.348Z","2.8.0":"2014-03-05T04:14:16.355Z","2.9.0":"2014-03-05T05:08:01.834Z","2.10.0":"2014-03-05T05:29:58.809Z","2.10.1":"2014-03-05T06:17:35.452Z","2.10.2":"2014-03-05T06:19:38.526Z","2.11.0":"2014-03-22T02:22:56.660Z","2.12.0":"2014-03-24T05:45:22.955Z","2.12.1":"2014-03-30T05:10:18.679Z","2.0.2":"2014-04-02T19:03:37.733Z","2.1.1":"2014-04-02T19:05:28.492Z","2.2.2":"2014-04-02T19:09:33.465Z","2.3.3":"2014-04-02T19:10:33.331Z","2.4.3":"2014-04-02T19:12:12.455Z","2.5.1":"2014-04-02T19:13:01.844Z","2.6.1":"2014-04-02T19:14:13.141Z","2.7.3":"2014-04-02T19:15:07.235Z","2.8.1":"2014-04-02T19:16:00.065Z","2.9.1":"2014-04-02T19:17:05.297Z","2.10.3":"2014-04-02T19:17:54.636Z","2.11.1":"2014-04-02T19:18:29.248Z","2.12.2":"2014-04-02T19:20:23.027Z","2.12.3":"2014-04-05T00:52:10.666Z","2.13.0":"2014-05-14T22:52:40.225Z","2.13.1":"2014-05-17T09:18:53.232Z","2.13.2":"2014-06-02T20:33:33.375Z","2.13.3":"2014-06-12T17:43:15.722Z","2.13.4":"2014-07-20T01:24:16.520Z","2.14.0":"2014-08-05T02:19:43.928Z","3.0.0":"2014-09-16T21:21:45.794Z","3.0.1":"2014-10-17T14:04:19.313Z","3.0.2":"2014-11-05T18:51:44.559Z","3.0.3":"2014-11-11T09:25:27.640Z","3.1.0":"2015-01-15T21:42:49.276Z","3.2.0":"2015-01-15T21:43:31.296Z","3.3.0":"2015-01-19T00:52:08.652Z","3.4.0":"2015-01-19T01:05:25.489Z","3.5.0":"2015-01-30T18:55:33.421Z","4.0.0":"2015-04-03T19:37:27.327Z","4.0.1":"2015-07-19T07:37:13.016Z","4.0.2":"2015-08-03T18:35:20.985Z","4.0.3":"2015-08-07T06:52:55.733Z","4.1.0":"2015-08-12T20:09:11.425Z","4.2.0":"2015-08-15T02:24:26.850Z","4.2.1":"2015-10-02T08:41:42.374Z","4.2.2":"2015-10-21T01:12:18.048Z","4.3.0":"2015-12-23T00:20:16.124Z","4.4.0":"2015-12-26T01:49:36.252Z","4.5.0":"2016-03-03T00:20:34.115Z","1.1.2":"2016-03-06T22:46:04.939Z","2.14.1":"2016-03-06T22:46:21.161Z","3.6.1":"2016-03-06T22:46:34.604Z","3.6.0":"2016-03-06T22:47:45.003Z","4.5.1":"2016-03-06T22:48:05.449Z","4.6.0":"2016-06-20T05:57:43.051Z","4.6.1":"2016-09-30T06:00:44.720Z","4.6.2":"2016-09-30T18:12:33.637Z","4.6.3":"2016-11-22T05:17:17.006Z","4.7.0":"2017-06-26T23:50:30.610Z","4.8.0":"2017-07-31T23:30:57.101Z","4.9.0":"2018-02-19T07:01:22.679Z","4.9.1":"2018-06-07T23:04:01.370Z","4.9.2":"2018-12-29T22:15:48.975Z","4.10.0":"2019-02-09T21:44:05.565Z","4.10.1":"2019-02-14T00:31:47.851Z","4.10.2":"2019-05-25T21:06:06.150Z","4.11.0":"2019-06-29T06:05:36.007Z","4.12.0":"2019-12-16T22:36:09.507Z","5.0.0-next.0":"2019-12-21T07:01:51.450Z","4.12.1":"2019-12-24T19:13:30.703Z","5.0.0-next.1":"2020-01-01T21:33:59.077Z","4.13.0":"2020-01-08T07:38:06.408Z","5.0.0-next.2":"2020-01-08T18:18:47.827Z","5.0.0-next.3":"2020-01-09T00:30:08.627Z","5.0.0-next.4":"2020-01-19T05:11:05.196Z","4.13.2":"2020-03-02T20:26:34.039Z","5.0.0-next.5":"2020-03-03T01:28:27.289Z","5.0.0":"2020-04-24T22:00:28.464Z","4.13.3":"2020-05-25T03:38:40.882Z","5.0.1":"2020-05-25T04:05:25.924Z","5.1.0":"2020-12-29T20:19:45.409Z","5.1.1":"2021-01-04T22:43:50.860Z","5.2.0":"2021-02-20T21:24:45.310Z","5.2.1":"2021-02-28T00:40:31.829Z","5.2.2":"2021-03-03T19:03:23.059Z","5.3.0":"2021-07-26T23:29:49.348Z","4.14.0":"2021-07-28T04:42:37.751Z","5.3.1":"2021-08-07T05:40:07.203Z","5.3.2":"2021-11-16T05:31:34.514Z","5.4.0":"2021-12-26T05:37:04.477Z","5.4.1":"2022-01-16T04:00:40.335Z","4.15.0":"2022-01-26T19:33:04.977Z","5.5.0":"2022-01-26T20:09:33.653Z","5.5.1":"2022-02-11T06:55:20.777Z","5.5.2":"2022-02-13T01:15:59.703Z","5.5.3":"2022-04-08T18:59:52.780Z","4.15.1":"2022-04-08T21:17:18.084Z","5.6.0":"2022-08-16T20:41:31.232Z","4.16.0":"2022-08-16T22:06:27.682Z","4.16.1":"2022-09-19T23:37:03.498Z","5.6.1":"2022-09-19T23:37:53.197Z","5.6.2":"2023-01-15T23:20:13.780Z","5.6.3":"2023-01-15T23:20:48.341Z","4.16.2":"2023-01-16T06:14:56.922Z","5.6.4":"2023-07-02T04:29:27.480Z","5.6.5":"2023-07-12T20:35:44.942Z","5.6.6":"2023-07-18T21:14:29.040Z","5.7.0":"2023-09-21T21:55:16.465Z","4.17.0":"2023-09-22T04:46:04.406Z","5.7.1":"2023-10-11T21:40:20.455Z","5.7.2":"2023-10-21T05:09:17.780Z","5.7.3":"2024-01-13T06:05:44.511Z","5.7.4":"2024-01-25T06:41:09.535Z","5.7.5":"2024-02-14T21:04:27.728Z"},"author":{"name":"Jordan Harband","email":"ljharb@gmail.com"},"repository":{"type":"git","url":"git://github.com/ljharb/tape.git"},"users":{"isao":true,"luk":true,"bat":true,"nrn":true,"chilts":true,"pid":true,"bthesorceror":true,"kesla":true,"conradz":true,"snize":true,"morishitter":true,"joakin":true,"tunnckocore":true,"dexteryy":true,"wenbing":true,"heroicyang":true,"daviddias":true,"groundwater":true,"wavded":true,"robertwhurst":true,"deide":true,"smallsharptools":true,"kwizzn":true,"bret":true,"akiva":true,"cilindrox":true,"markthethomas":true,"goblindegook":true,"joeybaker":true,"eyy":true,"rethinkflash":true,"johnsonj":true,"gregjopa":true,"mathijs":true,"tmpvar":true,"nickleefly":true,"alexkval":true,"raiseandfall":true,"carlosvillademor":true,"patmcc":true,"program247365":true,"nak2k":true,"smallhelm":true,"debearloper":true,"x4devs":true,"mlm":true,"koulmomo":true,"ruanyu1":true,"jessaustin":true,"xiechao06":true,"joelwallis":true,"jasonevrtt":true,"pe8ter":true,"n370":true,"nice_body":true,"mrmartineau":true,"nikolenkoanton92":true,"igormilla":true,"ozzysun":true,"keberox":true,"jlertle":true,"corintho":true,"quanack":true,"jackvial":true,"xhh":true,"cdokolas":true,"insin":true,"gr2m":true,"sasquatch":true,"restuta":true,"jokja":true,"leodutra":true,"travm":true,"hartzis":true,"eerne":true,"max_devjs":true,"brunoscopelliti":true,"kontrax":true,"grantcarthew":true,"nomemires":true,"hengkiardo":true,"thenpmfather":true,"alefteris":true,"04th0809":true,"particle4dev":true,"majgis":true,"luizstacio":true,"rochejul":true,"kevin2r":true,"scytalezero":true,"vectorhacker":true,"graubnla":true,"intelight-its":true,"farskipper":true,"ellyo":true,"dagilleland":true,"yicone":true,"jmwlsn":true,"jtbrinkmann":true,"ksmithbaylor":true,"danielbankhead":true,"mrvicadai":true,"mattms":true,"rsp":true,"leonardorb":true,"nikcorg":true,"vonthar":true,"garrickajo":true,"erikvold":true,"dzhou777":true,"didimoner":true,"scoch":true,"gomoto":true,"mirreal":true,"wangnan0610":true,"tmurngon":true,"seangenabe":true,"allenmoore":true,"dongdao_huangyipeng":true,"antouank":true,"sachacr":true,"hecto932":true,"diegorbaquero":true,"vassiliy.pimkin":true,"mikestaub":true,"luiko":true,"kodekracker":true,"firerishi":true,"hugovila":true,"sua":true,"leonzhao":true,"sm1215":true,"panlw":true,"nilz3ro":true,"rubiadias":true,"djamseed":true,"xkema":true,"ciro-maciel":true,"kkk123321":true,"dinggewennuan":true,"tjfwalker":true,"icodeforcookies":true,"tomekf":true,"mrzmmr":true,"dralc":true,"jherax":true,"amiziara":true,"snazzah":true,"johniexu":true,"daizch":true},"readmeFilename":"readme.markdown","homepage":"https://github.com/ljharb/tape","keywords":["tap","test","harness","assert","browser"],"bugs":{"url":"https://github.com/ljharb/tape/issues"},"license":"MIT"}